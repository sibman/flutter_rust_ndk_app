[2024-05-22T04:12:07.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-22T04:12:07.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-22T04:12:07.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-22T04:12:07.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-22T04:12:07.127Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-22T04:12:07.855Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-22T04:12:07.858Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T04:12:07.862Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-22T04:12:08.745Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.0 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 5dcb86f68f (13 days ago) â€¢ 2024-05-09 07:39:20 -0500
Engine â€¢ revision f6344b75dc
Tools â€¢ Dart 3.4.0 â€¢ DevTools 2.34.3
 stderr=
[2024-05-22T04:12:08.746Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T04:12:08.746Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T04:12:08.746Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-22T04:12:08.746Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-22T04:13:59.307Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone() - chrono::Duration::days(1);
            let end_date = created_at;
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                    (false, true) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) AND is_completed = 1) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -597399512;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            25 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            17 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            15 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            6 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            14 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            16 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            28 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            32 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            33 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            24 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            29 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            30 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            26 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            27 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            31 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=   Compiling libc v0.2.150
   Compiling proc-macro2 v1.0.70
   Compiling unicode-ident v1.0.12
   Compiling autocfg v1.1.0
   Compiling futures-core v0.3.29
   Compiling futures-channel v0.3.29
   Compiling version_check v0.9.4
   Compiling futures-task v0.3.29
   Compiling futures-util v0.3.29
   Compiling anyhow v1.0.75
   Compiling vcpkg v0.2.15
   Compiling slab v0.4.9
   Compiling pkg-config v0.3.30
   Compiling ahash v0.8.11
   Compiling num-traits v0.2.19
   Compiling quote v1.0.33
   Compiling serde v1.0.193
   Compiling syn v2.0.39
   Compiling build-target v0.4.0
    Checking hashbrown v0.14.5
   Compiling flutter_rust_bridge v2.0.0-dev.35
    Checking num_cpus v1.16.0
   Compiling cc v1.0.83
   Compiling hex v0.4.3
    Checking tokio v1.34.0
    Checking threadpool v1.8.1
    Checking getrandom v0.2.14
    Checking hashlink v0.9.0
    Checking chrono v0.4.38
   Compiling backtrace v0.3.69
   Compiling dart-sys-fork v4.1.1
   Compiling libsqlite3-sys v0.28.0
    Checking allo-isolate v0.1.24
   Compiling futures-macro v0.3.29
   Compiling serde_derive v1.0.193
   Compiling delegate-attr v0.3.0
   Compiling flutter_rust_bridge_macros v2.0.0-dev.35
    Checking futures-executor v0.3.29
    Checking futures v0.3.29
    Checking uuid v1.8.0
    Checking rusqlite v0.31.0
    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1m 50s


[2024-05-22T04:13:59.419Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-22T04:13:59.420Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T04:13:59.423Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-22T04:13:59.423Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T04:13:59.425Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-22T04:13:59.426Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T04:13:59.453Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-22T04:13:59.939Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T04:13:59.939Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-22T04:13:59.939Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-22T04:13:59.940Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-22T04:13:59.940Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T04:13:59.940Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T04:13:59.942Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-22T04:13:59.962Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T04:13:59.962Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-22T04:13:59.963Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-22T04:13:59.963Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T04:13:59.964Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(54716..54724) }
[2024-05-22T04:13:59.964Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(56896..56900) }
[2024-05-22T04:13:59.965Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T04:13:59.965Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-22T04:13:59.965Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-22T04:13:59.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T04:13:59.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(61308..61318) }
[2024-05-22T04:13:59.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(62439..62455) }
[2024-05-22T04:13:59.968Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(63534..63545) }
[2024-05-22T04:13:59.970Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T04:13:59.971Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-22T04:13:59.971Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-22T04:13:59.972Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T04:13:59.972Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T04:13:59.975Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T04:13:59.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-22T04:13:59.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-22T04:13:59.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-22T04:13:59.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-22T04:13:59.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T04:13:59.983Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-22T04:14:00.051Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T04:14:00.051Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(82338..82348) }
[2024-05-22T04:14:00.051Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(83012..83018) }
[2024-05-22T04:14:00.051Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(86838..86846) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(86849..86854) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-22T04:14:00.052Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(86869..86879) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(86880..86881) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(86885..86888) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(86890..86894) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(86896..86902) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(86903..86918) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(86919..86920) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T04:14:00.052Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(86939..86954) }
[2024-05-22T04:14:00.052Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(87247..87258) }
[2024-05-22T04:14:00.053Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(87831..87846) }
[2024-05-22T04:14:00.053Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88255..88296) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(88310..88323) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(88324..88325) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(88339..88358) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(88360..88373) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(88375..88389) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88390..88391) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(88393..88399) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88400..88401) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T04:14:00.053Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88409..88521) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(88535..88545) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(88546..88547) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(88551..88564) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88565..88566) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T04:14:00.054Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88623..88668) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(88682..88699) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(88700..88701) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(88715..88734) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(88736..88749) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(88751..88769) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88770..88771) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(88781..88787) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(88790..88809) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(88811..88824) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(88826..88845) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88846..88847) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T04:14:00.054Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88856..88922) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88927..89007) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(89012..89058) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(89072..89086) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(89087..89088) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(89092..89109) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(89110..89111) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T04:14:00.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(90377..90387) }
[2024-05-22T04:14:00.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(93245..93272) }
[2024-05-22T04:14:00.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-22T04:14:00.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-22T04:14:00.056Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T04:14:00.056Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T04:14:00.061Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T04:14:00.064Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T04:14:00.072Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(33112..33138) }
[2024-05-22T04:14:00.072Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(33365..33389) }
[2024-05-22T04:14:00.072Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(28895..28907) }
[2024-05-22T04:14:00.073Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.075Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.076Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(28984..28999) }
[2024-05-22T04:14:00.076Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.076Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.076Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(29079..29092) }
[2024-05-22T04:14:00.077Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.077Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.077Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(31260..31263) }
[2024-05-22T04:14:00.078Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.078Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.079Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.079Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(31693..31699) }
[2024-05-22T04:14:00.079Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(31783..31792) }
[2024-05-22T04:14:00.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(31887..31896) }
[2024-05-22T04:14:00.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(31985..31997) }
[2024-05-22T04:14:00.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.082Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(32129..32141) }
[2024-05-22T04:14:00.082Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.082Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(32233..32247) }
[2024-05-22T04:14:00.083Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.083Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(32394..32408) }
[2024-05-22T04:14:00.083Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.084Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(32539..32552) }
[2024-05-22T04:14:00.084Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.118Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(32694..32706) }
[2024-05-22T04:14:00.118Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.119Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(32828..32840) }
[2024-05-22T04:14:00.119Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.119Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.120Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(32974..32986) }
[2024-05-22T04:14:00.120Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.120Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.120Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(37452..37469) }
[2024-05-22T04:14:00.121Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(37950..37972) }
[2024-05-22T04:14:00.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(38485..38502) }
[2024-05-22T04:14:00.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(38879..38896) }
[2024-05-22T04:14:00.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(39692..39711) }
[2024-05-22T04:14:00.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(40080..40100) }
[2024-05-22T04:14:00.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(51335..51340) }
[2024-05-22T04:14:00.124Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(51564..51572) }
[2024-05-22T04:14:00.124Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(51733..51752) }
[2024-05-22T04:14:00.124Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.124Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(52263..52280) }
[2024-05-22T04:14:00.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(52785..52796) }
[2024-05-22T04:14:00.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(53077..53091) }
[2024-05-22T04:14:00.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.127Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(53419..53428) }
[2024-05-22T04:14:00.127Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T04:14:00.128Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(53616..53627) }
[2024-05-22T04:14:00.128Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T04:14:00.128Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(53949..53960) }
[2024-05-22T04:14:00.129Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(54128..54140) }
[2024-05-22T04:14:00.189Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/simple.dart", "lib/src/rust/api/model.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-22T04:14:00.190Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-22T04:14:07.708Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 5.90 seconds.
 stderr=
[2024-05-22T04:14:07.710Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-22T04:14:07.710Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-22T04:14:08.402Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-22T04:14:08.403Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T04:14:08.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T04:14:08.409Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T14:12:47.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-22T14:12:47.074Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-22T14:12:47.076Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-22T14:12:47.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-22T14:12:47.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-22T14:12:47.931Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-22T14:12:47.932Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T14:12:47.935Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-22T14:12:48.614Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.0 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 5dcb86f68f (13 days ago) â€¢ 2024-05-09 07:39:20 -0500
Engine â€¢ revision f6344b75dc
Tools â€¢ Dart 3.4.0 â€¢ DevTools 2.34.3
 stderr=
[2024-05-22T14:12:48.616Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T14:12:48.616Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T14:12:48.617Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-22T14:12:48.617Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-22T14:12:50.226Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone() - chrono::Duration::days(1);
            let end_date = created_at;
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                    (false, true) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) AND is_completed = 1) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -597399512;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            25 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            17 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            15 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            6 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            14 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            16 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            28 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            32 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            33 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            24 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            29 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            30 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            26 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            27 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            31 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.78s


[2024-05-22T14:12:50.374Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-22T14:12:50.375Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T14:12:50.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-22T14:12:50.379Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T14:12:50.382Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-22T14:12:50.382Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T14:12:50.412Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-22T14:12:51.146Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T14:12:51.147Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-22T14:12:51.147Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-22T14:12:51.147Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-22T14:12:51.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T14:12:51.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T14:12:51.150Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-22T14:12:51.179Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T14:12:51.180Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-22T14:12:51.180Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-22T14:12:51.181Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T14:12:51.181Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(54716..54724) }
[2024-05-22T14:12:51.181Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(56896..56900) }
[2024-05-22T14:12:51.182Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T14:12:51.182Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-22T14:12:51.183Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-22T14:12:51.184Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T14:12:51.184Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(61308..61318) }
[2024-05-22T14:12:51.185Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(62439..62455) }
[2024-05-22T14:12:51.185Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(63534..63545) }
[2024-05-22T14:12:51.187Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T14:12:51.188Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-22T14:12:51.188Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-22T14:12:51.188Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T14:12:51.189Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T14:12:51.192Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T14:12:51.193Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-22T14:12:51.194Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-22T14:12:51.194Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-22T14:12:51.194Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-22T14:12:51.194Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T14:12:51.198Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-22T14:12:51.270Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T14:12:51.271Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(82338..82348) }
[2024-05-22T14:12:51.271Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(83012..83018) }
[2024-05-22T14:12:51.271Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(86838..86846) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(86849..86854) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-22T14:12:51.271Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(86869..86879) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(86880..86881) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(86885..86888) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(86890..86894) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(86896..86902) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(86903..86918) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(86919..86920) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T14:12:51.272Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(86939..86954) }
[2024-05-22T14:12:51.272Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(87247..87258) }
[2024-05-22T14:12:51.272Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(87831..87846) }
[2024-05-22T14:12:51.272Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88255..88296) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(88310..88323) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(88324..88325) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(88339..88358) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(88360..88373) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(88375..88389) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88390..88391) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(88393..88399) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88400..88401) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T14:12:51.273Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88409..88521) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(88535..88545) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(88546..88547) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(88551..88564) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88565..88566) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T14:12:51.273Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88623..88668) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(88682..88699) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(88700..88701) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(88715..88734) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(88736..88749) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(88751..88769) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88770..88771) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(88781..88787) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(88790..88809) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(88811..88824) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(88826..88845) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88846..88847) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T14:12:51.273Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88856..88922) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(88927..89007) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(89012..89058) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(89072..89086) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(89087..89088) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(89092..89109) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(89110..89111) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T14:12:51.278Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(90377..90387) }
[2024-05-22T14:12:51.278Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(93245..93272) }
[2024-05-22T14:12:51.278Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-22T14:12:51.279Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-22T14:12:51.279Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T14:12:51.279Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T14:12:51.285Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T14:12:51.288Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T14:12:51.297Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(33112..33138) }
[2024-05-22T14:12:51.298Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(33365..33389) }
[2024-05-22T14:12:51.298Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(28895..28907) }
[2024-05-22T14:12:51.299Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.302Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.302Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(28984..28999) }
[2024-05-22T14:12:51.303Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.303Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.303Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(29079..29092) }
[2024-05-22T14:12:51.304Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.304Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.304Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(31260..31263) }
[2024-05-22T14:12:51.305Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.306Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.306Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.306Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(31693..31699) }
[2024-05-22T14:12:51.307Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.307Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(31783..31792) }
[2024-05-22T14:12:51.307Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.308Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(31887..31896) }
[2024-05-22T14:12:51.308Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.309Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(31985..31997) }
[2024-05-22T14:12:51.309Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.309Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(32129..32141) }
[2024-05-22T14:12:51.310Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.310Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(32233..32247) }
[2024-05-22T14:12:51.310Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.311Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(32394..32408) }
[2024-05-22T14:12:51.311Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.311Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(32539..32552) }
[2024-05-22T14:12:51.312Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.312Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(32694..32706) }
[2024-05-22T14:12:51.312Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.312Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(32828..32840) }
[2024-05-22T14:12:51.313Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.313Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.314Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(32974..32986) }
[2024-05-22T14:12:51.314Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.314Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.315Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(37452..37469) }
[2024-05-22T14:12:51.315Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(37950..37972) }
[2024-05-22T14:12:51.315Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(38485..38502) }
[2024-05-22T14:12:51.316Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(38879..38896) }
[2024-05-22T14:12:51.316Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(39692..39711) }
[2024-05-22T14:12:51.317Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(40080..40100) }
[2024-05-22T14:12:51.317Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(51335..51340) }
[2024-05-22T14:12:51.342Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(51564..51572) }
[2024-05-22T14:12:51.342Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(51733..51752) }
[2024-05-22T14:12:51.343Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.343Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(52263..52280) }
[2024-05-22T14:12:51.343Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.344Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.344Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(52785..52796) }
[2024-05-22T14:12:51.344Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.345Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(53077..53091) }
[2024-05-22T14:12:51.345Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.346Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(53419..53428) }
[2024-05-22T14:12:51.346Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T14:12:51.346Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(53616..53627) }
[2024-05-22T14:12:51.347Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T14:12:51.347Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(53949..53960) }
[2024-05-22T14:12:51.347Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(54128..54140) }
[2024-05-22T14:12:51.395Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/simple.dart", "lib/src/rust/api/model.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-22T14:12:51.395Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-22T14:12:56.817Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 4.50 seconds.
 stderr=
[2024-05-22T14:12:56.818Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-22T14:12:56.819Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-22T14:12:57.395Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-22T14:12:57.396Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T14:12:57.399Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T14:12:57.401Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T16:44:25.743Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-22T16:44:25.744Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-22T16:44:25.744Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-22T16:44:25.744Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-22T16:44:25.745Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-22T16:44:26.217Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-22T16:44:26.218Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T16:44:26.221Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-22T16:44:26.926Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.0 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 5dcb86f68f (13 days ago) â€¢ 2024-05-09 07:39:20 -0500
Engine â€¢ revision f6344b75dc
Tools â€¢ Dart 3.4.0 â€¢ DevTools 2.34.3
 stderr=
[2024-05-22T16:44:26.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T16:44:26.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:44:26.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-22T16:44:26.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-22T16:44:27.848Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            pub fn from_string(value: String) -> Priority {
                let priority =
                    match value.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                priority
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone() - chrono::Duration::days(1);
            let end_date = created_at;
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                    (false, true) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) AND is_completed = 1) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -597399512;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            25 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            17 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            15 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            6 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            14 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            16 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            28 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            32 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            33 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            24 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            29 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            30 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            26 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            27 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            31 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.56s


[2024-05-22T16:44:27.916Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-22T16:44:27.917Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:44:27.919Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-22T16:44:27.919Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:44:27.921Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-22T16:44:27.922Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:44:27.939Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-22T16:44:28.407Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T16:44:28.407Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-22T16:44:28.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-22T16:44:28.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-22T16:44:28.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T16:44:28.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:44:28.410Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-22T16:44:28.432Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T16:44:28.432Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-22T16:44:28.432Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-22T16:44:28.433Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T16:44:28.433Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(55746..55754) }
[2024-05-22T16:44:28.434Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(58441..58445) }
[2024-05-22T16:44:28.434Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T16:44:28.435Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-22T16:44:28.435Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-22T16:44:28.436Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T16:44:28.437Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(62853..62863) }
[2024-05-22T16:44:28.437Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(63984..64000) }
[2024-05-22T16:44:28.437Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(65079..65090) }
[2024-05-22T16:44:28.439Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T16:44:28.440Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-22T16:44:28.440Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-22T16:44:28.441Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T16:44:28.441Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T16:44:28.444Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T16:44:28.445Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-22T16:44:28.446Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-22T16:44:28.446Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-22T16:44:28.446Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-22T16:44:28.446Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:44:28.449Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-22T16:44:28.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T16:44:28.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(83883..83893) }
[2024-05-22T16:44:28.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(84557..84563) }
[2024-05-22T16:44:28.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(88383..88391) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(88394..88399) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-22T16:44:28.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(88414..88424) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(88425..88426) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(88430..88433) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(88435..88439) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(88441..88447) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(88448..88463) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88464..88465) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:44:28.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(88484..88499) }
[2024-05-22T16:44:28.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(88792..88803) }
[2024-05-22T16:44:28.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(89376..89391) }
[2024-05-22T16:44:28.511Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(89800..89841) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(89855..89868) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(89869..89870) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(89884..89903) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(89905..89918) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(89920..89934) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(89935..89936) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(89938..89944) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(89945..89946) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:44:28.511Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(89954..90066) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(90080..90090) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90091..90092) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(90096..90109) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90110..90111) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:44:28.511Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90168..90213) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(90227..90244) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90245..90246) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(90260..90279) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(90281..90294) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(90296..90314) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90315..90316) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(90326..90332) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(90335..90354) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(90356..90369) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(90371..90390) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90391..90392) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:44:28.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90401..90467) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90472..90552) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90557..90603) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(90617..90631) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90632..90633) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(90637..90654) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90655..90656) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:44:28.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(91922..91932) }
[2024-05-22T16:44:28.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(94790..94817) }
[2024-05-22T16:44:28.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-22T16:44:28.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-22T16:44:28.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T16:44:28.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T16:44:28.520Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T16:44:28.523Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T16:44:28.531Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(34142..34168) }
[2024-05-22T16:44:28.531Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(34395..34419) }
[2024-05-22T16:44:28.531Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(29410..29422) }
[2024-05-22T16:44:28.532Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.534Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.534Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(29499..29514) }
[2024-05-22T16:44:28.534Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(29594..29607) }
[2024-05-22T16:44:28.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.536Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(29660..29671) }
[2024-05-22T16:44:28.536Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.536Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.537Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(32290..32293) }
[2024-05-22T16:44:28.537Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(32723..32729) }
[2024-05-22T16:44:28.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(32813..32822) }
[2024-05-22T16:44:28.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(32917..32926) }
[2024-05-22T16:44:28.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(33015..33027) }
[2024-05-22T16:44:28.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(33159..33171) }
[2024-05-22T16:44:28.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(33263..33277) }
[2024-05-22T16:44:28.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(33424..33438) }
[2024-05-22T16:44:28.569Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.569Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(33569..33582) }
[2024-05-22T16:44:28.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(33724..33736) }
[2024-05-22T16:44:28.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(33858..33870) }
[2024-05-22T16:44:28.572Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.572Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.572Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(34004..34016) }
[2024-05-22T16:44:28.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(38482..38499) }
[2024-05-22T16:44:28.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(38980..39002) }
[2024-05-22T16:44:28.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(39515..39532) }
[2024-05-22T16:44:28.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(39909..39926) }
[2024-05-22T16:44:28.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(40722..40741) }
[2024-05-22T16:44:28.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(41110..41130) }
[2024-05-22T16:44:28.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(52365..52370) }
[2024-05-22T16:44:28.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(52594..52602) }
[2024-05-22T16:44:28.577Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(52763..52782) }
[2024-05-22T16:44:28.577Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.578Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(53293..53310) }
[2024-05-22T16:44:28.578Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.579Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.579Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(53815..53826) }
[2024-05-22T16:44:28.579Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(54107..54121) }
[2024-05-22T16:44:28.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.581Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(54449..54458) }
[2024-05-22T16:44:28.581Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:44:28.582Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(54646..54657) }
[2024-05-22T16:44:28.582Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:44:28.583Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(54979..54990) }
[2024-05-22T16:44:28.583Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(55158..55170) }
[2024-05-22T16:44:28.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-22T16:44:28.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-22T16:44:32.029Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 2.73 seconds.
 stderr=
[2024-05-22T16:44:32.030Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-22T16:44:32.030Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-22T16:44:32.604Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-22T16:44:32.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T16:44:32.611Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T16:44:32.613Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T16:46:25.887Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-22T16:46:25.888Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-22T16:46:25.888Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-22T16:46:25.888Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-22T16:46:25.888Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-22T16:46:26.355Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-22T16:46:26.356Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T16:46:26.358Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-22T16:46:27.018Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.0 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 5dcb86f68f (13 days ago) â€¢ 2024-05-09 07:39:20 -0500
Engine â€¢ revision f6344b75dc
Tools â€¢ Dart 3.4.0 â€¢ DevTools 2.34.3
 stderr=
[2024-05-22T16:46:27.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T16:46:27.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:46:27.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-22T16:46:27.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-22T16:46:27.907Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn from_string(value: String) -> Priority {
                let priority =
                    match value.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                priority
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone() - chrono::Duration::days(1);
            let end_date = created_at;
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                    (false, true) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) AND is_completed = 1) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -1902735657;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_from_string_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_from_string",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_value = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Priority::from_string(api_value))
                                            })())
                        }
                })
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            6 =>
                wire__crate__api__model__Priority_from_string_impl(port, ptr,
                    rust_vec_len, data_len),
            26 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            14 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            18 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            16 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            15 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            17 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            29 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            33 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            34 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            25 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            30 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            31 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            27 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            28 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            32 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.47s


[2024-05-22T16:46:28.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-22T16:46:28.022Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:46:28.025Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-22T16:46:28.025Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:46:28.028Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-22T16:46:28.028Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:46:28.049Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-22T16:46:28.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T16:46:28.585Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-22T16:46:28.585Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-22T16:46:28.585Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-22T16:46:28.586Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T16:46:28.586Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:46:28.588Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-22T16:46:28.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T16:46:28.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-22T16:46:28.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-22T16:46:28.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T16:46:28.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(55796..55804) }
[2024-05-22T16:46:28.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(58516..58520) }
[2024-05-22T16:46:28.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T16:46:28.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-22T16:46:28.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-22T16:46:28.628Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T16:46:28.629Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(62928..62938) }
[2024-05-22T16:46:28.629Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(64059..64075) }
[2024-05-22T16:46:28.629Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(65154..65165) }
[2024-05-22T16:46:28.632Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T16:46:28.632Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-22T16:46:28.633Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-22T16:46:28.634Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T16:46:28.634Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T16:46:28.638Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T16:46:28.639Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-22T16:46:28.640Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-22T16:46:28.640Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-22T16:46:28.640Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-22T16:46:28.641Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:46:28.644Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-22T16:46:28.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T16:46:28.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(83958..83968) }
[2024-05-22T16:46:28.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(84632..84638) }
[2024-05-22T16:46:28.714Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(88458..88466) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(88469..88474) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-22T16:46:28.714Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(88489..88499) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(88500..88501) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(88505..88508) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(88510..88514) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(88516..88522) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(88523..88538) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88539..88540) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:46:28.714Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(88559..88574) }
[2024-05-22T16:46:28.714Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(88867..88878) }
[2024-05-22T16:46:28.715Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(89451..89466) }
[2024-05-22T16:46:28.715Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(89875..89916) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(89930..89943) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(89944..89945) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(89959..89978) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(89980..89993) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(89995..90009) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90010..90011) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(90013..90019) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90020..90021) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:46:28.715Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90029..90141) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(90155..90165) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90166..90167) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(90171..90184) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90185..90186) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:46:28.716Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90243..90288) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(90302..90319) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90320..90321) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(90335..90354) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(90356..90369) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(90371..90389) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90390..90391) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(90401..90407) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(90410..90429) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(90431..90444) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(90446..90465) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90466..90467) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:46:28.716Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90476..90542) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90547..90627) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90632..90678) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(90692..90706) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90707..90708) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(90712..90729) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90730..90731) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:46:28.724Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(91997..92007) }
[2024-05-22T16:46:28.724Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(94866..94893) }
[2024-05-22T16:46:28.724Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-22T16:46:28.724Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-22T16:46:28.725Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T16:46:28.725Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T16:46:28.732Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T16:46:28.735Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T16:46:28.743Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(34192..34218) }
[2024-05-22T16:46:28.744Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(34445..34469) }
[2024-05-22T16:46:28.744Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(29435..29447) }
[2024-05-22T16:46:28.744Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.746Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.746Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(29524..29539) }
[2024-05-22T16:46:28.747Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.747Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.747Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(29619..29632) }
[2024-05-22T16:46:28.748Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.748Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.748Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(29710..29721) }
[2024-05-22T16:46:28.749Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.749Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.749Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(32340..32343) }
[2024-05-22T16:46:28.749Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.750Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.750Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.750Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(32773..32779) }
[2024-05-22T16:46:28.750Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.750Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(32863..32872) }
[2024-05-22T16:46:28.751Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.751Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(32967..32976) }
[2024-05-22T16:46:28.751Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.751Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(33065..33077) }
[2024-05-22T16:46:28.752Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.752Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(33209..33221) }
[2024-05-22T16:46:28.752Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.752Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(33313..33327) }
[2024-05-22T16:46:28.753Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.753Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(33474..33488) }
[2024-05-22T16:46:28.753Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.754Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(33619..33632) }
[2024-05-22T16:46:28.754Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.755Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(33774..33786) }
[2024-05-22T16:46:28.755Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.755Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(33908..33920) }
[2024-05-22T16:46:28.756Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.756Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.756Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(34054..34066) }
[2024-05-22T16:46:28.757Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.757Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.758Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(38532..38549) }
[2024-05-22T16:46:28.758Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(39030..39052) }
[2024-05-22T16:46:28.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(39565..39582) }
[2024-05-22T16:46:28.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(39959..39976) }
[2024-05-22T16:46:28.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(40772..40791) }
[2024-05-22T16:46:28.781Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(41160..41180) }
[2024-05-22T16:46:28.781Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(52415..52420) }
[2024-05-22T16:46:28.781Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(52644..52652) }
[2024-05-22T16:46:28.782Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(52813..52832) }
[2024-05-22T16:46:28.782Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.783Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(53343..53360) }
[2024-05-22T16:46:28.783Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.783Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.783Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(53865..53876) }
[2024-05-22T16:46:28.784Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.784Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(54157..54171) }
[2024-05-22T16:46:28.785Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.785Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(54499..54508) }
[2024-05-22T16:46:28.785Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:46:28.785Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(54696..54707) }
[2024-05-22T16:46:28.786Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:46:28.786Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(55029..55040) }
[2024-05-22T16:46:28.786Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(55208..55220) }
[2024-05-22T16:46:28.838Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-22T16:46:28.839Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-22T16:46:33.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 3.82 seconds.
 stderr=
[2024-05-22T16:46:33.577Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-22T16:46:33.578Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-22T16:46:34.061Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-22T16:46:34.062Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T16:46:34.066Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T16:46:34.067Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T16:57:49.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-22T16:57:49.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-22T16:57:49.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-22T16:57:49.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-22T16:57:49.651Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-22T16:57:50.092Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-22T16:57:50.092Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T16:57:50.094Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-22T16:57:50.932Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.0 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 5dcb86f68f (13 days ago) â€¢ 2024-05-09 07:39:20 -0500
Engine â€¢ revision f6344b75dc
Tools â€¢ Dart 3.4.0 â€¢ DevTools 2.34.3
 stderr=
[2024-05-22T16:57:50.935Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T16:57:50.936Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:57:50.937Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-22T16:57:50.938Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-22T16:57:51.846Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn from_string(value: String) -> Priority {
                let priority =
                    match value.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                priority
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone() - chrono::Duration::days(1);
            let end_date = created_at;
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                    (false, true) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) AND is_completed = 1) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -1902735657;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_from_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_from_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_value = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::from_string(api_value))
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            26 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            6 =>
                wire__crate__api__model__Priority_from_string_impl(ptr,
                    rust_vec_len, data_len),
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            14 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            18 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            16 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            15 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            17 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            29 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            33 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            34 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            25 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            30 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            31 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            27 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            28 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            32 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.49s


[2024-05-22T16:57:51.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-22T16:57:51.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:57:51.980Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-22T16:57:51.981Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:57:51.984Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-22T16:57:51.984Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:57:52.018Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-22T16:57:52.614Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T16:57:52.616Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-22T16:57:52.617Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-22T16:57:52.617Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-22T16:57:52.618Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T16:57:52.618Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:57:52.620Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-22T16:57:52.651Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T16:57:52.652Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-22T16:57:52.652Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-22T16:57:52.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T16:57:52.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(55796..55804) }
[2024-05-22T16:57:52.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(58516..58520) }
[2024-05-22T16:57:52.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T16:57:52.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-22T16:57:52.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-22T16:57:52.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T16:57:52.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(62928..62938) }
[2024-05-22T16:57:52.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(64059..64075) }
[2024-05-22T16:57:52.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(65154..65165) }
[2024-05-22T16:57:52.661Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T16:57:52.662Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-22T16:57:52.662Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-22T16:57:52.663Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T16:57:52.663Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T16:57:52.666Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T16:57:52.668Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-22T16:57:52.668Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-22T16:57:52.668Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-22T16:57:52.669Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-22T16:57:52.669Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T16:57:52.672Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-22T16:57:52.758Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T16:57:52.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(83958..83968) }
[2024-05-22T16:57:52.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(84632..84638) }
[2024-05-22T16:57:52.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(88458..88466) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(88469..88474) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-22T16:57:52.760Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(88489..88499) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(88500..88501) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(88505..88508) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(88510..88514) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(88516..88522) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(88523..88538) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(88539..88540) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:57:52.760Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(88559..88574) }
[2024-05-22T16:57:52.760Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(88867..88878) }
[2024-05-22T16:57:52.760Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(89451..89466) }
[2024-05-22T16:57:52.761Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(89875..89916) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(89930..89943) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(89944..89945) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(89959..89978) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(89980..89993) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(89995..90009) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90010..90011) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(90013..90019) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90020..90021) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:57:52.761Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90029..90141) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(90155..90165) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90166..90167) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(90171..90184) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90185..90186) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:57:52.762Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90243..90288) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(90302..90319) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90320..90321) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(90335..90354) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(90356..90369) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(90371..90389) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90390..90391) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(90401..90407) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(90410..90429) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(90431..90444) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(90446..90465) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90466..90467) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:57:52.762Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90476..90542) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90547..90627) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90632..90678) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(90692..90706) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90707..90708) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(90712..90729) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90730..90731) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T16:57:52.770Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(91997..92007) }
[2024-05-22T16:57:52.770Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(94866..94893) }
[2024-05-22T16:57:52.770Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-22T16:57:52.771Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-22T16:57:52.771Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T16:57:52.772Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T16:57:52.780Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T16:57:52.784Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T16:57:52.795Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(34192..34218) }
[2024-05-22T16:57:52.796Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(34445..34469) }
[2024-05-22T16:57:52.796Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(29435..29447) }
[2024-05-22T16:57:52.796Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.799Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.799Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(29524..29539) }
[2024-05-22T16:57:52.799Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.800Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.800Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(29619..29632) }
[2024-05-22T16:57:52.800Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.801Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.801Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(29710..29721) }
[2024-05-22T16:57:52.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.803Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(32340..32343) }
[2024-05-22T16:57:52.803Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(32773..32779) }
[2024-05-22T16:57:52.805Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.805Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(32863..32872) }
[2024-05-22T16:57:52.806Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.806Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(32967..32976) }
[2024-05-22T16:57:52.807Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.807Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(33065..33077) }
[2024-05-22T16:57:52.808Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.808Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(33209..33221) }
[2024-05-22T16:57:52.809Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.809Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(33313..33327) }
[2024-05-22T16:57:52.810Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.810Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(33474..33488) }
[2024-05-22T16:57:52.810Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.811Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(33619..33632) }
[2024-05-22T16:57:52.811Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.837Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(33774..33786) }
[2024-05-22T16:57:52.838Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.839Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(33908..33920) }
[2024-05-22T16:57:52.839Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.839Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.840Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(34054..34066) }
[2024-05-22T16:57:52.840Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.841Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.841Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(38532..38549) }
[2024-05-22T16:57:52.841Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(39030..39052) }
[2024-05-22T16:57:52.842Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(39565..39582) }
[2024-05-22T16:57:52.842Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(39959..39976) }
[2024-05-22T16:57:52.842Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(40772..40791) }
[2024-05-22T16:57:52.843Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(41160..41180) }
[2024-05-22T16:57:52.843Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(52415..52420) }
[2024-05-22T16:57:52.843Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(52644..52652) }
[2024-05-22T16:57:52.844Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(52813..52832) }
[2024-05-22T16:57:52.844Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.844Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(53343..53360) }
[2024-05-22T16:57:52.845Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.845Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.845Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(53865..53876) }
[2024-05-22T16:57:52.846Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.846Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(54157..54171) }
[2024-05-22T16:57:52.847Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.847Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(54499..54508) }
[2024-05-22T16:57:52.848Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T16:57:52.848Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(54696..54707) }
[2024-05-22T16:57:52.848Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T16:57:52.849Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(55029..55040) }
[2024-05-22T16:57:52.849Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(55208..55220) }
[2024-05-22T16:57:52.900Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-22T16:57:52.901Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-22T16:57:56.524Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 2.99 seconds.
 stderr=
[2024-05-22T16:57:56.525Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-22T16:57:56.526Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-22T16:57:56.816Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-22T16:57:56.817Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T16:57:56.820Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T16:57:56.821Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T17:17:25.430Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-22T17:17:25.431Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-22T17:17:25.431Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-22T17:17:25.431Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-22T17:17:25.431Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-22T17:17:25.862Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-22T17:17:25.862Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T17:17:25.865Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-22T17:17:26.497Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.0 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 5dcb86f68f (13 days ago) â€¢ 2024-05-09 07:39:20 -0500
Engine â€¢ revision f6344b75dc
Tools â€¢ Dart 3.4.0 â€¢ DevTools 2.34.3
 stderr=
[2024-05-22T17:17:26.497Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T17:17:26.497Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T17:17:26.498Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-22T17:17:26.498Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-22T17:17:27.389Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn from_string(value: String) -> Priority {
                match value.as_str() {
                    "Low" => Priority::Low,
                    "Normal" => Priority::Normal,
                    "High" => Priority::High,
                    _ => {
                        ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                    }
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn to_string(&self) -> String {
                match self {
                    Priority::Low => String::from("Low"),
                    Priority::Normal => String::from("Normal"),
                    Priority::High => String::from("High"),
                }
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone() - chrono::Duration::days(1);
            let end_date = created_at;
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                    (false, true) =>
                        conn.prepare(&{
                                        let res =
                                            ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', {0}) AND strftime(\'%%Y-%%m-%%d\', {1}) AND is_completed = 1) ORDER BY created_at",
                                                    start_date_str, end_date_str));
                                        res
                                    })?,
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -1902735657;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_from_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_from_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_value = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::from_string(api_value))
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            26 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            6 =>
                wire__crate__api__model__Priority_from_string_impl(ptr,
                    rust_vec_len, data_len),
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            14 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            18 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            16 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            15 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            17 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            29 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            33 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            34 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            25 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            30 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            31 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            27 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            28 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            32 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.50s


[2024-05-22T17:17:27.518Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-22T17:17:27.519Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T17:17:27.521Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-22T17:17:27.521Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T17:17:27.523Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-22T17:17:27.524Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T17:17:27.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-22T17:17:27.988Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T17:17:27.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-22T17:17:27.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-22T17:17:27.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-22T17:17:27.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-22T17:17:27.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T17:17:27.991Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-22T17:17:28.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T17:17:28.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-22T17:17:28.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-22T17:17:28.022Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T17:17:28.022Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(56250..56258) }
[2024-05-22T17:17:28.023Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(59197..59201) }
[2024-05-22T17:17:28.023Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-22T17:17:28.024Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-22T17:17:28.024Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-22T17:17:28.025Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T17:17:28.026Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(63609..63619) }
[2024-05-22T17:17:28.026Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(64740..64756) }
[2024-05-22T17:17:28.026Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(65835..65846) }
[2024-05-22T17:17:28.028Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-22T17:17:28.029Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-22T17:17:28.029Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-22T17:17:28.030Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T17:17:28.030Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-22T17:17:28.033Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-22T17:17:28.034Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-22T17:17:28.035Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-22T17:17:28.035Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-22T17:17:28.035Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-22T17:17:28.035Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-22T17:17:28.039Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-22T17:17:28.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T17:17:28.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(84639..84649) }
[2024-05-22T17:17:28.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(85313..85319) }
[2024-05-22T17:17:28.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(89139..89147) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(89150..89155) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-22T17:17:28.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(89170..89180) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(89181..89182) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(89186..89189) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(89191..89195) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(89197..89203) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(89204..89219) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(89220..89221) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T17:17:28.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(89240..89255) }
[2024-05-22T17:17:28.126Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(89548..89559) }
[2024-05-22T17:17:28.127Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(90132..90147) }
[2024-05-22T17:17:28.127Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90556..90597) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(90611..90624) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90625..90626) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(90640..90659) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(90661..90674) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(90676..90690) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90691..90692) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(90694..90700) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90701..90702) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T17:17:28.127Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90710..90822) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(90836..90846) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90847..90848) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(90852..90865) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90866..90867) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T17:17:28.127Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90924..90969) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(90983..91000) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(91001..91002) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(91016..91035) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(91037..91050) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(91052..91070) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91071..91072) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(91082..91088) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(91091..91110) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(91112..91125) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(91127..91146) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91147..91148) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T17:17:28.128Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91157..91223) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91228..91308) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91313..91359) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(91373..91387) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(91388..91389) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(91393..91410) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91411..91412) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-22T17:17:28.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(92678..92688) }
[2024-05-22T17:17:28.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(95547..95574) }
[2024-05-22T17:17:28.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-22T17:17:28.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-22T17:17:28.149Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T17:17:28.150Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-22T17:17:28.156Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-22T17:17:28.159Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-22T17:17:28.170Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(34646..34672) }
[2024-05-22T17:17:28.170Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(34899..34923) }
[2024-05-22T17:17:28.171Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(29662..29674) }
[2024-05-22T17:17:28.171Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.173Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.173Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(29751..29766) }
[2024-05-22T17:17:28.173Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.174Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.174Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(29846..29859) }
[2024-05-22T17:17:28.174Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.174Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.174Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(29937..29948) }
[2024-05-22T17:17:28.175Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.175Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.175Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: to_string, span: bytes(30388..30397) }
[2024-05-22T17:17:28.176Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.176Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.176Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(32794..32797) }
[2024-05-22T17:17:28.176Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.177Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.177Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.177Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(33227..33233) }
[2024-05-22T17:17:28.178Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.178Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(33317..33326) }
[2024-05-22T17:17:28.178Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.179Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(33421..33430) }
[2024-05-22T17:17:28.179Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.194Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(33519..33531) }
[2024-05-22T17:17:28.194Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.195Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(33663..33675) }
[2024-05-22T17:17:28.195Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.196Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(33767..33781) }
[2024-05-22T17:17:28.196Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.196Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(33928..33942) }
[2024-05-22T17:17:28.197Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.197Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(34073..34086) }
[2024-05-22T17:17:28.198Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.198Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(34228..34240) }
[2024-05-22T17:17:28.198Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.199Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(34362..34374) }
[2024-05-22T17:17:28.199Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.200Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.200Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(34508..34520) }
[2024-05-22T17:17:28.200Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.201Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.201Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(38986..39003) }
[2024-05-22T17:17:28.201Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(39484..39506) }
[2024-05-22T17:17:28.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(40019..40036) }
[2024-05-22T17:17:28.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(40413..40430) }
[2024-05-22T17:17:28.203Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(41226..41245) }
[2024-05-22T17:17:28.203Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(41614..41634) }
[2024-05-22T17:17:28.203Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(52869..52874) }
[2024-05-22T17:17:28.204Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(53098..53106) }
[2024-05-22T17:17:28.204Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(53267..53286) }
[2024-05-22T17:17:28.205Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.205Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(53797..53814) }
[2024-05-22T17:17:28.206Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.206Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.206Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(54319..54330) }
[2024-05-22T17:17:28.207Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.208Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(54611..54625) }
[2024-05-22T17:17:28.208Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.209Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(54953..54962) }
[2024-05-22T17:17:28.209Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-22T17:17:28.210Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(55150..55161) }
[2024-05-22T17:17:28.210Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-22T17:17:28.211Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(55483..55494) }
[2024-05-22T17:17:28.211Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(55662..55674) }
[2024-05-22T17:17:28.283Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/simple.dart", "lib/src/rust/api/model.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-22T17:17:28.283Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-22T17:17:34.068Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 4.57 seconds.
 stderr=
[2024-05-22T17:17:34.069Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-22T17:17:34.069Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-22T17:17:34.670Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-22T17:17:34.671Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-22T17:17:34.675Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-22T17:17:34.676Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
