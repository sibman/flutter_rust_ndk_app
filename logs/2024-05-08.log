[2024-05-08T22:36:36.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T22:36:36.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T22:36:36.928Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T22:36:36.928Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T22:36:36.928Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T22:36:37.468Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T22:36:37.469Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T22:36:37.472Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T22:36:38.403Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T22:36:38.405Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T22:36:38.405Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:36:38.405Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T22:36:38.405Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T22:36:39.966Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        #[frb(non_opaque)]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[frb(non_opaque)]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model as m;
        use crate::api::model::{Priority, Task};
        use crate::api::model_persistence as mp;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            m::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            m::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            mp::create_task_in_db(&task_title, &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            mp::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            mp::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            mp::update_task_in_db(task_id, &title, &subtitle, priority,
                is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            mp::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error: cannot find attribute `frb` in this scope
 --> src/api/model.rs:6:3
  |
6 | #[frb(non_opaque)]
  |   ^^^
  |
help: consider importing this attribute macro
  |
1 + use flutter_rust_bridge::frb;
  |
error: cannot find attribute `frb` in this scope
  --> src/api/model.rs:15:3
   |
15 | #[frb(non_opaque)]
   |   ^^^
   |
help: consider importing this attribute macro
   |
1  + use flutter_rust_bridge::frb;
   |
error[E0412]: cannot find type `Task` in this scope
  --> src/frb_generated.rs:66:73
   |
66 |                 flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>,
   |                                                                         ^^^^ not found in this scope
   |
note: struct `crate::api::model::Task` exists but is inaccessible
  --> src/api/model.rs:16:1
   |
16 | pub struct Task {
   | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:111:73
    |
111 |                 flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>,
    |                                                                         ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:158:33
    |
158 |             let api_priority = <Priority>::sse_decode(&mut deserializer);
    |                                 ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:194:73
    |
194 |                 flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>,
    |                                                                         ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:196:33
    |
196 |             let api_priority = <Priority>::sse_decode(&mut deserializer);
    |                                 ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:243:34
    |
243 |             let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
    |                                  ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:279:34
    |
279 |             let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
    |                                  ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:280:33
    |
280 |             let api_priority = <Priority>::sse_decode(&mut deserializer);
    |                                 ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:317:33
    |
317 |             let api_priority = <Priority>::sse_decode(&mut deserializer);
    |                                 ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:451:33
    |
451 |             let api_priority = <Priority>::sse_decode(&mut deserializer);
    |                                 ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:492:38
    |
492 |             let api_task_priority = <Priority>::sse_decode(&mut deserializer);
    |                                      ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:592:33
    |
592 |             let api_priority = <Priority>::sse_decode(&mut deserializer);
    |                                 ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:744:33
    |
744 |             let api_priority = <Priority>::sse_decode(&mut deserializer);
    |                                 ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:765:61
    |
765 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>
    |                                                             ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:771:61
    |
771 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>
    |                                                             ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:776:20
    |
776 | impl SseDecode for Priority {
    |                    ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:780:69
    |
780 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>,
    |                                                                     ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:796:20
    |
796 | impl SseDecode for Task {
    |                    ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:800:69
    |
800 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>,
    |                                                                     ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:807:79
    |
807 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
    |                                                                               ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:826:90
    |
826 | impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
    |                                                                                          ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:857:24
    |
857 | impl SseDecode for Vec<Task> {
    |                        ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:863:24
    |
863 |             ans_.push(<Task>::sse_decode(deserializer));
    |                        ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:881:27
    |
881 | impl SseDecode for Option<Task> {
    |                           ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:885:26
    |
885 |             return Some(<Task>::sse_decode(deserializer));
    |                          ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:966:51
    |
966 | impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
    |                                                   ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:972:81
    |
972 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Priority> {}
    |                                                                                 ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:974:51
    |
974 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority {
    |                                                   ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:974:66
    |
974 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority {
    |                                                                  ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
   --> src/frb_generated.rs:975:43
    |
975 |     fn into_into_dart(self) -> FrbWrapper<Priority> {
    |                                           ^^^^^^^^ not found in this scope
    |
note: enum `crate::api::model::Priority` exists but is inaccessible
   --> src/api/model.rs:7:1
    |
7   | pub enum Priority {
    | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `Task` in this scope
   --> src/frb_generated.rs:996:51
    |
996 | impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
    |                                                   ^^^^ not found in this scope
    |
note: struct `crate::api::model::Task` exists but is inaccessible
   --> src/api/model.rs:16:1
    |
16  | pub struct Task {
    | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1002:81
     |
1002 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Task> {}
     |                                                                                 ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1004:51
     |
1004 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
     |                                                   ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1004:62
     |
1004 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
     |                                                              ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1005:43
     |
1005 |     fn into_into_dart(self) -> FrbWrapper<Task> {
     |                                           ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
    --> src/frb_generated.rs:1010:20
     |
1010 | impl SseEncode for Priority {
     |                    ^^^^^^^^ not found in this scope
     |
note: enum `crate::api::model::Priority` exists but is inaccessible
    --> src/api/model.rs:7:1
     |
7    | pub enum Priority {
     | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
    --> src/frb_generated.rs:1013:80
     |
1013 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::...
     |                                                                              ^^^^^^^^ not found in this scope
     |
note: enum `crate::api::model::Priority` exists but is inaccessible
    --> src/api/model.rs:7:1
     |
7    | pub enum Priority {
     | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1024:20
     |
1024 | impl SseEncode for Task {
     |                    ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1027:80
     |
1027 |         <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(
     |                                                                                ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
    --> src/frb_generated.rs:1035:79
     |
1035 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
     |                                                                               ^^^^^^^^ not found in this scope
     |
note: enum `crate::api::model::Priority` exists but is inaccessible
    --> src/api/model.rs:7:1
     |
7    | pub enum Priority {
     | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1056:90
     |
1056 | impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
     |                                                                                          ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1086:24
     |
1086 | impl SseEncode for Vec<Task> {
     |                        ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1091:14
     |
1091 |             <Task>::sse_encode(item, serializer);
     |              ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1106:27
     |
1106 | impl SseEncode for Option<Task> {
     |                           ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
    --> src/frb_generated.rs:1111:14
     |
1111 |             <Task>::sse_encode(value, serializer);
     |              ^^^^ not found in this scope
     |
note: struct `crate::api::model::Task` exists but is inaccessible
    --> src/api/model.rs:16:1
     |
16   | pub struct Task {
     | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
  --> src/frb_generated.io.rs:21:70
   |
21 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^ not found in this scope
   |
note: enum `crate::api::model::Priority` exists but is inaccessible
  --> src/api/model.rs:7:1
   |
7  | pub enum Priority {
   | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Priority` in this scope
  --> src/frb_generated.io.rs:28:70
   |
28 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^ not found in this scope
   |
note: enum `crate::api::model::Priority` exists but is inaccessible
  --> src/api/model.rs:7:1
   |
7  | pub enum Priority {
   | ^^^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `Task` in this scope
  --> src/frb_generated.io.rs:49:70
   |
49 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(
   |                                                                      ^^^^ not found in this scope
   |
note: struct `crate::api::model::Task` exists but is inaccessible
  --> src/api/model.rs:16:1
   |
16 | pub struct Task {
   | ^^^^^^^^^^^^^^^ not accessible
error[E0412]: cannot find type `Task` in this scope
  --> src/frb_generated.io.rs:58:70
   |
58 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(
   |                                                                      ^^^^ not found in this scope
   |
note: struct `crate::api::model::Task` exists but is inaccessible
  --> src/api/model.rs:16:1
   |
16 | pub struct Task {
   | ^^^^^^^^^^^^^^^ not accessible
error[E0603]: module `model` is private
  --> src/frb_generated.rs:22:17
   |
22 | use crate::api::model::*;
   |                 ^^^^^ private module
   |
note: the module `model` is defined here
  --> src/api/mod.rs:5:1
   |
5  | mod model;
   | ^^^^^^^^^^
error[E0603]: module `model_persistence` is private
  --> src/frb_generated.rs:23:17
   |
23 | use crate::api::model_persistence::*;
   |                 ^^^^^^^^^^^^^^^^^ private module
   |
note: the module `model_persistence` is defined here
  --> src/api/mod.rs:6:1
   |
6  | mod model_persistence;
   | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model` is private
 --> src/frb_generated.io.rs:7:17
  |
7 | use crate::api::model::*;
  |                 ^^^^^ private module
  |
note: the module `model` is defined here
 --> src/api/mod.rs:5:1
  |
5 | mod model;
  | ^^^^^^^^^^
error[E0603]: module `model_persistence` is private
 --> src/frb_generated.io.rs:8:17
  |
8 | use crate::api::model_persistence::*;
  |                 ^^^^^^^^^^^^^^^^^ private module
  |
note: the module `model_persistence` is defined here
 --> src/api/mod.rs:6:1
  |
6 | mod model_persistence;
  | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model` is private
  --> src/frb_generated.rs:84:49
   |
84 |                 Result::<_, ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
   |                                                 ^^^^^  ---- struct `Task` is not publicly re-exported
   |                                                 |
   |                                                 private module
   |
note: the module `model` is defined here
  --> src/api/mod.rs:5:1
   |
5  | mod model;
   | ^^^^^^^^^^
error[E0603]: module `model` is private
   --> src/frb_generated.rs:129:49
    |
129 |                 Result::<_, ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
    |                                                 ^^^^^  ---- struct `Task` is not publicly re-exported
    |                                                 |
    |                                                 private module
    |
note: the module `model` is defined here
   --> src/api/mod.rs:5:1
    |
5   | mod model;
    | ^^^^^^^^^^
error[E0603]: module `model` is private
   --> src/frb_generated.rs:162:53
    |
162 |                     Result::<_, ()>::Ok(crate::api::model::Task::new(
    |                                                     ^^^^^  ---- struct `Task` is not publicly re-exported
    |                                                     |
    |                                                     private module
    |
note: the module `model` is defined here
   --> src/api/mod.rs:5:1
    |
5   | mod model;
    | ^^^^^^^^^^
error[E0603]: module `model` is private
   --> src/frb_generated.rs:213:49
    |
213 |                 Result::<_, ()>::Ok(crate::api::model::Task::set_priority(
    |                                                 ^^^^^  ---- struct `Task` is not publicly re-exported
    |                                                 |
    |                                                 private module
    |
note: the module `model` is defined here
   --> src/api/mod.rs:5:1
    |
5   | mod model;
    | ^^^^^^^^^^
error[E0603]: module `model` is private
   --> src/frb_generated.rs:248:53
    |
248 |                     Result::<_, ()>::Ok(crate::api::model::filter_tasks_by_completion(
    |                                                     ^^^^^  -------------------------- function `filter_tasks_by_completion` is not publicly re-exported
    |                                                     |
    |                                                     private module
    |
note: the module `model` is defined here
   --> src/api/mod.rs:5:1
    |
5   | mod model;
    | ^^^^^^^^^^
error[E0603]: module `model` is private
   --> src/frb_generated.rs:284:53
    |
284 |                     Result::<_, ()>::Ok(crate::api::model::filter_tasks_by_priority(
    |                                                     ^^^^^  ------------------------ function `filter_tasks_by_priority` is not publicly re-exported
    |                                                     |
    |                                                     private module
    |
note: the module `model` is defined here
   --> src/api/mod.rs:5:1
    |
5   | mod model;
    | ^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:321:33
    |
321 |                     crate::api::model_persistence::create_task_in_db(
    |                                 ^^^^^^^^^^^^^^^^^  ----------------- function `create_task_in_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:357:33
    |
357 |                     crate::api::model_persistence::delete_task_from_db(&api_task_id)
    |                                 ^^^^^^^^^^^^^^^^^  ------------------- function `delete_task_from_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:388:33
    |
388 |                     crate::api::model_persistence::read_all_tasks_from_db()
    |                                 ^^^^^^^^^^^^^^^^^  ---------------------- function `read_all_tasks_from_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:420:33
    |
420 |                     crate::api::model_persistence::read_task_from_db(&api_task_id)
    |                                 ^^^^^^^^^^^^^^^^^  ----------------- function `read_task_from_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:456:33
    |
456 |                     crate::api::model_persistence::update_task_in_db(
    |                                 ^^^^^^^^^^^^^^^^^  ----------------- function `update_task_in_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
Some errors have detailed explanations: E0412, E0428, E0603.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T22:36:40.040Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T22:36:40.040Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:36:40.043Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T22:36:40.074Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:36:40.090Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T22:36:40.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T22:36:40.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T22:36:40.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T22:36:40.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T22:36:40.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T22:36:40.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:36:40.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T22:36:40.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T22:36:40.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T22:36:40.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T22:36:40.563Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T22:36:40.563Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22364..22372) }
[2024-05-08T22:36:40.563Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(23839..23843) }
[2024-05-08T22:36:40.564Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T22:36:40.564Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T22:36:40.564Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T22:36:40.565Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T22:36:40.565Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27091..27101) }
[2024-05-08T22:36:40.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28222..28238) }
[2024-05-08T22:36:40.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29315..29326) }
[2024-05-08T22:36:40.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T22:36:40.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T22:36:40.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T22:36:40.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T22:36:40.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T22:36:40.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T22:36:40.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T22:36:40.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T22:36:40.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T22:36:40.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T22:36:40.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:36:40.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T22:36:40.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T22:36:40.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(44963..44973) }
[2024-05-08T22:36:40.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(45637..45643) }
[2024-05-08T22:36:40.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(49463..49471) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(49474..49479) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T22:36:40.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(49494..49504) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(49505..49506) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(49510..49513) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(49515..49519) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(49521..49527) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(49528..49543) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(49544..49545) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:36:40.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(49564..49579) }
[2024-05-08T22:36:40.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(49872..49883) }
[2024-05-08T22:36:40.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(50456..50471) }
[2024-05-08T22:36:40.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(50880..50921) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(50935..50948) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50949..50950) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(50964..50983) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(50985..50998) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51000..51014) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51015..51016) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51018..51024) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51025..51026) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:36:40.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51034..51146) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51160..51170) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51171..51172) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51176..51189) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51190..51191) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:36:40.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51248..51293) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51307..51324) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51325..51326) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51340..51359) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51361..51374) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(51376..51394) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51395..51396) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51406..51412) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51415..51434) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51436..51449) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(51451..51470) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51471..51472) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:36:40.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51481..51547) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51552..51632) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51637..51683) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(51697..51711) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51712..51713) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51717..51734) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51735..51736) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:36:40.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(53392..53402) }
[2024-05-08T22:36:40.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56260..56287) }
[2024-05-08T22:36:40.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T22:36:40.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T22:36:40.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T22:36:40.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T22:36:40.632Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T22:36:40.634Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T22:36:40.639Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3960..3986) }
[2024-05-08T22:36:40.640Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4190..4214) }
[2024-05-08T22:36:40.640Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3198..3201) }
[2024-05-08T22:36:40.641Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3631..3645) }
[2024-05-08T22:36:40.641Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3731..3746) }
[2024-05-08T22:36:40.642Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3833..3845) }
[2024-05-08T22:36:40.642Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8274..8291) }
[2024-05-08T22:36:40.642Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8746..8768) }
[2024-05-08T22:36:40.643Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9081..9098) }
[2024-05-08T22:36:40.643Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9448..9465) }
[2024-05-08T22:36:40.644Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10235..10254) }
[2024-05-08T22:36:40.644Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19819..19824) }
[2024-05-08T22:36:40.644Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20048..20056) }
[2024-05-08T22:36:40.644Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20127..20153) }
[2024-05-08T22:36:40.645Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20602..20626) }
[2024-05-08T22:36:40.645Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21069..21080) }
[2024-05-08T22:36:40.646Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21295..21309) }
[2024-05-08T22:36:40.646Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21416..21425) }
[2024-05-08T22:36:40.646Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21563..21574) }
[2024-05-08T22:36:40.647Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21846..21857) }
[2024-05-08T22:48:47.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T22:48:47.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T22:48:47.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T22:48:47.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T22:48:47.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T22:48:48.048Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T22:48:48.049Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T22:48:48.052Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T22:48:48.955Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T22:48:48.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T22:48:48.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:48:48.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T22:48:48.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T22:48:50.285Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        #[frb(non_opaque)]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[frb(non_opaque)]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model as m;
        use crate::api::model::filter_tasks_by_completion;
        use crate::api::model::filter_tasks_by_priority;
        use crate::api::model::{Priority, Task};
        use crate::api::model_persistence as mp;
        use crate::api::model_persistence::create_task_in_db;
        use crate::api::model_persistence::delete_task_from_db;
        use crate::api::model_persistence::read_all_tasks_from_db;
        use crate::api::model_persistence::read_task_from_db;
        use crate::api::model_persistence::update_task_in_db;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            m::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            m::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            mp::create_task_in_db(&task_title, &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            mp::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            mp::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            mp::update_task_in_db(task_id, &title, &subtitle, priority,
                is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            mp::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0255]: the name `filter_tasks_by_completion` is defined multiple times
  --> src/api/simple.rs:27:1
   |
2  | use crate::api::model::filter_tasks_by_completion;
   |     --------------------------------------------- previous import of the value `filter_tasks_by_completion` here
...
27 | pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_completion` redefined here
   |
   = note: `filter_tasks_by_completion` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
2  | use crate::api::model::filter_tasks_by_completion as other_filter_tasks_by_completion;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error[E0255]: the name `filter_tasks_by_priority` is defined multiple times
  --> src/api/simple.rs:37:1
   |
3  | use crate::api::model::filter_tasks_by_priority;
   |     ------------------------------------------- previous import of the value `filter_tasks_by_priority` here
...
37 | pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_priority` redefined here
   |
   = note: `filter_tasks_by_priority` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
3  | use crate::api::model::filter_tasks_by_priority as other_filter_tasks_by_priority;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error: cannot find attribute `frb` in this scope
 --> src/api/model.rs:6:3
  |
6 | #[frb(non_opaque)]
  |   ^^^
  |
help: consider importing this attribute macro
  |
1 + use flutter_rust_bridge::frb;
  |
error: cannot find attribute `frb` in this scope
  --> src/api/model.rs:15:3
   |
15 | #[frb(non_opaque)]
   |   ^^^
   |
help: consider importing this attribute macro
   |
1  + use flutter_rust_bridge::frb;
   |
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0603]: module `model_persistence` is private
  --> src/frb_generated.rs:23:17
   |
23 | use crate::api::model_persistence::*;
   |                 ^^^^^^^^^^^^^^^^^ private module
   |
note: the module `model_persistence` is defined here
  --> src/api/mod.rs:6:1
   |
6  | mod model_persistence;
   | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
 --> src/frb_generated.io.rs:8:17
  |
8 | use crate::api::model_persistence::*;
  |                 ^^^^^^^^^^^^^^^^^ private module
  |
note: the module `model_persistence` is defined here
 --> src/api/mod.rs:6:1
  |
6 | mod model_persistence;
  | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:321:33
    |
321 |                     crate::api::model_persistence::create_task_in_db(
    |                                 ^^^^^^^^^^^^^^^^^  ----------------- function `create_task_in_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:357:33
    |
357 |                     crate::api::model_persistence::delete_task_from_db(&api_task_id)
    |                                 ^^^^^^^^^^^^^^^^^  ------------------- function `delete_task_from_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:388:33
    |
388 |                     crate::api::model_persistence::read_all_tasks_from_db()
    |                                 ^^^^^^^^^^^^^^^^^  ---------------------- function `read_all_tasks_from_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:420:33
    |
420 |                     crate::api::model_persistence::read_task_from_db(&api_task_id)
    |                                 ^^^^^^^^^^^^^^^^^  ----------------- function `read_task_from_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:456:33
    |
456 |                     crate::api::model_persistence::update_task_in_db(
    |                                 ^^^^^^^^^^^^^^^^^  ----------------- function `update_task_in_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model::filter_tasks_by_completion`
 --> src/api/simple.rs:2:5
  |
2 | use crate::api::model::filter_tasks_by_completion;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
warning: unused import: `crate::api::model::filter_tasks_by_priority`
 --> src/api/simple.rs:3:5
  |
3 | use crate::api::model::filter_tasks_by_priority;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::create_task_in_db`
 --> src/api/simple.rs:6:5
  |
6 | use crate::api::model_persistence::create_task_in_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::delete_task_from_db`
 --> src/api/simple.rs:7:5
  |
7 | use crate::api::model_persistence::delete_task_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_all_tasks_from_db`
 --> src/api/simple.rs:8:5
  |
8 | use crate::api::model_persistence::read_all_tasks_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_task_from_db`
 --> src/api/simple.rs:9:5
  |
9 | use crate::api::model_persistence::read_task_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::update_task_in_db`
  --> src/api/simple.rs:10:5
   |
10 | use crate::api::model_persistence::update_task_in_db;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Some errors have detailed explanations: E0255, E0412, E0428, E0603.
For more information about an error, try `rustc --explain E0255`.


[2024-05-08T22:48:50.342Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T22:48:50.343Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:48:50.345Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T22:48:50.346Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:48:50.365Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T22:48:50.881Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T22:48:50.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T22:48:50.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T22:48:50.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T22:48:50.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T22:48:50.883Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:48:50.884Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T22:48:50.904Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T22:48:50.904Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T22:48:50.904Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T22:48:50.905Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T22:48:50.905Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22801..22809) }
[2024-05-08T22:48:50.905Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24276..24280) }
[2024-05-08T22:48:50.906Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T22:48:50.906Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T22:48:50.907Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T22:48:50.908Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T22:48:50.908Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27528..27538) }
[2024-05-08T22:48:50.908Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28659..28675) }
[2024-05-08T22:48:50.909Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29752..29763) }
[2024-05-08T22:48:50.910Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T22:48:50.911Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T22:48:50.911Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T22:48:50.911Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T22:48:50.912Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T22:48:50.914Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T22:48:50.915Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T22:48:50.915Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T22:48:50.916Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T22:48:50.916Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T22:48:50.916Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:48:50.919Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T22:48:50.969Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T22:48:50.969Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45833..45843) }
[2024-05-08T22:48:50.969Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46507..46513) }
[2024-05-08T22:48:50.970Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(50333..50341) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50344..50349) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T22:48:50.970Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(50364..50374) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50375..50376) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(50380..50383) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(50385..50389) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(50391..50397) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(50398..50413) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(50414..50415) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:48:50.970Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(50434..50449) }
[2024-05-08T22:48:50.970Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50742..50753) }
[2024-05-08T22:48:50.971Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(51326..51341) }
[2024-05-08T22:48:50.971Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51750..51791) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51805..51818) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51819..51820) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51834..51853) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51855..51868) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51870..51884) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51885..51886) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51888..51894) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51895..51896) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:48:50.971Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51904..52016) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(52030..52040) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52041..52042) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(52046..52059) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52060..52061) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:48:50.972Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52118..52163) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52177..52194) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52195..52196) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52210..52229) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52231..52244) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(52246..52264) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52265..52266) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52276..52282) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52285..52304) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52306..52319) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(52321..52340) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52341..52342) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:48:50.972Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52351..52417) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52422..52502) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52507..52553) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52567..52581) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52582..52583) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52587..52604) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52605..52606) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:48:50.972Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(54262..54272) }
[2024-05-08T22:48:50.973Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(57130..57157) }
[2024-05-08T22:48:50.973Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T22:48:50.973Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T22:48:50.973Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T22:48:50.974Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T22:48:50.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T22:48:50.981Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T22:48:50.987Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3960..3986) }
[2024-05-08T22:48:50.988Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4190..4214) }
[2024-05-08T22:48:50.988Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3198..3201) }
[2024-05-08T22:48:50.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3631..3645) }
[2024-05-08T22:48:50.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3731..3746) }
[2024-05-08T22:48:50.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3833..3845) }
[2024-05-08T22:48:50.990Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8274..8291) }
[2024-05-08T22:48:50.990Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8746..8768) }
[2024-05-08T22:48:50.991Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9081..9098) }
[2024-05-08T22:48:50.991Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9448..9465) }
[2024-05-08T22:48:50.992Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10235..10254) }
[2024-05-08T22:48:50.992Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(20252..20257) }
[2024-05-08T22:48:50.993Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20481..20489) }
[2024-05-08T22:48:50.993Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20560..20586) }
[2024-05-08T22:48:50.993Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(21035..21059) }
[2024-05-08T22:48:50.994Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21502..21513) }
[2024-05-08T22:48:50.994Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21728..21742) }
[2024-05-08T22:48:50.995Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21849..21858) }
[2024-05-08T22:48:50.995Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21996..22007) }
[2024-05-08T22:48:50.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22279..22290) }
[2024-05-08T22:51:21.000Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T22:51:21.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T22:51:21.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T22:51:21.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T22:51:21.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T22:51:21.484Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T22:51:21.485Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T22:51:21.487Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T22:51:22.266Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T22:51:22.268Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T22:51:22.269Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:51:22.269Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T22:51:22.270Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T22:51:23.665Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        #[frb(non_opaque)]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[frb(non_opaque)]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model as m;
        use crate::api::m::filter_tasks_by_completion;
        use crate::api::m::filter_tasks_by_priority;
        use crate::api::m::{Priority, Task};
        use crate::api::model_persistence as mp;
        use crate::api::mp::create_task_in_db;
        use crate::api::mp::delete_task_from_db;
        use crate::api::mp::read_all_tasks_from_db;
        use crate::api::mp::read_task_from_db;
        use crate::api::mp::update_task_in_db;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            m::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            m::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            mp::create_task_in_db(&task_title, &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            mp::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            mp::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            mp::update_task_in_db(task_id, &title, &subtitle, priority,
                is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            mp::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0432]: unresolved import `crate::api::m`
 --> src/api/simple.rs:2:17
  |
2 | use crate::api::m::filter_tasks_by_completion;
  |                 ^ could not find `m` in `api`
error[E0432]: unresolved import `crate::api::m`
 --> src/api/simple.rs:3:17
  |
3 | use crate::api::m::filter_tasks_by_priority;
  |                 ^ could not find `m` in `api`
error[E0432]: unresolved import `crate::api::m`
 --> src/api/simple.rs:4:17
  |
4 | use crate::api::m::{Priority, Task};
  |                 ^ could not find `m` in `api`
error[E0432]: unresolved import `crate::api::mp`
 --> src/api/simple.rs:6:17
  |
6 | use crate::api::mp::create_task_in_db;
  |                 ^^ could not find `mp` in `api`
error[E0432]: unresolved import `crate::api::mp`
 --> src/api/simple.rs:7:17
  |
7 | use crate::api::mp::delete_task_from_db;
  |                 ^^ could not find `mp` in `api`
error[E0432]: unresolved import `crate::api::mp`
 --> src/api/simple.rs:8:17
  |
8 | use crate::api::mp::read_all_tasks_from_db;
  |                 ^^ could not find `mp` in `api`
error[E0432]: unresolved import `crate::api::mp`
 --> src/api/simple.rs:9:17
  |
9 | use crate::api::mp::read_task_from_db;
  |                 ^^ could not find `mp` in `api`
error[E0432]: unresolved import `crate::api::mp`
  --> src/api/simple.rs:10:17
   |
10 | use crate::api::mp::update_task_in_db;
   |                 ^^ could not find `mp` in `api`
error: cannot find attribute `frb` in this scope
 --> src/api/model.rs:6:3
  |
6 | #[frb(non_opaque)]
  |   ^^^
  |
help: consider importing this attribute macro
  |
1 + use flutter_rust_bridge::frb;
  |
error: cannot find attribute `frb` in this scope
  --> src/api/model.rs:15:3
   |
15 | #[frb(non_opaque)]
   |   ^^^
   |
help: consider importing this attribute macro
   |
1  + use flutter_rust_bridge::frb;
   |
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0603]: module `model_persistence` is private
  --> src/frb_generated.rs:23:17
   |
23 | use crate::api::model_persistence::*;
   |                 ^^^^^^^^^^^^^^^^^ private module
   |
note: the module `model_persistence` is defined here
  --> src/api/mod.rs:6:1
   |
6  | mod model_persistence;
   | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
 --> src/frb_generated.io.rs:8:17
  |
8 | use crate::api::model_persistence::*;
  |                 ^^^^^^^^^^^^^^^^^ private module
  |
note: the module `model_persistence` is defined here
 --> src/api/mod.rs:6:1
  |
6 | mod model_persistence;
  | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:321:33
    |
321 |                     crate::api::model_persistence::create_task_in_db(
    |                                 ^^^^^^^^^^^^^^^^^  ----------------- function `create_task_in_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:357:33
    |
357 |                     crate::api::model_persistence::delete_task_from_db(&api_task_id)
    |                                 ^^^^^^^^^^^^^^^^^  ------------------- function `delete_task_from_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:388:33
    |
388 |                     crate::api::model_persistence::read_all_tasks_from_db()
    |                                 ^^^^^^^^^^^^^^^^^  ---------------------- function `read_all_tasks_from_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:420:33
    |
420 |                     crate::api::model_persistence::read_task_from_db(&api_task_id)
    |                                 ^^^^^^^^^^^^^^^^^  ----------------- function `read_task_from_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
error[E0603]: module `model_persistence` is private
   --> src/frb_generated.rs:456:33
    |
456 |                     crate::api::model_persistence::update_task_in_db(
    |                                 ^^^^^^^^^^^^^^^^^  ----------------- function `update_task_in_db` is not publicly re-exported
    |                                 |
    |                                 private module
    |
note: the module `model_persistence` is defined here
   --> src/api/mod.rs:6:1
    |
6   | mod model_persistence;
    | ^^^^^^^^^^^^^^^^^^^^^^
Some errors have detailed explanations: E0412, E0428, E0432, E0603.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T22:51:23.798Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T22:51:23.798Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:51:23.801Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T22:51:23.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:51:23.819Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T22:51:24.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T22:51:24.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T22:51:24.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T22:51:24.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T22:51:24.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T22:51:24.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:51:24.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T22:51:24.561Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T22:51:24.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T22:51:24.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T22:51:24.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T22:51:24.563Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22714..22722) }
[2024-05-08T22:51:24.563Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24189..24193) }
[2024-05-08T22:51:24.564Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T22:51:24.569Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T22:51:24.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T22:51:24.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T22:51:24.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27441..27451) }
[2024-05-08T22:51:24.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28572..28588) }
[2024-05-08T22:51:24.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29665..29676) }
[2024-05-08T22:51:24.578Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T22:51:24.579Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T22:51:24.579Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T22:51:24.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T22:51:24.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T22:51:24.583Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T22:51:24.585Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T22:51:24.585Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T22:51:24.586Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T22:51:24.586Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T22:51:24.586Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:51:24.589Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T22:51:24.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T22:51:24.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45659..45669) }
[2024-05-08T22:51:24.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46333..46339) }
[2024-05-08T22:51:24.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(50159..50167) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50170..50175) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T22:51:24.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(50190..50200) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50201..50202) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(50206..50209) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(50211..50215) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(50217..50223) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(50224..50239) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(50240..50241) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:51:24.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(50260..50275) }
[2024-05-08T22:51:24.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50568..50579) }
[2024-05-08T22:51:24.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(51152..51167) }
[2024-05-08T22:51:24.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51576..51617) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51631..51644) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51645..51646) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51660..51679) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51681..51694) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51696..51710) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51711..51712) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51714..51720) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51721..51722) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:51:24.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51730..51842) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51856..51866) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51867..51868) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51872..51885) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51886..51887) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:51:24.657Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51944..51989) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52003..52020) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52021..52022) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52036..52055) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52057..52070) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(52072..52090) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52091..52092) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52102..52108) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52111..52130) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52132..52145) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(52147..52166) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52167..52168) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:51:24.657Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52177..52243) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52248..52328) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52333..52379) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52393..52407) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52408..52409) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52413..52430) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52431..52432) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:51:24.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(54088..54098) }
[2024-05-08T22:51:24.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56956..56983) }
[2024-05-08T22:51:24.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T22:51:24.659Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T22:51:24.659Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T22:51:24.660Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T22:51:24.665Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T22:51:24.668Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T22:51:24.672Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3960..3986) }
[2024-05-08T22:51:24.673Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4190..4214) }
[2024-05-08T22:51:24.674Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3198..3201) }
[2024-05-08T22:51:24.675Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3631..3645) }
[2024-05-08T22:51:24.676Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3731..3746) }
[2024-05-08T22:51:24.677Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3833..3845) }
[2024-05-08T22:51:24.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8274..8291) }
[2024-05-08T22:51:24.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8746..8768) }
[2024-05-08T22:51:24.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9081..9098) }
[2024-05-08T22:51:24.680Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9448..9465) }
[2024-05-08T22:51:24.680Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10235..10254) }
[2024-05-08T22:51:24.681Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(20165..20170) }
[2024-05-08T22:51:24.682Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20394..20402) }
[2024-05-08T22:51:24.683Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20473..20499) }
[2024-05-08T22:51:24.683Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20948..20972) }
[2024-05-08T22:51:24.683Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21415..21426) }
[2024-05-08T22:51:24.684Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21641..21655) }
[2024-05-08T22:51:24.684Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21762..21771) }
[2024-05-08T22:51:24.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21909..21920) }
[2024-05-08T22:51:24.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22192..22203) }
[2024-05-08T22:58:05.969Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T22:58:05.970Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T22:58:05.970Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T22:58:05.970Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T22:58:05.970Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T22:58:06.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T22:58:06.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T22:58:06.517Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T22:58:07.520Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T22:58:07.522Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T22:58:07.522Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:58:07.522Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T22:58:07.523Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T22:58:08.831Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        #[frb(non_opaque)]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[frb(non_opaque)]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::filter_tasks_by_completion;
        use crate::api::model::filter_tasks_by_priority;
        use crate::api::model::{Priority, Task};
        use crate::api::model_persistence::create_task_in_db;
        use crate::api::model_persistence::delete_task_from_db;
        use crate::api::model_persistence::read_all_tasks_from_db;
        use crate::api::model_persistence::read_task_from_db;
        use crate::api::model_persistence::update_task_in_db;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            model_persistence::create_task_in_db(&task_title, &task_subtitle,
                task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            model_persistence::update_task_in_db(task_id, &title, &subtitle,
                priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0255]: the name `filter_tasks_by_completion` is defined multiple times
  --> src/api/simple.rs:27:1
   |
2  | use crate::api::model::filter_tasks_by_completion;
   |     --------------------------------------------- previous import of the value `filter_tasks_by_completion` here
...
27 | pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_completion` redefined here
   |
   = note: `filter_tasks_by_completion` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
2  | use crate::api::model::filter_tasks_by_completion as other_filter_tasks_by_completion;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error[E0255]: the name `filter_tasks_by_priority` is defined multiple times
  --> src/api/simple.rs:37:1
   |
3  | use crate::api::model::filter_tasks_by_priority;
   |     ------------------------------------------- previous import of the value `filter_tasks_by_priority` here
...
37 | pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_priority` redefined here
   |
   = note: `filter_tasks_by_priority` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
3  | use crate::api::model::filter_tasks_by_priority as other_filter_tasks_by_priority;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error: cannot find attribute `frb` in this scope
 --> src/api/model.rs:6:3
  |
6 | #[frb(non_opaque)]
  |   ^^^
  |
help: consider importing this attribute macro
  |
1 + use flutter_rust_bridge::frb;
  |
error: cannot find attribute `frb` in this scope
  --> src/api/model.rs:15:3
   |
15 | #[frb(non_opaque)]
   |   ^^^
   |
help: consider importing this attribute macro
   |
1  + use flutter_rust_bridge::frb;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model`
  --> src/api/simple.rs:32:5
   |
32 |     model::filter_tasks_by_completion(tasks, is_completed)
   |     ^^^^^ use of undeclared crate or module `model`
   |
help: consider importing this module
   |
2  + use crate::api::model;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model`
  --> src/api/simple.rs:42:5
   |
42 |     model::filter_tasks_by_priority(tasks, priority)
   |     ^^^^^ use of undeclared crate or module `model`
   |
help: consider importing this module
   |
2  + use crate::api::model;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:51:5
   |
51 |     model_persistence::create_task_in_db(&task_title, &task_subtitle, task_priority)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:56:5
   |
56 |     model_persistence::read_all_tasks_from_db()
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:61:5
   |
61 |     model_persistence::read_task_from_db(task_id)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:72:5
   |
72 |     model_persistence::update_task_in_db(task_id, &title, &subtitle, priority, is_completed)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:77:5
   |
77 |     model_persistence::delete_task_from_db(task_id)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
warning: unused import: `crate::api::model::filter_tasks_by_completion`
 --> src/api/simple.rs:2:5
  |
2 | use crate::api::model::filter_tasks_by_completion;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
warning: unused import: `crate::api::model::filter_tasks_by_priority`
 --> src/api/simple.rs:3:5
  |
3 | use crate::api::model::filter_tasks_by_priority;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::create_task_in_db`
 --> src/api/simple.rs:6:5
  |
6 | use crate::api::model_persistence::create_task_in_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::delete_task_from_db`
 --> src/api/simple.rs:7:5
  |
7 | use crate::api::model_persistence::delete_task_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_all_tasks_from_db`
 --> src/api/simple.rs:8:5
  |
8 | use crate::api::model_persistence::read_all_tasks_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_task_from_db`
 --> src/api/simple.rs:9:5
  |
9 | use crate::api::model_persistence::read_task_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::update_task_in_db`
  --> src/api/simple.rs:10:5
   |
10 | use crate::api::model_persistence::update_task_in_db;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Some errors have detailed explanations: E0255, E0412, E0428, E0433.
For more information about an error, try `rustc --explain E0255`.


[2024-05-08T22:58:08.861Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T22:58:08.861Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:58:08.883Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T22:58:08.884Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:58:08.907Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T22:58:09.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T22:58:09.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T22:58:09.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T22:58:09.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T22:58:09.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T22:58:09.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:58:09.519Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T22:58:09.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T22:58:09.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T22:58:09.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T22:58:09.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T22:58:09.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22815..22823) }
[2024-05-08T22:58:09.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24290..24294) }
[2024-05-08T22:58:09.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T22:58:09.547Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T22:58:09.547Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T22:58:09.548Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T22:58:09.548Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27546..27556) }
[2024-05-08T22:58:09.549Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28677..28693) }
[2024-05-08T22:58:09.549Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29770..29781) }
[2024-05-08T22:58:09.551Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T22:58:09.551Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T22:58:09.552Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T22:58:09.552Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T22:58:09.553Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T22:58:09.555Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T22:58:09.556Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T22:58:09.556Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T22:58:09.557Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T22:58:09.557Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T22:58:09.557Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T22:58:09.560Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T22:58:09.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T22:58:09.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45865..45875) }
[2024-05-08T22:58:09.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46539..46545) }
[2024-05-08T22:58:09.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(50365..50373) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50376..50381) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T22:58:09.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(50396..50406) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50407..50408) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(50412..50415) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(50417..50421) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(50423..50429) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(50430..50445) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(50446..50447) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:58:09.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(50466..50481) }
[2024-05-08T22:58:09.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50774..50785) }
[2024-05-08T22:58:09.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(51358..51373) }
[2024-05-08T22:58:09.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51782..51823) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51837..51850) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51851..51852) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51866..51885) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51887..51900) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51902..51916) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51917..51918) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51920..51926) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51927..51928) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:58:09.628Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51936..52048) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(52062..52072) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52073..52074) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(52078..52091) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52092..52093) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:58:09.630Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52150..52195) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52209..52226) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52227..52228) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52242..52261) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52263..52276) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(52278..52296) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52297..52298) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52308..52314) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52317..52336) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52338..52351) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(52353..52372) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52373..52374) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:58:09.630Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52383..52449) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52454..52534) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52539..52585) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52599..52613) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52614..52615) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52619..52636) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52637..52638) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T22:58:09.632Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(54294..54304) }
[2024-05-08T22:58:09.632Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(57162..57189) }
[2024-05-08T22:58:09.633Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T22:58:09.633Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T22:58:09.633Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T22:58:09.634Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T22:58:09.639Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T22:58:09.641Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T22:58:09.648Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3960..3986) }
[2024-05-08T22:58:09.648Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4190..4214) }
[2024-05-08T22:58:09.649Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3198..3201) }
[2024-05-08T22:58:09.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3631..3645) }
[2024-05-08T22:58:09.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3731..3746) }
[2024-05-08T22:58:09.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3833..3845) }
[2024-05-08T22:58:09.651Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8274..8291) }
[2024-05-08T22:58:09.651Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8746..8768) }
[2024-05-08T22:58:09.652Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9081..9098) }
[2024-05-08T22:58:09.652Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9448..9465) }
[2024-05-08T22:58:09.652Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10235..10254) }
[2024-05-08T22:58:09.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(20167..20172) }
[2024-05-08T22:58:09.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20396..20404) }
[2024-05-08T22:58:09.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20475..20501) }
[2024-05-08T22:58:09.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20954..20978) }
[2024-05-08T22:58:09.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21425..21436) }
[2024-05-08T22:58:09.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21682..21696) }
[2024-05-08T22:58:09.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21818..21827) }
[2024-05-08T22:58:09.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21980..21991) }
[2024-05-08T22:58:09.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22278..22289) }
[2024-05-08T23:01:33.097Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:01:33.097Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:01:33.097Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:01:33.098Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:01:33.098Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:01:33.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:01:33.810Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:01:33.815Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:01:35.229Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:01:35.230Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:01:35.231Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:01:35.231Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:01:35.231Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:01:36.815Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        #[frb(non_opaque)]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[frb(non_opaque)]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::filter_tasks_by_completion;
        use crate::api::model::filter_tasks_by_priority;
        use crate::api::model::{Priority, Task};
        use crate::api::model_persistence::create_task_in_db;
        use crate::api::model_persistence::delete_task_from_db;
        use crate::api::model_persistence::read_all_tasks_from_db;
        use crate::api::model_persistence::read_task_from_db;
        use api::model_persistence::update_task_in_db;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            model_persistence::create_task_in_db(&task_title, &task_subtitle,
                task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            model_persistence::update_task_in_db(task_id, &title, &subtitle,
                priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0255]: the name `filter_tasks_by_completion` is defined multiple times
  --> src/api/simple.rs:27:1
   |
2  | use crate::api::model::filter_tasks_by_completion;
   |     --------------------------------------------- previous import of the value `filter_tasks_by_completion` here
...
27 | pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_completion` redefined here
   |
   = note: `filter_tasks_by_completion` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
2  | use crate::api::model::filter_tasks_by_completion as other_filter_tasks_by_completion;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error[E0255]: the name `filter_tasks_by_priority` is defined multiple times
  --> src/api/simple.rs:37:1
   |
3  | use crate::api::model::filter_tasks_by_priority;
   |     ------------------------------------------- previous import of the value `filter_tasks_by_priority` here
...
37 | pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_priority` redefined here
   |
   = note: `filter_tasks_by_priority` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
3  | use crate::api::model::filter_tasks_by_priority as other_filter_tasks_by_priority;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error[E0433]: failed to resolve: use of undeclared crate or module `api`
  --> src/api/simple.rs:10:5
   |
10 | use api::model_persistence::update_task_in_db;
   |     ^^^ use of undeclared crate or module `api`
error: cannot find attribute `frb` in this scope
 --> src/api/model.rs:6:3
  |
6 | #[frb(non_opaque)]
  |   ^^^
  |
help: consider importing this attribute macro
  |
1 + use flutter_rust_bridge::frb;
  |
error: cannot find attribute `frb` in this scope
  --> src/api/model.rs:15:3
   |
15 | #[frb(non_opaque)]
   |   ^^^
   |
help: consider importing this attribute macro
   |
1  + use flutter_rust_bridge::frb;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model`
  --> src/api/simple.rs:32:5
   |
32 |     model::filter_tasks_by_completion(tasks, is_completed)
   |     ^^^^^ use of undeclared crate or module `model`
   |
help: consider importing this module
   |
2  + use crate::api::model;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model`
  --> src/api/simple.rs:42:5
   |
42 |     model::filter_tasks_by_priority(tasks, priority)
   |     ^^^^^ use of undeclared crate or module `model`
   |
help: consider importing this module
   |
2  + use crate::api::model;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:51:5
   |
51 |     model_persistence::create_task_in_db(&task_title, &task_subtitle, task_priority)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:56:5
   |
56 |     model_persistence::read_all_tasks_from_db()
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:61:5
   |
61 |     model_persistence::read_task_from_db(task_id)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:72:5
   |
72 |     model_persistence::update_task_in_db(task_id, &title, &subtitle, priority, is_completed)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:77:5
   |
77 |     model_persistence::delete_task_from_db(task_id)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
warning: unused import: `crate::api::model::filter_tasks_by_completion`
 --> src/api/simple.rs:2:5
  |
2 | use crate::api::model::filter_tasks_by_completion;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
warning: unused import: `crate::api::model::filter_tasks_by_priority`
 --> src/api/simple.rs:3:5
  |
3 | use crate::api::model::filter_tasks_by_priority;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::create_task_in_db`
 --> src/api/simple.rs:6:5
  |
6 | use crate::api::model_persistence::create_task_in_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::delete_task_from_db`
 --> src/api/simple.rs:7:5
  |
7 | use crate::api::model_persistence::delete_task_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_all_tasks_from_db`
 --> src/api/simple.rs:8:5
  |
8 | use crate::api::model_persistence::read_all_tasks_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_task_from_db`
 --> src/api/simple.rs:9:5
  |
9 | use crate::api::model_persistence::read_task_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Some errors have detailed explanations: E0255, E0412, E0428, E0433.
For more information about an error, try `rustc --explain E0255`.


[2024-05-08T23:01:36.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:01:36.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:01:36.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:01:36.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:01:36.898Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:01:37.536Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:01:37.537Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:01:37.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:01:37.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:01:37.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:01:37.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:01:37.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:01:37.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:01:37.564Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:01:37.565Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:01:37.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:01:37.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22808..22816) }
[2024-05-08T23:01:37.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24283..24287) }
[2024-05-08T23:01:37.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:01:37.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:01:37.569Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:01:37.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:01:37.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27539..27549) }
[2024-05-08T23:01:37.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28670..28686) }
[2024-05-08T23:01:37.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29763..29774) }
[2024-05-08T23:01:37.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:01:37.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:01:37.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:01:37.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:01:37.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:01:37.579Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:01:37.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:01:37.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:01:37.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:01:37.581Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:01:37.581Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:01:37.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:01:37.649Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:01:37.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45851..45861) }
[2024-05-08T23:01:37.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46525..46531) }
[2024-05-08T23:01:37.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(50351..50359) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50362..50367) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:01:37.650Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(50382..50392) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50393..50394) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(50398..50401) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(50403..50407) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(50409..50415) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(50416..50431) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(50432..50433) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:01:37.651Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(50452..50467) }
[2024-05-08T23:01:37.651Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50760..50771) }
[2024-05-08T23:01:37.651Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(51344..51359) }
[2024-05-08T23:01:37.651Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51768..51809) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51823..51836) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51837..51838) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51852..51871) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51873..51886) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51888..51902) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51903..51904) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51906..51912) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51913..51914) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:01:37.652Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51922..52034) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(52048..52058) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52059..52060) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(52064..52077) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52078..52079) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:01:37.652Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52136..52181) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52195..52212) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52213..52214) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52228..52247) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52249..52262) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(52264..52282) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52283..52284) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52294..52300) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52303..52322) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52324..52337) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(52339..52358) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52359..52360) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:01:37.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52369..52435) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52440..52520) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52525..52571) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52585..52599) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52600..52601) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52605..52622) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52623..52624) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:01:37.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(54280..54290) }
[2024-05-08T23:01:37.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(57148..57175) }
[2024-05-08T23:01:37.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:01:37.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:01:37.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:01:37.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:01:37.662Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:01:37.665Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:01:37.670Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3960..3986) }
[2024-05-08T23:01:37.671Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4190..4214) }
[2024-05-08T23:01:37.671Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3198..3201) }
[2024-05-08T23:01:37.672Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3631..3645) }
[2024-05-08T23:01:37.672Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3731..3746) }
[2024-05-08T23:01:37.673Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3833..3845) }
[2024-05-08T23:01:37.673Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8274..8291) }
[2024-05-08T23:01:37.674Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8746..8768) }
[2024-05-08T23:01:37.675Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9081..9098) }
[2024-05-08T23:01:37.676Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9448..9465) }
[2024-05-08T23:01:37.676Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10235..10254) }
[2024-05-08T23:01:37.677Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(20160..20165) }
[2024-05-08T23:01:37.677Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20389..20397) }
[2024-05-08T23:01:37.677Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20468..20494) }
[2024-05-08T23:01:37.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20947..20971) }
[2024-05-08T23:01:37.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21418..21429) }
[2024-05-08T23:01:37.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21675..21689) }
[2024-05-08T23:01:37.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21811..21820) }
[2024-05-08T23:01:37.680Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21973..21984) }
[2024-05-08T23:01:37.680Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22271..22282) }
[2024-05-08T23:03:18.250Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:03:18.250Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:03:18.251Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:03:18.251Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:03:18.251Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:03:18.773Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:03:18.774Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:03:18.776Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:03:19.564Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:03:19.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:03:19.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:03:19.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:03:19.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:03:21.023Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        #[frb(non_opaque)]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[frb(non_opaque)]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use api::model::filter_tasks_by_completion;
        use api::model::filter_tasks_by_priority;
        use api::model::{Priority, Task};
        use api::model_persistence::create_task_in_db;
        use api::model_persistence::delete_task_from_db;
        use api::model_persistence::read_all_tasks_from_db;
        use api::model_persistence::read_task_from_db;
        use api::model_persistence::update_task_in_db;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            model_persistence::create_task_in_db(&task_title, &task_subtitle,
                task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            model_persistence::update_task_in_db(task_id, &title, &subtitle,
                priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:2:5
  |
2 | use api::model::filter_tasks_by_completion;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:3:5
  |
3 | use api::model::filter_tasks_by_priority;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:4:5
  |
4 | use api::model::{Priority, Task};
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:6:5
  |
6 | use api::model_persistence::create_task_in_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:7:5
  |
7 | use api::model_persistence::delete_task_from_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:8:5
  |
8 | use api::model_persistence::read_all_tasks_from_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:9:5
  |
9 | use api::model_persistence::read_task_from_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
  --> src/api/simple.rs:10:5
   |
10 | use api::model_persistence::update_task_in_db;
   |     ^^^ use of undeclared crate or module `api`
error: cannot find attribute `frb` in this scope
 --> src/api/model.rs:6:3
  |
6 | #[frb(non_opaque)]
  |   ^^^
  |
help: consider importing this attribute macro
  |
1 + use flutter_rust_bridge::frb;
  |
error: cannot find attribute `frb` in this scope
  --> src/api/model.rs:15:3
   |
15 | #[frb(non_opaque)]
   |   ^^^
   |
help: consider importing this attribute macro
   |
1  + use flutter_rust_bridge::frb;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model`
  --> src/api/simple.rs:32:5
   |
32 |     model::filter_tasks_by_completion(tasks, is_completed)
   |     ^^^^^ use of undeclared crate or module `model`
   |
help: consider importing this module
   |
2  + use crate::api::model;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model`
  --> src/api/simple.rs:42:5
   |
42 |     model::filter_tasks_by_priority(tasks, priority)
   |     ^^^^^ use of undeclared crate or module `model`
   |
help: consider importing this module
   |
2  + use crate::api::model;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:51:5
   |
51 |     model_persistence::create_task_in_db(&task_title, &task_subtitle, task_priority)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:56:5
   |
56 |     model_persistence::read_all_tasks_from_db()
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:61:5
   |
61 |     model_persistence::read_task_from_db(task_id)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:72:5
   |
72 |     model_persistence::update_task_in_db(task_id, &title, &subtitle, priority, is_completed)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model_persistence`
  --> src/api/simple.rs:77:5
   |
77 |     model_persistence::delete_task_from_db(task_id)
   |     ^^^^^^^^^^^^^^^^^ use of undeclared crate or module `model_persistence`
   |
help: consider importing this module
   |
2  + use crate::api::model_persistence;
   |
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
Some errors have detailed explanations: E0412, E0428, E0433.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T23:03:21.058Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:03:21.058Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:03:21.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:03:21.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:03:21.098Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:03:21.583Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:03:21.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:03:21.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:03:21.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:03:21.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:03:21.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:03:21.586Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:03:21.601Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:03:21.601Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:03:21.601Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:03:21.602Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:03:21.602Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22759..22767) }
[2024-05-08T23:03:21.602Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24234..24238) }
[2024-05-08T23:03:21.603Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:03:21.603Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:03:21.603Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:03:21.604Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:03:21.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27490..27500) }
[2024-05-08T23:03:21.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28621..28637) }
[2024-05-08T23:03:21.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29714..29725) }
[2024-05-08T23:03:21.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:03:21.607Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:03:21.607Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:03:21.608Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:03:21.608Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:03:21.611Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:03:21.612Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:03:21.612Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:03:21.612Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:03:21.613Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:03:21.613Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:03:21.615Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:03:21.676Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:03:21.677Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45753..45763) }
[2024-05-08T23:03:21.677Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46427..46433) }
[2024-05-08T23:03:21.677Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(50253..50261) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50264..50269) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:03:21.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(50284..50294) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50295..50296) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(50300..50303) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(50305..50309) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(50311..50317) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(50318..50333) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(50334..50335) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:03:21.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(50354..50369) }
[2024-05-08T23:03:21.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50662..50673) }
[2024-05-08T23:03:21.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(51246..51261) }
[2024-05-08T23:03:21.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51670..51711) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51725..51738) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51739..51740) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51754..51773) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51775..51788) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51790..51804) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51805..51806) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51808..51814) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51815..51816) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:03:21.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51824..51936) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51950..51960) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51961..51962) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51966..51979) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51980..51981) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:03:21.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52038..52083) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52097..52114) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52115..52116) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52130..52149) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52151..52164) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(52166..52184) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52185..52186) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52196..52202) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52205..52224) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52226..52239) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(52241..52260) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52261..52262) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:03:21.680Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52271..52337) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52342..52422) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52427..52473) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52487..52501) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52502..52503) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52507..52524) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52525..52526) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:03:21.680Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(54182..54192) }
[2024-05-08T23:03:21.681Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(57050..57077) }
[2024-05-08T23:03:21.681Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:03:21.681Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:03:21.682Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:03:21.682Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:03:21.687Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:03:21.690Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:03:21.695Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3960..3986) }
[2024-05-08T23:03:21.696Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4190..4214) }
[2024-05-08T23:03:21.697Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3198..3201) }
[2024-05-08T23:03:21.697Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3631..3645) }
[2024-05-08T23:03:21.698Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3731..3746) }
[2024-05-08T23:03:21.698Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3833..3845) }
[2024-05-08T23:03:21.699Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8274..8291) }
[2024-05-08T23:03:21.699Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8746..8768) }
[2024-05-08T23:03:21.700Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9081..9098) }
[2024-05-08T23:03:21.701Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9448..9465) }
[2024-05-08T23:03:21.702Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10235..10254) }
[2024-05-08T23:03:21.702Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(20111..20116) }
[2024-05-08T23:03:21.702Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20340..20348) }
[2024-05-08T23:03:21.703Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20419..20445) }
[2024-05-08T23:03:21.703Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20898..20922) }
[2024-05-08T23:03:21.704Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21369..21380) }
[2024-05-08T23:03:21.704Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21626..21640) }
[2024-05-08T23:03:21.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21762..21771) }
[2024-05-08T23:03:21.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21924..21935) }
[2024-05-08T23:03:21.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22222..22233) }
[2024-05-08T23:06:15.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:06:15.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:06:15.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:06:15.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:06:15.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:06:16.417Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:06:16.418Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:06:16.420Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:06:17.502Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:06:17.504Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:06:17.505Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:06:17.505Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:06:17.505Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:06:18.784Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        #[frb(non_opaque)]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[frb(non_opaque)]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use api::model::filter_tasks_by_completion;
        use api::model::filter_tasks_by_priority;
        use api::model::{Priority, Task};
        use crate::api::model_persistence;
        use api::model_persistence::create_task_in_db;
        use api::model_persistence::delete_task_from_db;
        use api::model_persistence::read_all_tasks_from_db;
        use api::model_persistence::read_task_from_db;
        use api::model_persistence::update_task_in_db;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            model_persistence::create_task_in_db(&task_title, &task_subtitle,
                task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            model_persistence::update_task_in_db(task_id, &title, &subtitle,
                priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:2:5
  |
2 | use api::model::filter_tasks_by_completion;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:3:5
  |
3 | use api::model::filter_tasks_by_priority;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:4:5
  |
4 | use api::model::{Priority, Task};
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:6:5
  |
6 | use api::model_persistence::create_task_in_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:7:5
  |
7 | use api::model_persistence::delete_task_from_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:8:5
  |
8 | use api::model_persistence::read_all_tasks_from_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:9:5
  |
9 | use api::model_persistence::read_task_from_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
  --> src/api/simple.rs:10:5
   |
10 | use api::model_persistence::update_task_in_db;
   |     ^^^ use of undeclared crate or module `api`
error: cannot find attribute `frb` in this scope
 --> src/api/model.rs:6:3
  |
6 | #[frb(non_opaque)]
  |   ^^^
  |
help: consider importing this attribute macro
  |
1 + use flutter_rust_bridge::frb;
  |
error: cannot find attribute `frb` in this scope
  --> src/api/model.rs:15:3
   |
15 | #[frb(non_opaque)]
   |   ^^^
   |
help: consider importing this attribute macro
   |
1  + use flutter_rust_bridge::frb;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model`
  --> src/api/simple.rs:32:5
   |
32 |     model::filter_tasks_by_completion(tasks, is_completed)
   |     ^^^^^ use of undeclared crate or module `model`
   |
help: consider importing this module
   |
2  + use crate::api::model;
   |
error[E0433]: failed to resolve: use of undeclared crate or module `model`
  --> src/api/simple.rs:42:5
   |
42 |     model::filter_tasks_by_priority(tasks, priority)
   |     ^^^^^ use of undeclared crate or module `model`
   |
help: consider importing this module
   |
2  + use crate::api::model;
   |
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
Some errors have detailed explanations: E0412, E0428, E0433.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T23:06:18.827Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:06:18.827Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:06:18.830Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:06:18.830Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:06:18.848Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:06:19.353Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:06:19.353Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:06:19.353Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:06:19.354Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:06:19.354Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:06:19.354Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:06:19.356Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:06:19.400Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:06:19.401Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:06:19.401Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:06:19.401Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:06:19.402Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22802..22810) }
[2024-05-08T23:06:19.402Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24277..24281) }
[2024-05-08T23:06:19.403Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:06:19.403Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:06:19.404Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:06:19.405Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:06:19.405Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27533..27543) }
[2024-05-08T23:06:19.407Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28664..28680) }
[2024-05-08T23:06:19.407Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29757..29768) }
[2024-05-08T23:06:19.409Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:06:19.410Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:06:19.410Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:06:19.410Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:06:19.411Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:06:19.413Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:06:19.414Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:06:19.414Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:06:19.415Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:06:19.415Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:06:19.415Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:06:19.418Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:06:19.475Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:06:19.476Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45839..45849) }
[2024-05-08T23:06:19.476Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46513..46519) }
[2024-05-08T23:06:19.476Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(50339..50347) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50350..50355) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:06:19.477Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(50370..50380) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50381..50382) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(50386..50389) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(50391..50395) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(50397..50403) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(50404..50419) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(50420..50421) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:06:19.477Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(50440..50455) }
[2024-05-08T23:06:19.477Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50748..50759) }
[2024-05-08T23:06:19.478Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(51332..51347) }
[2024-05-08T23:06:19.478Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51756..51797) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51811..51824) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51825..51826) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51840..51859) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51861..51874) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51876..51890) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51891..51892) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51894..51900) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51901..51902) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:06:19.478Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51910..52022) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(52036..52046) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52047..52048) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(52052..52065) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52066..52067) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:06:19.479Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52124..52169) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52183..52200) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52201..52202) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52216..52235) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52237..52250) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(52252..52270) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52271..52272) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52282..52288) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52291..52310) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52312..52325) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(52327..52346) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52347..52348) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:06:19.479Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52357..52423) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52428..52508) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52513..52559) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52573..52587) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52588..52589) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52593..52610) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52611..52612) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:06:19.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(54268..54278) }
[2024-05-08T23:06:19.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(57136..57163) }
[2024-05-08T23:06:19.487Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:06:19.487Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:06:19.488Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:06:19.488Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:06:19.496Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:06:19.499Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:06:19.505Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3960..3986) }
[2024-05-08T23:06:19.507Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4190..4214) }
[2024-05-08T23:06:19.507Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3198..3201) }
[2024-05-08T23:06:19.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3631..3645) }
[2024-05-08T23:06:19.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3731..3746) }
[2024-05-08T23:06:19.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3833..3845) }
[2024-05-08T23:06:19.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8274..8291) }
[2024-05-08T23:06:19.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8746..8768) }
[2024-05-08T23:06:19.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9081..9098) }
[2024-05-08T23:06:19.511Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9448..9465) }
[2024-05-08T23:06:19.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10235..10254) }
[2024-05-08T23:06:19.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(20154..20159) }
[2024-05-08T23:06:19.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20383..20391) }
[2024-05-08T23:06:19.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20462..20488) }
[2024-05-08T23:06:19.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20941..20965) }
[2024-05-08T23:06:19.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21412..21423) }
[2024-05-08T23:06:19.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21669..21683) }
[2024-05-08T23:06:19.515Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21805..21814) }
[2024-05-08T23:06:19.515Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21967..21978) }
[2024-05-08T23:06:19.516Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22265..22276) }
[2024-05-08T23:07:24.621Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:07:24.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:07:24.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:07:24.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:07:24.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:07:25.394Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:07:25.399Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:07:25.406Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:07:26.711Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:07:26.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:07:26.714Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:07:26.716Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:07:26.717Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:07:29.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        #[frb(non_opaque)]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[frb(non_opaque)]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model;
        use api::model::filter_tasks_by_completion;
        use api::model::filter_tasks_by_priority;
        use api::model::{Priority, Task};
        use crate::api::model_persistence;
        use api::model_persistence::create_task_in_db;
        use api::model_persistence::delete_task_from_db;
        use api::model_persistence::read_all_tasks_from_db;
        use api::model_persistence::read_task_from_db;
        use api::model_persistence::update_task_in_db;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            model_persistence::create_task_in_db(&task_title, &task_subtitle,
                task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            model_persistence::update_task_in_db(task_id, &title, &subtitle,
                priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:2:5
  |
2 | use api::model::filter_tasks_by_completion;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:3:5
  |
3 | use api::model::filter_tasks_by_priority;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:4:5
  |
4 | use api::model::{Priority, Task};
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:6:5
  |
6 | use api::model_persistence::create_task_in_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:7:5
  |
7 | use api::model_persistence::delete_task_from_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:8:5
  |
8 | use api::model_persistence::read_all_tasks_from_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:9:5
  |
9 | use api::model_persistence::read_task_from_db;
  |     ^^^ use of undeclared crate or module `api`
error[E0433]: failed to resolve: use of undeclared crate or module `api`
  --> src/api/simple.rs:10:5
   |
10 | use api::model_persistence::update_task_in_db;
   |     ^^^ use of undeclared crate or module `api`
error: cannot find attribute `frb` in this scope
 --> src/api/model.rs:6:3
  |
6 | #[frb(non_opaque)]
  |   ^^^
  |
help: consider importing this attribute macro
  |
1 + use flutter_rust_bridge::frb;
  |
error: cannot find attribute `frb` in this scope
  --> src/api/model.rs:15:3
   |
15 | #[frb(non_opaque)]
   |   ^^^
   |
help: consider importing this attribute macro
   |
1  + use flutter_rust_bridge::frb;
   |
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
Some errors have detailed explanations: E0412, E0428, E0433.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T23:07:29.843Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:07:29.845Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:07:29.849Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:07:29.850Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:07:29.875Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:07:30.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:07:30.577Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:07:30.578Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:07:30.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:07:30.581Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:07:30.582Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:07:30.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:07:30.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:07:30.607Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:07:30.607Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:07:30.608Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:07:30.608Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22833..22841) }
[2024-05-08T23:07:30.609Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24308..24312) }
[2024-05-08T23:07:30.609Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:07:30.610Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:07:30.610Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:07:30.612Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:07:30.612Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27564..27574) }
[2024-05-08T23:07:30.612Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28695..28711) }
[2024-05-08T23:07:30.613Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29788..29799) }
[2024-05-08T23:07:30.615Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:07:30.616Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:07:30.616Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:07:30.617Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:07:30.617Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:07:30.620Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:07:30.621Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:07:30.621Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:07:30.622Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:07:30.622Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:07:30.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:07:30.636Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:07:30.725Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:07:30.726Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45901..45911) }
[2024-05-08T23:07:30.726Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46575..46581) }
[2024-05-08T23:07:30.726Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(50401..50409) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50412..50417) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:07:30.727Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(50432..50442) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50443..50444) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(50448..50451) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(50453..50457) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(50459..50465) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(50466..50481) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(50482..50483) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:07:30.727Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(50502..50517) }
[2024-05-08T23:07:30.727Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50810..50821) }
[2024-05-08T23:07:30.728Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(51394..51409) }
[2024-05-08T23:07:30.728Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51818..51859) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51873..51886) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51887..51888) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51902..51921) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51923..51936) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51938..51952) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51953..51954) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51956..51962) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51963..51964) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:07:30.728Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51972..52084) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(52098..52108) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52109..52110) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(52114..52127) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52128..52129) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:07:30.729Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52186..52231) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52245..52262) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52263..52264) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52278..52297) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52299..52312) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(52314..52332) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52333..52334) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52344..52350) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52353..52372) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52374..52387) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(52389..52408) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52409..52410) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:07:30.729Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52419..52485) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52490..52570) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52575..52621) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52635..52649) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52650..52651) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52655..52672) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52673..52674) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:07:30.757Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(54330..54340) }
[2024-05-08T23:07:30.757Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(57198..57225) }
[2024-05-08T23:07:30.758Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:07:30.758Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:07:30.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:07:30.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:07:30.784Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:07:30.794Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:07:30.800Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3960..3986) }
[2024-05-08T23:07:30.800Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4190..4214) }
[2024-05-08T23:07:30.801Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3198..3201) }
[2024-05-08T23:07:30.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3631..3645) }
[2024-05-08T23:07:30.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3731..3746) }
[2024-05-08T23:07:30.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3833..3845) }
[2024-05-08T23:07:30.803Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8274..8291) }
[2024-05-08T23:07:30.803Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8746..8768) }
[2024-05-08T23:07:30.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9081..9098) }
[2024-05-08T23:07:30.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9448..9465) }
[2024-05-08T23:07:30.805Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10235..10254) }
[2024-05-08T23:07:30.805Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(20185..20190) }
[2024-05-08T23:07:30.806Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20414..20422) }
[2024-05-08T23:07:30.806Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20493..20519) }
[2024-05-08T23:07:30.807Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20972..20996) }
[2024-05-08T23:07:30.808Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21443..21454) }
[2024-05-08T23:07:30.808Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21700..21714) }
[2024-05-08T23:07:30.809Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21836..21845) }
[2024-05-08T23:07:30.809Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21998..22009) }
[2024-05-08T23:07:30.810Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22296..22307) }
[2024-05-08T23:12:25.350Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:12:25.350Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:12:25.351Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:12:25.352Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:12:25.366Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:12:26.392Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:12:26.394Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:12:26.399Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:12:27.621Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:12:27.622Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:12:27.622Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:12:27.622Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:12:27.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:12:29.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model;
        use crate::api::model::filter_tasks_by_completion;
        use crate::api::model::filter_tasks_by_priority;
        use crate::api::model::{Priority, Task};
        use crate::api::model_persistence;
        use crate::api::model_persistence::create_task_in_db;
        use crate::api::model_persistence::delete_task_from_db;
        use crate::api::model_persistence::read_all_tasks_from_db;
        use crate::api::model_persistence::read_task_from_db;
        use crate::api::model_persistence::update_task_in_db;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            model_persistence::create_task_in_db(&task_title, &task_subtitle,
                task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            model_persistence::update_task_in_db(task_id, &title, &subtitle,
                priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0255]: the name `filter_tasks_by_completion` is defined multiple times
  --> src/api/simple.rs:27:1
   |
2  | use crate::api::model::filter_tasks_by_completion;
   |     --------------------------------------------- previous import of the value `filter_tasks_by_completion` here
...
27 | pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_completion` redefined here
   |
   = note: `filter_tasks_by_completion` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
2  | use crate::api::model::filter_tasks_by_completion as other_filter_tasks_by_completion;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error[E0255]: the name `filter_tasks_by_priority` is defined multiple times
  --> src/api/simple.rs:37:1
   |
3  | use crate::api::model::filter_tasks_by_priority;
   |     ------------------------------------------- previous import of the value `filter_tasks_by_priority` here
...
37 | pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_priority` redefined here
   |
   = note: `filter_tasks_by_priority` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
3  | use crate::api::model::filter_tasks_by_priority as other_filter_tasks_by_priority;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
warning: unused import: `crate::api::model::filter_tasks_by_completion`
 --> src/api/simple.rs:2:5
  |
2 | use crate::api::model::filter_tasks_by_completion;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
warning: unused import: `crate::api::model::filter_tasks_by_priority`
 --> src/api/simple.rs:3:5
  |
3 | use crate::api::model::filter_tasks_by_priority;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::create_task_in_db`
 --> src/api/simple.rs:6:5
  |
6 | use crate::api::model_persistence::create_task_in_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::delete_task_from_db`
 --> src/api/simple.rs:7:5
  |
7 | use crate::api::model_persistence::delete_task_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_all_tasks_from_db`
 --> src/api/simple.rs:8:5
  |
8 | use crate::api::model_persistence::read_all_tasks_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_task_from_db`
 --> src/api/simple.rs:9:5
  |
9 | use crate::api::model_persistence::read_task_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::update_task_in_db`
  --> src/api/simple.rs:10:5
   |
10 | use crate::api::model_persistence::update_task_in_db;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Some errors have detailed explanations: E0255, E0412, E0428.
For more information about an error, try `rustc --explain E0255`.


[2024-05-08T23:12:30.067Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:12:30.071Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:12:30.075Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:12:30.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:12:30.142Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:12:30.988Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:12:30.990Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:12:30.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:12:30.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:12:30.999Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:12:31.000Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:12:31.002Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:12:31.040Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:12:31.043Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:12:31.044Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:12:31.046Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:12:31.047Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22965..22973) }
[2024-05-08T23:12:31.048Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24440..24444) }
[2024-05-08T23:12:31.049Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:12:31.053Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:12:31.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:12:31.058Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:12:31.059Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27696..27706) }
[2024-05-08T23:12:31.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28827..28843) }
[2024-05-08T23:12:31.066Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29920..29931) }
[2024-05-08T23:12:31.069Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:12:31.071Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:12:31.072Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:12:31.074Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:12:31.077Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:12:31.082Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:12:31.090Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:12:31.091Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:12:31.092Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:12:31.093Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:12:31.099Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:12:31.104Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:12:31.232Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:12:31.233Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(46089..46099) }
[2024-05-08T23:12:31.234Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46763..46769) }
[2024-05-08T23:12:31.235Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(50589..50597) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50600..50605) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:12:31.236Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(50620..50630) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50631..50632) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(50636..50639) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(50641..50645) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(50647..50653) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(50654..50669) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(50670..50671) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:12:31.238Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(50690..50705) }
[2024-05-08T23:12:31.239Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50998..51009) }
[2024-05-08T23:12:31.240Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(51582..51597) }
[2024-05-08T23:12:31.242Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52006..52047) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(52061..52074) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52075..52076) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52090..52109) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52111..52124) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(52126..52140) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52141..52142) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52144..52150) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52151..52152) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:12:31.244Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52160..52272) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(52286..52296) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52297..52298) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(52302..52315) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52316..52317) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:12:31.245Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52374..52419) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52433..52450) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52451..52452) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52466..52485) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52487..52500) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(52502..52520) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52521..52522) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52532..52538) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52541..52560) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52562..52575) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(52577..52596) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52597..52598) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:12:31.246Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52607..52673) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52678..52758) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52763..52809) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52823..52837) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52838..52839) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52843..52860) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52861..52862) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:12:31.248Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(54518..54528) }
[2024-05-08T23:12:31.249Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(57386..57413) }
[2024-05-08T23:12:31.250Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:12:31.251Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:12:31.252Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:12:31.253Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:12:31.261Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:12:31.265Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:12:31.273Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-08T23:12:31.275Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-08T23:12:31.276Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-08T23:12:31.277Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-08T23:12:31.279Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-08T23:12:31.280Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-08T23:12:31.281Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8312..8329) }
[2024-05-08T23:12:31.284Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8784..8806) }
[2024-05-08T23:12:31.286Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-08T23:12:31.287Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9486..9503) }
[2024-05-08T23:12:31.337Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10273..10292) }
[2024-05-08T23:12:31.338Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(20279..20284) }
[2024-05-08T23:12:31.338Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20508..20516) }
[2024-05-08T23:12:31.338Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20587..20613) }
[2024-05-08T23:12:31.339Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(21066..21090) }
[2024-05-08T23:12:31.339Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21537..21548) }
[2024-05-08T23:12:31.340Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21794..21808) }
[2024-05-08T23:12:31.341Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21930..21939) }
[2024-05-08T23:12:31.342Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(22092..22103) }
[2024-05-08T23:12:31.342Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22390..22401) }
[2024-05-08T23:19:53.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:19:53.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:19:53.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:19:53.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:19:53.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:19:54.392Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:19:54.394Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:19:54.397Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:19:55.399Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:19:55.401Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:19:55.401Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:19:55.401Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:19:55.402Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:19:56.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model;
        use crate::api::model::filter_tasks_by_completion;
        use crate::api::model::filter_tasks_by_completion;
        use crate::api::model::filter_tasks_by_priority;
        use crate::api::model::{Priority, Task};
        use crate::api::model_persistence;
        use crate::api::model_persistence::create_task_in_db;
        use crate::api::model_persistence::delete_task_from_db;
        use crate::api::model_persistence::read_all_tasks_from_db;
        use crate::api::model_persistence::read_task_from_db;
        use crate::api::model_persistence::update_task_in_db;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0255]: the name `filter_tasks_by_completion` is defined multiple times
  --> src/api/simple.rs:28:1
   |
2  | use crate::api::model::filter_tasks_by_completion;
   |     --------------------------------------------- previous import of the value `filter_tasks_by_completion` here
...
28 | pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_completion` redefined here
   |
   = note: `filter_tasks_by_completion` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
2  | use crate::api::model::filter_tasks_by_completion as other_filter_tasks_by_completion;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error[E0255]: the name `filter_tasks_by_priority` is defined multiple times
  --> src/api/simple.rs:38:1
   |
4  | use crate::api::model::filter_tasks_by_priority;
   |     ------------------------------------------- previous import of the value `filter_tasks_by_priority` here
...
38 | pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_priority` redefined here
   |
   = note: `filter_tasks_by_priority` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
4  | use crate::api::model::filter_tasks_by_priority as other_filter_tasks_by_priority;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
warning: unused import: `crate::api::model`
 --> src/api/simple.rs:1:5
  |
1 | use crate::api::model;
  |     ^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
warning: unused import: `crate::api::model::filter_tasks_by_completion`
 --> src/api/simple.rs:2:5
  |
2 | use crate::api::model::filter_tasks_by_completion;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model::filter_tasks_by_completion`
 --> src/api/simple.rs:3:5
  |
3 | use crate::api::model::filter_tasks_by_completion;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model::filter_tasks_by_priority`
 --> src/api/simple.rs:4:5
  |
4 | use crate::api::model::filter_tasks_by_priority;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence`
 --> src/api/simple.rs:6:5
  |
6 | use crate::api::model_persistence;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::create_task_in_db`
 --> src/api/simple.rs:7:5
  |
7 | use crate::api::model_persistence::create_task_in_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::delete_task_from_db`
 --> src/api/simple.rs:8:5
  |
8 | use crate::api::model_persistence::delete_task_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_all_tasks_from_db`
 --> src/api/simple.rs:9:5
  |
9 | use crate::api::model_persistence::read_all_tasks_from_db;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::read_task_from_db`
  --> src/api/simple.rs:10:5
   |
10 | use crate::api::model_persistence::read_task_from_db;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
warning: unused import: `crate::api::model_persistence::update_task_in_db`
  --> src/api/simple.rs:11:5
   |
11 | use crate::api::model_persistence::update_task_in_db;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Some errors have detailed explanations: E0255, E0412, E0428.
For more information about an error, try `rustc --explain E0255`.


[2024-05-08T23:19:56.672Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:19:56.672Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:19:56.674Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:19:56.697Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:19:56.722Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:19:57.385Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:19:57.393Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:19:57.393Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:19:57.394Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:19:57.394Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:19:57.395Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:19:57.397Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:19:57.452Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:19:57.454Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:19:57.454Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:19:57.455Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:19:57.455Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(23108..23116) }
[2024-05-08T23:19:57.456Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24583..24587) }
[2024-05-08T23:19:57.461Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:19:57.461Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:19:57.461Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:19:57.463Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:19:57.463Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27839..27849) }
[2024-05-08T23:19:57.464Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28970..28986) }
[2024-05-08T23:19:57.464Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(30063..30074) }
[2024-05-08T23:19:57.470Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:19:57.472Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:19:57.473Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:19:57.473Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:19:57.474Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:19:57.477Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:19:57.479Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:19:57.479Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:19:57.480Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:19:57.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:19:57.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:19:57.489Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:19:57.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:19:57.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(46375..46385) }
[2024-05-08T23:19:57.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(47049..47055) }
[2024-05-08T23:19:57.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(50875..50883) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50886..50891) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:19:57.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(50906..50916) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(50917..50918) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(50922..50925) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(50927..50931) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(50933..50939) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(50940..50955) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(50956..50957) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:19:57.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(50976..50991) }
[2024-05-08T23:19:57.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(51284..51295) }
[2024-05-08T23:19:57.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(51868..51883) }
[2024-05-08T23:19:57.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52292..52333) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(52347..52360) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52361..52362) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52376..52395) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52397..52410) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(52412..52426) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52427..52428) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52430..52436) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52437..52438) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:19:57.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52446..52558) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(52572..52582) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52583..52584) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(52588..52601) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52602..52603) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:19:57.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52660..52705) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52719..52736) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52737..52738) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52752..52771) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52773..52786) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(52788..52806) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52807..52808) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(52818..52824) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(52827..52846) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(52848..52861) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(52863..52882) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52883..52884) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:19:57.582Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52893..52959) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52964..53044) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(53049..53095) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(53109..53123) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(53124..53125) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(53129..53146) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(53147..53148) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:19:57.583Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(54804..54814) }
[2024-05-08T23:19:57.583Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(57672..57699) }
[2024-05-08T23:19:57.583Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:19:57.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:19:57.584Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:19:57.585Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:19:57.592Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:19:57.596Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:19:57.603Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-08T23:19:57.604Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-08T23:19:57.604Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-08T23:19:57.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-08T23:19:57.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-08T23:19:57.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-08T23:19:57.607Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8312..8329) }
[2024-05-08T23:19:57.607Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8784..8806) }
[2024-05-08T23:19:57.608Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-08T23:19:57.609Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9486..9503) }
[2024-05-08T23:19:57.609Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10273..10292) }
[2024-05-08T23:19:57.610Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(20338..20343) }
[2024-05-08T23:19:57.610Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20567..20575) }
[2024-05-08T23:19:57.610Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20646..20672) }
[2024-05-08T23:19:57.611Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(21137..21161) }
[2024-05-08T23:19:57.611Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21620..21631) }
[2024-05-08T23:19:57.612Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21889..21903) }
[2024-05-08T23:19:57.613Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(22037..22046) }
[2024-05-08T23:19:57.613Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(22211..22222) }
[2024-05-08T23:19:57.614Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22521..22532) }
[2024-05-08T23:23:09.069Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:23:09.069Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:23:09.069Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:23:09.070Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:23:09.070Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:23:09.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:23:09.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:23:09.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:23:10.523Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:23:10.525Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:23:10.525Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:23:10.526Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:23:10.526Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:23:11.742Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model;
        use crate::api::model::{Priority, Task};
        use crate::api::model_persistence;
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
warning: unused import: `crate::api::model`
 --> src/api/simple.rs:1:5
  |
1 | use crate::api::model;
  |     ^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
warning: unused import: `crate::api::model_persistence`
 --> src/api/simple.rs:6:5
  |
6 | use crate::api::model_persistence;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Some errors have detailed explanations: E0412, E0428.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T23:23:11.803Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:23:11.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:23:11.806Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:23:11.807Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:23:11.826Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:23:12.337Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:23:12.338Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:23:12.338Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:23:12.338Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:23:12.339Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:23:12.339Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:23:12.341Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:23:12.365Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:23:12.365Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:23:12.365Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:23:12.366Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:23:12.366Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22616..22624) }
[2024-05-08T23:23:12.367Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24091..24095) }
[2024-05-08T23:23:12.367Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:23:12.368Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:23:12.369Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:23:12.371Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:23:12.371Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27347..27357) }
[2024-05-08T23:23:12.371Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28478..28494) }
[2024-05-08T23:23:12.371Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29571..29582) }
[2024-05-08T23:23:12.373Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:23:12.374Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:23:12.374Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:23:12.375Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:23:12.375Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:23:12.377Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:23:12.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:23:12.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:23:12.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:23:12.379Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:23:12.379Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:23:12.381Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:23:12.435Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:23:12.436Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45391..45401) }
[2024-05-08T23:23:12.436Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46065..46071) }
[2024-05-08T23:23:12.436Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(49891..49899) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(49902..49907) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:23:12.436Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(49922..49932) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(49933..49934) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(49938..49941) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(49943..49947) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(49949..49955) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(49956..49971) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(49972..49973) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:23:12.437Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(49992..50007) }
[2024-05-08T23:23:12.437Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50300..50311) }
[2024-05-08T23:23:12.437Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(50884..50899) }
[2024-05-08T23:23:12.437Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51308..51349) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51363..51376) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51377..51378) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51392..51411) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51413..51426) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51428..51442) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51443..51444) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51446..51452) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51453..51454) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:23:12.438Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51462..51574) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51588..51598) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51599..51600) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51604..51617) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51618..51619) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:23:12.438Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51676..51721) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51735..51752) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51753..51754) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51768..51787) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51789..51802) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(51804..51822) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51823..51824) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51834..51840) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51843..51862) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51864..51877) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(51879..51898) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51899..51900) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:23:12.438Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51909..51975) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51980..52060) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52065..52111) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52125..52139) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52140..52141) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52145..52162) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52163..52164) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:23:12.439Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(53820..53830) }
[2024-05-08T23:23:12.439Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56688..56715) }
[2024-05-08T23:23:12.439Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:23:12.439Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:23:12.440Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:23:12.441Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:23:12.447Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:23:12.450Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:23:12.454Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-08T23:23:12.455Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-08T23:23:12.455Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-08T23:23:12.456Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-08T23:23:12.457Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-08T23:23:12.457Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-08T23:23:12.458Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8312..8329) }
[2024-05-08T23:23:12.458Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8784..8806) }
[2024-05-08T23:23:12.459Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-08T23:23:12.459Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9486..9503) }
[2024-05-08T23:23:12.460Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10273..10292) }
[2024-05-08T23:23:12.460Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19846..19851) }
[2024-05-08T23:23:12.460Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20075..20083) }
[2024-05-08T23:23:12.461Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20154..20180) }
[2024-05-08T23:23:12.461Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20645..20669) }
[2024-05-08T23:23:12.461Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21128..21139) }
[2024-05-08T23:23:12.462Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21397..21411) }
[2024-05-08T23:23:12.462Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21545..21554) }
[2024-05-08T23:23:12.463Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21719..21730) }
[2024-05-08T23:23:12.463Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(22029..22040) }
[2024-05-08T23:25:19.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:25:19.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:25:19.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:25:19.968Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:25:19.968Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:25:20.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:25:20.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:25:20.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:25:21.639Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:25:21.640Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:25:21.641Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:25:21.641Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:25:21.641Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:25:22.853Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::filter_tasks_by_completion;
        use crate::api::model::{Priority, Task};
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0255]: the name `filter_tasks_by_completion` is defined multiple times
  --> src/api/simple.rs:28:1
   |
2  | use crate::api::model::filter_tasks_by_completion;
   |     --------------------------------------------- previous import of the value `filter_tasks_by_completion` here
...
28 | pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `filter_tasks_by_completion` redefined here
   |
   = note: `filter_tasks_by_completion` must be defined only once in the value namespace of this module
help: you can use `as` to change the binding name of the import
   |
2  | use crate::api::model::filter_tasks_by_completion as other_filter_tasks_by_completion;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
warning: unused import: `crate::api::model::filter_tasks_by_completion`
 --> src/api/simple.rs:2:5
  |
2 | use crate::api::model::filter_tasks_by_completion;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
Some errors have detailed explanations: E0255, E0412, E0428.
For more information about an error, try `rustc --explain E0255`.


[2024-05-08T23:25:22.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:25:22.978Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:25:22.981Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:25:22.981Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:25:23.003Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:25:23.555Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:25:23.557Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:25:23.558Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:25:23.559Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:25:23.565Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:25:23.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:25:23.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:25:23.600Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:25:23.600Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:25:23.601Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:25:23.602Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:25:23.602Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22582..22590) }
[2024-05-08T23:25:23.603Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24057..24061) }
[2024-05-08T23:25:23.604Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:25:23.614Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:25:23.615Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:25:23.617Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:25:23.618Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27313..27323) }
[2024-05-08T23:25:23.621Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28444..28460) }
[2024-05-08T23:25:23.622Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29537..29548) }
[2024-05-08T23:25:23.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:25:23.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:25:23.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:25:23.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:25:23.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:25:23.630Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:25:23.632Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:25:23.632Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:25:23.632Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:25:23.633Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:25:23.633Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:25:23.636Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:25:23.712Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:25:23.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45323..45333) }
[2024-05-08T23:25:23.715Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(45997..46003) }
[2024-05-08T23:25:23.715Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(49823..49831) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(49834..49839) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:25:23.716Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(49854..49864) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(49865..49866) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(49870..49873) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(49875..49879) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(49881..49887) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(49888..49903) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(49904..49905) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:25:23.716Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(49924..49939) }
[2024-05-08T23:25:23.717Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50232..50243) }
[2024-05-08T23:25:23.717Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(50816..50831) }
[2024-05-08T23:25:23.717Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51240..51281) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51295..51308) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51309..51310) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51324..51343) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51345..51358) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51360..51374) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51375..51376) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51378..51384) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51385..51386) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:25:23.718Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51394..51506) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51520..51530) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51531..51532) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51536..51549) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51550..51551) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:25:23.718Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51608..51653) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51667..51684) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51685..51686) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51700..51719) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51721..51734) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(51736..51754) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51755..51756) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51766..51772) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51775..51794) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51796..51809) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(51811..51830) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51831..51832) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:25:23.719Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51841..51907) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51912..51992) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51997..52043) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52057..52071) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52072..52073) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52077..52094) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52095..52096) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:25:23.753Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(53752..53762) }
[2024-05-08T23:25:23.755Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56620..56647) }
[2024-05-08T23:25:23.756Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:25:23.756Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:25:23.757Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:25:23.758Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:25:23.769Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:25:23.773Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:25:23.781Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-08T23:25:23.782Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-08T23:25:23.783Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-08T23:25:23.784Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-08T23:25:23.785Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-08T23:25:23.785Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-08T23:25:23.786Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8312..8329) }
[2024-05-08T23:25:23.787Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8784..8806) }
[2024-05-08T23:25:23.788Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-08T23:25:23.789Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9486..9503) }
[2024-05-08T23:25:23.790Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10273..10292) }
[2024-05-08T23:25:23.791Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19831..19836) }
[2024-05-08T23:25:23.792Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20060..20068) }
[2024-05-08T23:25:23.793Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20139..20165) }
[2024-05-08T23:25:23.794Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20611..20635) }
[2024-05-08T23:25:23.795Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21094..21105) }
[2024-05-08T23:25:23.797Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21363..21377) }
[2024-05-08T23:25:23.798Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21511..21520) }
[2024-05-08T23:25:23.798Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21685..21696) }
[2024-05-08T23:25:23.799Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21995..22006) }
[2024-05-08T23:26:46.561Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:26:46.561Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:26:46.561Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:26:46.561Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:26:46.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:26:47.068Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:26:47.068Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:26:47.071Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:26:47.987Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:26:47.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:26:47.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:26:47.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:26:47.990Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:26:49.196Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use api::model::filter_tasks_by_completion;
        use crate::api::model::{Priority, Task};
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0433]: failed to resolve: use of undeclared crate or module `api`
 --> src/api/simple.rs:2:5
  |
2 | use api::model::filter_tasks_by_completion;
  |     ^^^ use of undeclared crate or module `api`
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
Some errors have detailed explanations: E0412, E0428, E0433.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T23:26:49.283Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:26:49.285Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:26:49.287Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:26:49.287Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:26:49.313Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:26:49.857Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:26:49.858Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:26:49.858Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:26:49.858Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:26:49.858Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:26:49.859Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:26:49.860Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:26:49.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:26:49.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:26:49.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:26:49.880Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:26:49.880Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22575..22583) }
[2024-05-08T23:26:49.881Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24050..24054) }
[2024-05-08T23:26:49.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:26:49.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:26:49.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:26:49.884Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:26:49.884Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27306..27316) }
[2024-05-08T23:26:49.884Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28437..28453) }
[2024-05-08T23:26:49.885Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29530..29541) }
[2024-05-08T23:26:49.888Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:26:49.889Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:26:49.889Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:26:49.890Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:26:49.890Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:26:49.892Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:26:49.893Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:26:49.894Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:26:49.894Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:26:49.894Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:26:49.895Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:26:49.897Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:26:49.955Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:26:49.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45309..45319) }
[2024-05-08T23:26:49.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(45983..45989) }
[2024-05-08T23:26:49.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(49809..49817) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(49820..49825) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:26:49.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(49840..49850) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(49851..49852) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(49856..49859) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(49861..49865) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(49867..49873) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(49874..49889) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(49890..49891) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:26:49.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(49910..49925) }
[2024-05-08T23:26:49.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50218..50229) }
[2024-05-08T23:26:49.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(50802..50817) }
[2024-05-08T23:26:49.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51226..51267) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51281..51294) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51295..51296) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51310..51329) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51331..51344) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51346..51360) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51361..51362) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51364..51370) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51371..51372) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:26:49.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51380..51492) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51506..51516) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51517..51518) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51522..51535) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51536..51537) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:26:49.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51594..51639) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51653..51670) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51671..51672) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51686..51705) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51707..51720) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(51722..51740) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51741..51742) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51752..51758) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51761..51780) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51782..51795) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(51797..51816) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51817..51818) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:26:49.959Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51827..51893) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51898..51978) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51983..52029) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52043..52057) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52058..52059) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52063..52080) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52081..52082) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:26:49.959Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(53738..53748) }
[2024-05-08T23:26:49.960Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56606..56633) }
[2024-05-08T23:26:49.960Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:26:49.960Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:26:49.960Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:26:49.961Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:26:49.966Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:26:49.969Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:26:49.974Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-08T23:26:49.975Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-08T23:26:49.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-08T23:26:49.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-08T23:26:49.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-08T23:26:49.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-08T23:26:49.978Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8312..8329) }
[2024-05-08T23:26:49.978Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8784..8806) }
[2024-05-08T23:26:49.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-08T23:26:49.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9486..9503) }
[2024-05-08T23:26:49.980Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10273..10292) }
[2024-05-08T23:26:49.980Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19824..19829) }
[2024-05-08T23:26:49.980Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20053..20061) }
[2024-05-08T23:26:49.981Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20132..20158) }
[2024-05-08T23:26:49.981Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20604..20628) }
[2024-05-08T23:26:49.982Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21087..21098) }
[2024-05-08T23:26:49.982Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21356..21370) }
[2024-05-08T23:26:49.982Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21504..21513) }
[2024-05-08T23:26:49.983Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21678..21689) }
[2024-05-08T23:26:49.983Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21988..21999) }
[2024-05-08T23:29:01.241Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:29:01.242Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:29:01.242Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:29:01.242Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:29:01.242Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:29:01.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:29:01.803Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:29:01.808Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:29:02.690Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:29:02.691Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:29:02.692Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:29:02.692Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:29:02.692Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:29:04.172Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error as RusqliteError};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, RusqliteError> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for RusqliteError {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db() -> Result<Vec<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), RusqliteError> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(RusqliteError::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection) -> Result<Vec<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(RusqliteError::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), RusqliteError> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), RusqliteError> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use rusqlite::Error as RusqliteError;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), RusqliteError> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, RusqliteError> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, RusqliteError> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), RusqliteError> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), RusqliteError> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
Some errors have detailed explanations: E0412, E0428.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T23:29:04.435Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:29:04.442Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:29:04.469Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:29:04.469Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:29:04.521Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:29:05.118Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:29:05.119Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:29:05.119Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:29:05.119Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:29:05.120Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:29:05.120Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:29:05.121Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:29:05.143Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:29:05.143Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:29:05.143Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:29:05.144Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:29:05.144Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22542..22550) }
[2024-05-08T23:29:05.144Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24017..24021) }
[2024-05-08T23:29:05.145Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:29:05.146Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:29:05.146Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:29:05.147Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:29:05.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27273..27283) }
[2024-05-08T23:29:05.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28404..28420) }
[2024-05-08T23:29:05.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29497..29508) }
[2024-05-08T23:29:05.150Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:29:05.151Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:29:05.151Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:29:05.152Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:29:05.152Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:29:05.155Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:29:05.155Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:29:05.156Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:29:05.156Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:29:05.156Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:29:05.157Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:29:05.159Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:29:05.209Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:29:05.209Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45243..45253) }
[2024-05-08T23:29:05.209Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(45917..45923) }
[2024-05-08T23:29:05.210Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(49743..49751) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(49754..49759) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:29:05.210Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(49774..49784) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(49785..49786) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(49790..49793) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(49795..49799) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(49801..49807) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(49808..49823) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(49824..49825) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:29:05.210Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(49844..49859) }
[2024-05-08T23:29:05.211Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50152..50163) }
[2024-05-08T23:29:05.211Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(50736..50751) }
[2024-05-08T23:29:05.211Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51160..51201) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51215..51228) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51229..51230) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51244..51263) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51265..51278) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51280..51294) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51295..51296) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51298..51304) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51305..51306) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:29:05.212Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51314..51426) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51440..51450) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51451..51452) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51456..51469) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51470..51471) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:29:05.212Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51528..51573) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51587..51604) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51605..51606) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51620..51639) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51641..51654) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(51656..51674) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51675..51676) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51686..51692) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51695..51714) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51716..51729) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(51731..51750) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51751..51752) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:29:05.213Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51761..51827) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51832..51912) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51917..51963) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(51977..51991) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51992..51993) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51997..52014) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52015..52016) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:29:05.213Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(53672..53682) }
[2024-05-08T23:29:05.213Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56540..56567) }
[2024-05-08T23:29:05.214Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:29:05.214Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:29:05.214Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:29:05.215Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:29:05.220Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:29:05.222Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:29:05.227Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-08T23:29:05.228Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-08T23:29:05.228Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-08T23:29:05.229Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-08T23:29:05.230Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-08T23:29:05.230Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-08T23:29:05.230Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8312..8329) }
[2024-05-08T23:29:05.231Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8784..8806) }
[2024-05-08T23:29:05.231Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-08T23:29:05.232Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9486..9503) }
[2024-05-08T23:29:05.232Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10273..10292) }
[2024-05-08T23:29:05.233Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19772..19777) }
[2024-05-08T23:29:05.234Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20001..20009) }
[2024-05-08T23:29:05.234Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20080..20106) }
[2024-05-08T23:29:05.235Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20571..20595) }
[2024-05-08T23:29:05.235Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21054..21065) }
[2024-05-08T23:29:05.236Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21323..21337) }
[2024-05-08T23:29:05.236Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21471..21480) }
[2024-05-08T23:29:05.237Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21645..21656) }
[2024-05-08T23:29:05.237Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21955..21966) }
[2024-05-08T23:36:31.923Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:36:31.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:36:31.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:36:31.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:36:31.925Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:36:32.433Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:36:32.435Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:36:32.438Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:36:33.406Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:36:33.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:36:33.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:36:33.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:36:33.409Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:36:35.050Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection, Error};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use rusqlite::Error;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
warning: unused import: `Error`
 --> src/api/model_persistence.rs:5:36
  |
5 | use rusqlite::{params, Connection, Error};
  |                                    ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
warning: unused import: `rusqlite::Error`
  --> src/api/simple.rs:12:5
   |
12 | use rusqlite::Error;
   |     ^^^^^^^^^^^^^^^
Some errors have detailed explanations: E0412, E0428.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T23:36:35.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:36:35.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:36:35.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:36:35.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:36:35.143Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:36:35.652Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:36:35.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:36:35.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:36:35.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:36:35.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:36:35.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:36:35.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:36:35.677Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:36:35.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:36:35.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:36:35.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:36:35.678Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22584..22592) }
[2024-05-08T23:36:35.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24059..24063) }
[2024-05-08T23:36:35.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:36:35.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:36:35.680Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:36:35.681Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:36:35.681Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27298..27308) }
[2024-05-08T23:36:35.681Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28429..28445) }
[2024-05-08T23:36:35.682Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29524..29535) }
[2024-05-08T23:36:35.684Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:36:35.684Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:36:35.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:36:35.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:36:35.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:36:35.687Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:36:35.688Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:36:35.688Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:36:35.689Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:36:35.689Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:36:35.689Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:36:35.691Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:36:35.807Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:36:35.808Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45327..45337) }
[2024-05-08T23:36:35.808Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(46001..46007) }
[2024-05-08T23:36:35.808Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(49827..49835) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(49838..49843) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:36:35.808Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(49858..49868) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(49869..49870) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(49874..49877) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(49879..49883) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(49885..49891) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(49892..49907) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(49908..49909) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:36:35.809Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(49928..49943) }
[2024-05-08T23:36:35.809Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50236..50247) }
[2024-05-08T23:36:35.809Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(50820..50835) }
[2024-05-08T23:36:35.809Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51244..51285) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51299..51312) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51313..51314) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51328..51347) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51349..51362) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51364..51378) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51379..51380) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51382..51388) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51389..51390) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:36:35.810Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51398..51510) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51524..51534) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51535..51536) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51540..51553) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51554..51555) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:36:35.810Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51612..51657) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51671..51688) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51689..51690) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51704..51723) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51725..51738) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(51740..51758) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51759..51760) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51770..51776) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51779..51798) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51800..51813) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(51815..51834) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51835..51836) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:36:35.818Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51845..51911) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51916..51996) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(52001..52047) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(52061..52075) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52076..52077) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52081..52098) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52099..52100) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:36:35.818Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(53756..53766) }
[2024-05-08T23:36:35.820Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56624..56651) }
[2024-05-08T23:36:35.821Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:36:35.821Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:36:35.823Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:36:35.823Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:36:35.833Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:36:35.836Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:36:35.847Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-08T23:36:35.850Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-08T23:36:35.850Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-08T23:36:35.851Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-08T23:36:35.851Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-08T23:36:35.852Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-08T23:36:35.853Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8299..8316) }
[2024-05-08T23:36:35.853Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8775..8797) }
[2024-05-08T23:36:35.854Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9126..9143) }
[2024-05-08T23:36:35.854Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9497..9514) }
[2024-05-08T23:36:35.855Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10288..10307) }
[2024-05-08T23:36:35.855Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19804..19809) }
[2024-05-08T23:36:35.856Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(20033..20041) }
[2024-05-08T23:36:35.856Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20112..20138) }
[2024-05-08T23:36:35.856Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20603..20627) }
[2024-05-08T23:36:35.857Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21086..21097) }
[2024-05-08T23:36:35.857Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21357..21371) }
[2024-05-08T23:36:35.872Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21507..21516) }
[2024-05-08T23:36:35.872Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21683..21694) }
[2024-05-08T23:36:35.873Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21995..22006) }
[2024-05-08T23:40:06.025Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:40:06.025Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:40:06.026Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:40:06.026Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:40:06.026Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:40:06.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:40:06.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:40:06.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:40:07.608Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:40:07.609Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:40:07.609Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:40:07.609Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:40:07.609Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:40:08.840Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
Some errors have detailed explanations: E0412, E0428.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T23:40:08.898Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:40:08.898Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:40:08.901Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:40:08.901Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:40:08.926Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:40:09.453Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:40:09.454Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:40:09.454Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:40:09.454Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:40:09.455Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:40:09.455Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:40:09.457Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:40:09.479Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:40:09.480Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:40:09.480Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:40:09.480Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:40:09.481Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22548..22556) }
[2024-05-08T23:40:09.481Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24023..24027) }
[2024-05-08T23:40:09.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:40:09.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:40:09.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:40:09.484Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:40:09.484Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27255..27265) }
[2024-05-08T23:40:09.484Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28386..28402) }
[2024-05-08T23:40:09.484Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29481..29492) }
[2024-05-08T23:40:09.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:40:09.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:40:09.487Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:40:09.487Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:40:09.488Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:40:09.490Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:40:09.491Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:40:09.491Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:40:09.491Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:40:09.492Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:40:09.492Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:40:09.495Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:40:09.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:40:09.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45255..45265) }
[2024-05-08T23:40:09.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(45929..45935) }
[2024-05-08T23:40:09.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(49755..49763) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(49766..49771) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:40:09.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(49786..49796) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(49797..49798) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(49802..49805) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(49807..49811) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(49813..49819) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(49820..49835) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(49836..49837) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:40:09.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(49856..49871) }
[2024-05-08T23:40:09.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50164..50175) }
[2024-05-08T23:40:09.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(50748..50763) }
[2024-05-08T23:40:09.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51172..51213) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51227..51240) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51241..51242) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51256..51275) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51277..51290) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51292..51306) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51307..51308) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51310..51316) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51317..51318) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:40:09.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51326..51438) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51452..51462) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51463..51464) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51468..51481) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51482..51483) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:40:09.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51540..51585) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51599..51616) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51617..51618) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51632..51651) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51653..51666) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(51668..51686) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51687..51688) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51698..51704) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51707..51726) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51728..51741) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(51743..51762) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51763..51764) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:40:09.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51773..51839) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51844..51924) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51929..51975) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(51989..52003) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52004..52005) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52009..52026) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52027..52028) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:40:09.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(53684..53694) }
[2024-05-08T23:40:09.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56552..56579) }
[2024-05-08T23:40:09.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:40:09.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:40:09.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:40:09.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:40:09.551Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:40:09.554Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:40:09.561Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-08T23:40:09.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-08T23:40:09.562Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-08T23:40:09.563Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-08T23:40:09.563Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-08T23:40:09.564Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-08T23:40:09.564Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8292..8309) }
[2024-05-08T23:40:09.565Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8768..8790) }
[2024-05-08T23:40:09.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-08T23:40:09.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9490..9507) }
[2024-05-08T23:40:09.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10281..10300) }
[2024-05-08T23:40:09.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19768..19773) }
[2024-05-08T23:40:09.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(19997..20005) }
[2024-05-08T23:40:09.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20076..20102) }
[2024-05-08T23:40:09.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20567..20591) }
[2024-05-08T23:40:09.569Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21050..21061) }
[2024-05-08T23:40:09.569Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21321..21335) }
[2024-05-08T23:40:09.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21471..21480) }
[2024-05-08T23:40:09.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21647..21658) }
[2024-05-08T23:40:09.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21959..21970) }
[2024-05-08T23:43:18.903Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:43:18.903Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:43:18.903Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:43:18.904Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:43:18.904Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:43:19.436Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:43:19.437Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:43:19.441Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:43:20.359Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:43:20.360Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:43:20.360Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:43:20.360Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:43:20.361Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:43:21.483Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for RusqliteError {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<RusqliteError> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for
        RusqliteError {
        fn into_into_dart(self) -> FrbWrapper<RusqliteError> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for RusqliteError {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:768:61
    |
768 |     flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>
    |                                                             ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:786:20
    |
786 | impl SseDecode for RusqliteError {
    |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:790:69
    |
790 |             flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>,
    |                                                                     ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
786 | impl<RusqliteError> SseDecode for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:817:79
    |
817 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
    |                                                                               ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
816 | impl<RusqliteError> SseDecode
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:981:51
    |
981 | impl flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
981 | impl<RusqliteError> flutter_rust_bridge::IntoDart for FrbWrapper<RusqliteError> {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:987:81
    |
987 | impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |                                                                                 ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
987 | impl<RusqliteError> flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<RusqliteError> {}
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:51
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                   ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:989:71
    |
989 | impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |                                                                       ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
   --> src/frb_generated.rs:990:43
    |
990 |     fn into_into_dart(self) -> FrbWrapper<RusqliteError> {
    |                                           ^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
989 | impl<RusqliteError> flutter_rust_bridge::IntoIntoDart<FrbWrapper<RusqliteError>> for RusqliteError {
    |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1017:20
     |
1017 | impl SseEncode for RusqliteError {
     |                    ^^^^^^^^^^^^^ not found in this scope
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1020:80
     |
1020 | ...   <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>>::sse_encode(flutter_rust_bridge::for_genera...
     |                                                                              ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1017 | impl<RusqliteError> SseEncode for RusqliteError {
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
    --> src/frb_generated.rs:1046:79
     |
1046 |     for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>
     |                                                                               ^^^^^^^^^^^^^ not found in this scope
     |
help: you might be missing a type parameter
     |
1045 | impl<RusqliteError> SseEncode
     |     +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:35:70
   |
35 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::increment_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
32 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
error[E0412]: cannot find type `RusqliteError` in this scope
  --> src/frb_generated.io.rs:42:70
   |
42 |     MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RusqliteError>>::decrement_strong_count(ptr as _);
   |                                                                      ^^^^^^^^^^^^^ not found in this scope
   |
help: you might be missing a type parameter
   |
39 | pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRusqliteError<RusqliteError>(
   |                                                                                                                                                          +++++++++++++++
Some errors have detailed explanations: E0412, E0428.
For more information about an error, try `rustc --explain E0412`.


[2024-05-08T23:43:21.511Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:43:21.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:43:21.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:43:21.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:43:21.528Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:43:21.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:43:21.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:43:21.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:43:21.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:43:21.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:43:21.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:43:21.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:43:21.995Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:43:21.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:43:21.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:43:21.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:43:21.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22536..22544) }
[2024-05-08T23:43:21.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24007..24011) }
[2024-05-08T23:43:21.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:43:21.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:43:21.998Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:43:21.999Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:43:21.999Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27239..27249) }
[2024-05-08T23:43:21.999Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28370..28386) }
[2024-05-08T23:43:21.999Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29465..29476) }
[2024-05-08T23:43:22.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:43:22.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:43:22.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:43:22.002Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:43:22.002Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:43:22.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:43:22.005Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:43:22.006Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:43:22.006Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:43:22.006Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-08T23:43:22.006Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:43:22.009Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-08T23:43:22.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:43:22.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45239..45249) }
[2024-05-08T23:43:22.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(45913..45919) }
[2024-05-08T23:43:22.056Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(49739..49747) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(49750..49755) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-08T23:43:22.056Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(49770..49780) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(49781..49782) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(49786..49789) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(49791..49795) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(49797..49803) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(49804..49819) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(49820..49821) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:43:22.056Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(49840..49855) }
[2024-05-08T23:43:22.056Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50148..50159) }
[2024-05-08T23:43:22.056Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(50732..50747) }
[2024-05-08T23:43:22.057Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51156..51197) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51211..51224) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51225..51226) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51240..51259) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51261..51274) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51276..51290) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51291..51292) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51294..51300) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51301..51302) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:43:22.057Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51310..51422) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51436..51446) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51447..51448) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51452..51465) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51466..51467) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:43:22.057Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51524..51569) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51583..51600) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51601..51602) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51616..51635) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51637..51650) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(51652..51670) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51671..51672) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51682..51688) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51691..51710) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51712..51725) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(51727..51746) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51747..51748) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:43:22.058Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51757..51823) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51828..51908) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51913..51959) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(51973..51987) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51988..51989) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51993..52010) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52011..52012) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-08T23:43:22.063Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(53668..53678) }
[2024-05-08T23:43:22.064Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56536..56563) }
[2024-05-08T23:43:22.064Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:43:22.064Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-08T23:43:22.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:43:22.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-08T23:43:22.070Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-08T23:43:22.073Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:43:22.079Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3990..4016) }
[2024-05-08T23:43:22.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4220..4244) }
[2024-05-08T23:43:22.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:43:22.082Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.082Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.082Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3228..3231) }
[2024-05-08T23:43:22.083Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.085Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:43:22.086Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.086Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.086Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3661..3675) }
[2024-05-08T23:43:22.086Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.087Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3761..3776) }
[2024-05-08T23:43:22.087Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.088Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3863..3875) }
[2024-05-08T23:43:22.088Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.088Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:43:22.089Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8284..8301) }
[2024-05-08T23:43:22.089Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:43:22.090Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8760..8782) }
[2024-05-08T23:43:22.090Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.091Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9111..9128) }
[2024-05-08T23:43:22.091Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.091Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9482..9499) }
[2024-05-08T23:43:22.092Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:43:22.092Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10273..10292) }
[2024-05-08T23:43:22.093Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19760..19765) }
[2024-05-08T23:43:22.093Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(19989..19997) }
[2024-05-08T23:43:22.093Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20068..20094) }
[2024-05-08T23:43:22.094Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.094Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.094Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20559..20583) }
[2024-05-08T23:43:22.095Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:43:22.095Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.121Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.121Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21042..21053) }
[2024-05-08T23:43:22.121Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:43:22.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21313..21327) }
[2024-05-08T23:43:22.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21463..21472) }
[2024-05-08T23:43:22.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:43:22.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21639..21650) }
[2024-05-08T23:43:22.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:43:22.124Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21951..21962) }
[2024-05-08T23:43:22.164Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_dart.rs:13] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/api/model_persistence.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-08T23:43:22.164Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-08T23:43:28.260Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model_persistence.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 6 files (6 changed) in 5.14 seconds.
 stderr=
[2024-05-08T23:43:28.261Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-08T23:43:28.262Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-08T23:43:28.651Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-08T23:43:28.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:43:28.657Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-08T23:43:28.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-08T23:50:13.169Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-08T23:50:13.169Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-08T23:50:13.169Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-08T23:50:13.169Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-08T23:50:13.170Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-08T23:50:13.737Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-08T23:50:13.738Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:50:13.741Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-08T23:50:14.824Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-08T23:50:14.825Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-08T23:50:14.825Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:50:14.826Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-08T23:50:14.826Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-08T23:50:15.709Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0583]: file not found for module `frb_generated`
 --> src/lib.rs:2:1
  |
2 | mod frb_generated; /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
  | ^^^^^^^^^^^^^^^^^^
  |
  = help: to create the module `frb_generated`, create file "src/frb_generated.rs" or "src/frb_generated/mod.rs"
  = note: if there is a `mod frb_generated` elsewhere in the crate already, import it with `use crate::...` instead
For more information about this error, try `rustc --explain E0583`.


[2024-05-08T23:50:15.717Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-08T23:50:15.717Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:50:15.720Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-08T23:50:15.720Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:50:15.736Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-08T23:50:16.201Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:50:16.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-08T23:50:16.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-08T23:50:16.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-08T23:50:16.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-08T23:50:16.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-08T23:50:16.204Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-08T23:50:16.219Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:50:16.219Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-08T23:50:16.220Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-08T23:50:16.220Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:50:16.220Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22536..22544) }
[2024-05-08T23:50:16.221Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24007..24011) }
[2024-05-08T23:50:16.221Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-08T23:50:16.222Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:50:16.222Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-08T23:50:16.223Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:50:16.223Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27239..27249) }
[2024-05-08T23:50:16.224Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28370..28386) }
[2024-05-08T23:50:16.224Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29465..29476) }
[2024-05-08T23:50:16.225Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-08T23:50:16.226Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-08T23:50:16.226Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-08T23:50:16.226Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:50:16.226Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-08T23:50:16.229Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-08T23:50:16.229Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-08T23:50:16.229Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-08T23:50:16.230Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-08T23:50:16.230Z [33mWARN[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:232] Skipping unresolvable module frb_generated (tried /data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs, /data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs, /data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs, /data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs)
[2024-05-08T23:50:16.230Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-08T23:50:16.234Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3990..4016) }
[2024-05-08T23:50:16.234Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.235Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.238Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.238Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4220..4244) }
[2024-05-08T23:50:16.238Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.238Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:50:16.239Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.239Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.239Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3228..3231) }
[2024-05-08T23:50:16.239Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.241Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:50:16.241Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.241Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.242Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3661..3675) }
[2024-05-08T23:50:16.242Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.256Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3761..3776) }
[2024-05-08T23:50:16.257Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.257Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3863..3875) }
[2024-05-08T23:50:16.258Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.258Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:50:16.259Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8284..8301) }
[2024-05-08T23:50:16.259Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:50:16.259Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8760..8782) }
[2024-05-08T23:50:16.260Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.260Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9111..9128) }
[2024-05-08T23:50:16.261Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.261Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9482..9499) }
[2024-05-08T23:50:16.261Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:50:16.262Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10273..10292) }
[2024-05-08T23:50:16.262Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19760..19765) }
[2024-05-08T23:50:16.262Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(19989..19997) }
[2024-05-08T23:50:16.263Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20068..20094) }
[2024-05-08T23:50:16.263Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.264Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.264Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20559..20583) }
[2024-05-08T23:50:16.264Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:50:16.265Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.265Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.265Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21042..21053) }
[2024-05-08T23:50:16.266Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:50:16.266Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21313..21327) }
[2024-05-08T23:50:16.266Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.266Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21463..21472) }
[2024-05-08T23:50:16.267Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-08T23:50:16.267Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21639..21650) }
[2024-05-08T23:50:16.267Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-08T23:50:16.268Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21951..21962) }
[2024-05-08T23:50:16.307Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_dart.rs:13] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/api/model_persistence.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-08T23:50:16.307Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-08T23:50:21.417Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model_persistence.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 6 files (6 changed) in 4.14 seconds.
 stderr=
[2024-05-08T23:50:21.418Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-08T23:50:21.418Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-08T23:50:21.843Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-08T23:50:21.845Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-08T23:50:21.849Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-08T23:50:21.852Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T00:04:35.972Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T00:04:35.973Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T00:04:35.974Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T00:04:35.981Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T00:04:35.982Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T00:04:36.784Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T00:04:36.787Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T00:04:36.793Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T00:04:38.776Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T00:04:38.777Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T00:04:38.778Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:04:38.778Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T00:04:38.778Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T00:04:40.099Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
For more information about this error, try `rustc --explain E0428`.


[2024-05-09T00:04:40.240Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T00:04:40.241Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:04:40.248Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T00:04:40.249Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:04:40.278Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T00:04:41.009Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:04:41.012Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T00:04:41.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T00:04:41.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T00:04:41.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T00:04:41.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:04:41.016Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T00:04:41.074Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:04:41.079Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T00:04:41.079Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T00:04:41.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:04:41.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22548..22556) }
[2024-05-09T00:04:41.085Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24023..24027) }
[2024-05-09T00:04:41.096Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:04:41.097Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:04:41.097Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:04:41.099Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:04:41.099Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27255..27265) }
[2024-05-09T00:04:41.100Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28386..28402) }
[2024-05-09T00:04:41.100Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29481..29492) }
[2024-05-09T00:04:41.103Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:04:41.104Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T00:04:41.104Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T00:04:41.105Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:04:41.105Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:04:41.108Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:04:41.110Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-09T00:04:41.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-09T00:04:41.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-09T00:04:41.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-09T00:04:41.124Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:04:41.127Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-09T00:04:41.271Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T00:04:41.271Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(45255..45265) }
[2024-05-09T00:04:41.272Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(45929..45935) }
[2024-05-09T00:04:41.272Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(49755..49763) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(49766..49771) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-09T00:04:41.272Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(49786..49796) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(49797..49798) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(49802..49805) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(49807..49811) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(49813..49819) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(49820..49835) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(49836..49837) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:04:41.273Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(49856..49871) }
[2024-05-09T00:04:41.273Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(50164..50175) }
[2024-05-09T00:04:41.273Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(50748..50763) }
[2024-05-09T00:04:41.274Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51172..51213) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(51227..51240) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51241..51242) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51256..51275) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51277..51290) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(51292..51306) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51307..51308) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51310..51316) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51317..51318) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:04:41.274Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51326..51438) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(51452..51462) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51463..51464) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(51468..51481) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51482..51483) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:04:41.274Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51540..51585) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(51599..51616) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(51617..51618) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51632..51651) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51653..51666) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(51668..51686) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51687..51688) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(51698..51704) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(51707..51726) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(51728..51741) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(51743..51762) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(51763..51764) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:04:41.275Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51773..51839) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51844..51924) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(51929..51975) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(51989..52003) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(52004..52005) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(52009..52026) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(52027..52028) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:04:41.314Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(53684..53694) }
[2024-05-09T00:04:41.315Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(56552..56579) }
[2024-05-09T00:04:41.315Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-09T00:04:41.316Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-09T00:04:41.316Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T00:04:41.317Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T00:04:41.336Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T00:04:41.339Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:04:41.363Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-09T00:04:41.364Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-09T00:04:41.374Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-09T00:04:41.375Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-09T00:04:41.376Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-09T00:04:41.376Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-09T00:04:41.377Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8292..8309) }
[2024-05-09T00:04:41.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8768..8790) }
[2024-05-09T00:04:41.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-09T00:04:41.379Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9490..9507) }
[2024-05-09T00:04:41.386Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10281..10300) }
[2024-05-09T00:04:41.386Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19768..19773) }
[2024-05-09T00:04:41.387Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(19997..20005) }
[2024-05-09T00:04:41.387Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20076..20102) }
[2024-05-09T00:04:41.388Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20567..20591) }
[2024-05-09T00:04:41.389Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21050..21061) }
[2024-05-09T00:04:41.389Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21321..21335) }
[2024-05-09T00:04:41.390Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21471..21480) }
[2024-05-09T00:04:41.397Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21647..21658) }
[2024-05-09T00:04:41.398Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21959..21970) }
[2024-05-09T00:08:42.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T00:08:42.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T00:08:42.122Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T00:08:42.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T00:08:42.123Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T00:08:42.697Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T00:08:42.698Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T00:08:42.702Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T00:08:43.756Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T00:08:43.758Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T00:08:43.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:08:43.759Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T00:08:43.760Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T00:08:45.183Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use uuid::Uuid;
        use flutter_rust_bridge::frb;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
mod frb_generated {}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0583]: file not found for module `frb_generated`
 --> src/lib.rs:2:1
  |
2 | mod frb_generated; /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
  | ^^^^^^^^^^^^^^^^^^
  |
  = help: to create the module `frb_generated`, create file "src/frb_generated.rs" or "src/frb_generated/mod.rs"
  = note: if there is a `mod frb_generated` elsewhere in the crate already, import it with `use crate::...` instead
For more information about this error, try `rustc --explain E0583`.


[2024-05-09T00:08:45.197Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T00:08:45.198Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:08:45.201Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T00:08:45.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:08:45.221Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T00:08:45.847Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:08:45.848Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T00:08:45.848Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T00:08:45.848Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T00:08:45.848Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T00:08:45.849Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:08:45.850Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T00:08:45.873Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:08:45.873Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T00:08:45.873Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T00:08:45.874Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:08:45.874Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22548..22556) }
[2024-05-09T00:08:45.875Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(24023..24027) }
[2024-05-09T00:08:45.875Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:08:45.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:08:45.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:08:45.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:08:45.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(27255..27265) }
[2024-05-09T00:08:45.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28386..28402) }
[2024-05-09T00:08:45.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29481..29492) }
[2024-05-09T00:08:45.880Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:08:45.881Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T00:08:45.881Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T00:08:45.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:08:45.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:08:45.885Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:08:45.887Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-09T00:08:45.887Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-09T00:08:45.887Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-09T00:08:45.887Z [33mWARN[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:232] Skipping unresolvable module frb_generated (tried /data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs, /data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs, /data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs, /data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs)
[2024-05-09T00:08:45.917Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:08:45.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-09T00:08:45.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-09T00:08:45.928Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-09T00:08:45.930Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-09T00:08:45.931Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-09T00:08:45.932Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-09T00:08:45.935Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8292..8309) }
[2024-05-09T00:08:45.936Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8768..8790) }
[2024-05-09T00:08:45.939Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-09T00:08:45.940Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9490..9507) }
[2024-05-09T00:08:45.945Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10281..10300) }
[2024-05-09T00:08:45.946Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19768..19773) }
[2024-05-09T00:08:45.949Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(19997..20005) }
[2024-05-09T00:08:45.949Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20076..20102) }
[2024-05-09T00:08:45.949Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20567..20591) }
[2024-05-09T00:08:45.953Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21050..21061) }
[2024-05-09T00:08:45.954Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21321..21335) }
[2024-05-09T00:08:45.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21471..21480) }
[2024-05-09T00:08:45.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21647..21658) }
[2024-05-09T00:08:45.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21959..21970) }
[2024-05-09T00:13:54.221Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T00:13:54.230Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T00:13:54.231Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T00:13:54.232Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T00:13:54.233Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T00:13:55.262Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T00:13:55.263Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T00:13:55.266Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T00:13:56.325Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T00:13:56.326Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T00:13:56.326Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:13:56.326Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T00:13:56.327Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T00:15:26.732Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
 stderr=   Compiling libc v0.2.150
   Compiling proc-macro2 v1.0.70
   Compiling unicode-ident v1.0.12
   Compiling autocfg v1.1.0
    Checking cfg-if v1.0.0
    Checking memchr v2.6.4
   Compiling futures-core v0.3.29
   Compiling futures-channel v0.3.29
   Compiling futures-task v0.3.29
   Compiling version_check v0.9.4
    Checking pin-project-lite v0.2.13
   Compiling futures-util v0.3.29
    Checking futures-sink v0.3.29
   Compiling slab v0.4.9
   Compiling ahash v0.8.11
    Checking pin-utils v0.1.0
    Checking futures-io v0.3.29
    Checking gimli v0.28.1
   Compiling anyhow v1.0.75
    Checking once_cell v1.18.0
    Checking zerocopy v0.7.33
   Compiling pkg-config v0.3.30
   Compiling quote v1.0.33
   Compiling vcpkg v0.2.15
    Checking adler v1.0.2
    Checking miniz_oxide v0.7.1
   Compiling syn v2.0.39
   Compiling cc v1.0.83
    Checking num_cpus v1.16.0
    Checking object v0.32.1
   Compiling num-traits v0.2.19
    Checking allocator-api2 v0.2.18
    Checking rustc-demangle v0.1.23
   Compiling build-target v0.4.0
   Compiling serde v1.0.193
    Checking hashbrown v0.14.5
   Compiling flutter_rust_bridge v2.0.0-dev.33
    Checking atomic v0.5.3
   Compiling hex v0.4.3
    Checking tokio v1.34.0
    Checking threadpool v1.8.1
    Checking getrandom v0.2.14
   Compiling backtrace v0.3.69
   Compiling dart-sys-fork v4.1.1
   Compiling libsqlite3-sys v0.28.0
    Checking hashlink v0.9.0
    Checking addr2line v0.21.0
    Checking smallvec v1.13.2
    Checking iana-time-zone v0.1.60
    Checking byteorder v1.5.0
    Checking lazy_static v1.4.0
    Checking fallible-streaming-iterator v0.1.9
    Checking bitflags v2.5.0
    Checking fallible-iterator v0.3.0
    Checking chrono v0.4.38
   Compiling futures-macro v0.3.29
   Compiling serde_derive v1.0.193
   Compiling delegate-attr v0.3.0
   Compiling flutter_rust_bridge_macros v2.0.0-dev.33
    Checking allo-isolate v0.1.24
    Checking futures-executor v0.3.29
    Checking futures v0.3.29
    Checking uuid v1.8.0
    Checking rusqlite v0.31.0
    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1m 29s


[2024-05-09T00:15:26.742Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T00:15:26.744Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:15:26.748Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T00:15:26.750Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:15:26.776Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T00:15:27.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:15:27.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T00:15:27.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T00:15:27.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T00:15:27.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T00:15:27.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:15:27.577Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T00:15:27.596Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:15:27.596Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T00:15:27.597Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T00:15:27.598Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:15:27.598Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22281..22289) }
[2024-05-09T00:15:27.598Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(23756..23760) }
[2024-05-09T00:15:27.599Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:15:27.599Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:15:27.600Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:15:27.601Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:15:27.601Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(26988..26998) }
[2024-05-09T00:15:27.602Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28119..28135) }
[2024-05-09T00:15:27.602Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29214..29225) }
[2024-05-09T00:15:27.604Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:15:27.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T00:15:27.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T00:15:27.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:15:27.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:15:27.608Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:15:27.609Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:15:27.615Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-09T00:15:27.616Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-09T00:15:27.617Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-09T00:15:27.618Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-09T00:15:27.619Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-09T00:15:27.619Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-09T00:15:27.620Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8292..8309) }
[2024-05-09T00:15:27.621Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8768..8790) }
[2024-05-09T00:15:27.621Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-09T00:15:27.622Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9490..9507) }
[2024-05-09T00:15:27.622Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10281..10300) }
[2024-05-09T00:15:27.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19768..19773) }
[2024-05-09T00:15:27.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(19997..20005) }
[2024-05-09T00:15:27.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20076..20102) }
[2024-05-09T00:15:27.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20567..20591) }
[2024-05-09T00:15:27.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21050..21061) }
[2024-05-09T00:15:27.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21321..21335) }
[2024-05-09T00:15:27.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21471..21480) }
[2024-05-09T00:15:27.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21647..21658) }
[2024-05-09T00:15:27.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21959..21970) }
[2024-05-09T00:17:31.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T00:17:31.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T00:17:31.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T00:17:31.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T00:17:31.606Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T00:17:32.188Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T00:17:32.189Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T00:17:32.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T00:17:33.355Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T00:17:33.356Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T00:17:33.357Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:17:33.357Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T00:17:33.357Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T00:17:34.739Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use uuid::Uuid;
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
warning: unused import: `flutter_rust_bridge::frb`
 --> src/api/model.rs:2:5
  |
2 | use flutter_rust_bridge::frb;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.73s


[2024-05-09T00:17:34.750Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T00:17:34.750Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:17:34.753Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T00:17:34.754Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:17:34.782Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T00:17:35.358Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:17:35.358Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T00:17:35.358Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T00:17:35.359Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T00:17:35.359Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T00:17:35.359Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:17:35.361Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T00:17:35.386Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:17:35.386Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T00:17:35.386Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T00:17:35.387Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:17:35.387Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22200..22208) }
[2024-05-09T00:17:35.388Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(23648..23652) }
[2024-05-09T00:17:35.388Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:17:35.389Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:17:35.389Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:17:35.391Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:17:35.391Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(26880..26890) }
[2024-05-09T00:17:35.391Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28011..28027) }
[2024-05-09T00:17:35.391Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29106..29117) }
[2024-05-09T00:17:35.393Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:17:35.394Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T00:17:35.394Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T00:17:35.395Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:17:35.395Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:17:35.398Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:17:35.399Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:17:35.406Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3944..3970) }
[2024-05-09T00:17:35.407Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4174..4198) }
[2024-05-09T00:17:35.407Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3182..3185) }
[2024-05-09T00:17:35.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3615..3629) }
[2024-05-09T00:17:35.408Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3715..3730) }
[2024-05-09T00:17:35.409Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3817..3829) }
[2024-05-09T00:17:35.409Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8238..8255) }
[2024-05-09T00:17:35.409Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8714..8736) }
[2024-05-09T00:17:35.410Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9065..9082) }
[2024-05-09T00:17:35.410Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9436..9453) }
[2024-05-09T00:17:35.411Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10227..10246) }
[2024-05-09T00:17:35.411Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19714..19719) }
[2024-05-09T00:17:35.411Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(19943..19951) }
[2024-05-09T00:17:35.412Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20022..20048) }
[2024-05-09T00:17:35.412Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20513..20537) }
[2024-05-09T00:17:35.413Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(20996..21007) }
[2024-05-09T00:17:35.413Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21267..21281) }
[2024-05-09T00:17:35.413Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21417..21426) }
[2024-05-09T00:17:35.414Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21593..21604) }
[2024-05-09T00:17:35.414Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21905..21916) }
[2024-05-09T00:18:12.345Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T00:18:12.347Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T00:18:12.348Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T00:18:12.350Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T00:18:12.352Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T00:18:13.242Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T00:18:13.243Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T00:18:13.247Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T00:18:15.180Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T00:18:15.181Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T00:18:15.182Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:18:15.182Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T00:18:15.182Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T00:18:17.310Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.85s


[2024-05-09T00:18:17.336Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T00:18:17.339Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:18:17.345Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T00:18:17.351Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:18:17.440Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T00:18:18.387Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:18:18.390Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T00:18:18.391Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T00:18:18.392Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T00:18:18.393Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T00:18:18.394Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:18:18.397Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T00:18:18.422Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:18:18.423Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T00:18:18.424Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T00:18:18.425Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:18:18.427Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(22269..22277) }
[2024-05-09T00:18:18.428Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(23740..23744) }
[2024-05-09T00:18:18.429Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:18:18.430Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:18:18.431Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:18:18.433Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:18:18.434Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(26972..26982) }
[2024-05-09T00:18:18.435Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(28103..28119) }
[2024-05-09T00:18:18.436Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(29198..29209) }
[2024-05-09T00:18:18.438Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:18:18.440Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T00:18:18.441Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T00:18:18.442Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:18:18.443Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:18:18.446Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:18:18.448Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:18:18.455Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3990..4016) }
[2024-05-09T00:18:18.456Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.458Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.459Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.459Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4220..4244) }
[2024-05-09T00:18:18.461Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.461Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T00:18:18.462Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.463Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.464Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3228..3231) }
[2024-05-09T00:18:18.465Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.469Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T00:18:18.470Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.471Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.471Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3661..3675) }
[2024-05-09T00:18:18.473Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.474Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3761..3776) }
[2024-05-09T00:18:18.475Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.495Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3863..3875) }
[2024-05-09T00:18:18.496Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.496Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T00:18:18.497Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8284..8301) }
[2024-05-09T00:18:18.497Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T00:18:18.497Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8760..8782) }
[2024-05-09T00:18:18.498Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.498Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9111..9128) }
[2024-05-09T00:18:18.499Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.499Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9482..9499) }
[2024-05-09T00:18:18.500Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T00:18:18.501Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10273..10292) }
[2024-05-09T00:18:18.502Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19760..19765) }
[2024-05-09T00:18:18.503Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(19989..19997) }
[2024-05-09T00:18:18.505Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20068..20094) }
[2024-05-09T00:18:18.506Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.507Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20559..20583) }
[2024-05-09T00:18:18.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T00:18:18.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.511Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21042..21053) }
[2024-05-09T00:18:18.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T00:18:18.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21313..21327) }
[2024-05-09T00:18:18.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.569Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21463..21472) }
[2024-05-09T00:18:18.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T00:18:18.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21639..21650) }
[2024-05-09T00:18:18.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T00:18:18.572Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21951..21962) }
[2024-05-09T00:18:18.687Z [32mINFO[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/polisher/add_mod_to_lib.rs:49] Inject `mod frb_generated;` into "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs"
[2024-05-09T00:18:18.688Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_dart.rs:13] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/api/model_persistence.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-09T00:18:18.689Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-09T00:18:26.506Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model_persistence.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 6 files (6 changed) in 5.74 seconds.
 stderr=
[2024-05-09T00:18:26.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-09T00:18:26.511Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-09T00:18:27.053Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-09T00:18:27.057Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T00:18:27.061Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T00:18:27.066Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T00:49:25.226Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T00:49:25.239Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T00:49:25.252Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T00:49:25.299Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T00:49:25.310Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T00:49:27.807Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T00:49:27.812Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T00:49:27.819Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T00:49:30.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T00:49:30.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T00:49:30.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:49:30.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T00:49:30.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T00:49:36.179Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
mod frb_generated {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        1275822306;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Task_mark_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_mark_incomplete_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_mark_incomplete",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::mark_incomplete(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            3 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            7 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            11 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            8 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            9 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            10 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            16 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            20 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            14 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            15 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            13 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            17 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            18 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            19 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            4 => wire_Task_mark_completed_impl(ptr, rust_vec_len, data_len),
            5 => wire_Task_mark_incomplete_impl(ptr, rust_vec_len, data_len),
            6 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            12 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
pub mod api {
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(non_opaque)]"###]
        pub struct Task {
            pub id: Uuid,
            pub title: String,
            pub subtitle: String,
            pub created_at: DateTime<Local>,
            pub is_completed: bool,
            pub priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_completed(&mut self) { self.is_completed = true; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn mark_incomplete(&mut self) { self.is_completed = false; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
   --> src/frb_generated.rs:536:1
    |
221 | / fn wire_filter_tasks_by_completion_impl(
222 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
223 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
224 | |     rust_vec_len_: i32,
...   |
255 | |     )
256 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
536 | / fn wire_filter_tasks_by_completion_impl(
537 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
538 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
539 | |     rust_vec_len_: i32,
...   |
568 | |     )
569 | | }
    | |_^ `wire_filter_tasks_by_completion_impl` redefined here
    |
    = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
   --> src/frb_generated.rs:570:1
    |
257 | / fn wire_filter_tasks_by_priority_impl(
258 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
259 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
260 | |     rust_vec_len_: i32,
...   |
291 | |     )
292 | | }
    | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
570 | / fn wire_filter_tasks_by_priority_impl(
571 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
572 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
573 | |     rust_vec_len_: i32,
...   |
600 | |     )
601 | | }
    | |_^ `wire_filter_tasks_by_priority_impl` redefined here
    |
    = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
For more information about this error, try `rustc --explain E0428`.


[2024-05-09T00:49:36.450Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T00:49:36.451Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:49:36.471Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T00:49:36.472Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:49:36.588Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T00:49:38.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:49:38.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-09T00:49:38.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-09T00:49:38.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-09T00:49:38.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-09T00:49:38.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:49:38.577Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-09T00:49:38.763Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T00:49:38.764Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(23063..23073) }
[2024-05-09T00:49:38.764Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(23737..23743) }
[2024-05-09T00:49:38.766Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(27563..27571) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(27574..27579) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-09T00:49:38.766Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(27594..27604) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(27605..27606) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(27610..27613) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(27615..27619) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(27621..27627) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(27628..27643) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(27644..27645) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:49:38.767Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(27664..27679) }
[2024-05-09T00:49:38.768Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(27972..27983) }
[2024-05-09T00:49:38.769Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(28556..28571) }
[2024-05-09T00:49:38.770Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(28980..29021) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(29035..29048) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(29049..29050) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(29064..29083) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(29085..29098) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(29100..29114) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(29115..29116) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(29118..29124) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(29125..29126) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:49:38.770Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(29134..29246) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(29260..29270) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(29271..29272) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(29276..29289) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(29290..29291) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:49:38.771Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(29348..29393) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(29407..29424) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(29425..29426) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(29440..29459) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(29461..29474) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(29476..29494) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(29495..29496) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(29506..29512) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(29515..29534) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(29536..29549) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(29551..29570) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(29571..29572) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:49:38.790Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(29581..29647) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(29652..29732) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(29737..29783) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(29797..29811) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(29812..29813) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(29817..29834) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(29835..29836) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T00:49:38.790Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(31492..31502) }
[2024-05-09T00:49:38.791Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(34360..34387) }
[2024-05-09T00:49:38.791Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-09T00:49:38.791Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-09T00:49:38.791Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T00:49:38.792Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T00:49:38.799Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T00:49:38.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T00:49:38.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T00:49:38.844Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T00:49:38.844Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T00:49:38.845Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T00:49:38.846Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T00:49:38.889Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:49:38.890Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T00:49:38.891Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T00:49:38.892Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:49:38.893Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(97611..97619) }
[2024-05-09T00:49:38.894Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(99086..99090) }
[2024-05-09T00:49:38.899Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T00:49:38.902Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:49:38.903Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T00:49:38.909Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:49:38.910Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(102318..102328) }
[2024-05-09T00:49:38.910Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(103449..103465) }
[2024-05-09T00:49:38.911Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(104544..104555) }
[2024-05-09T00:49:38.913Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T00:49:38.916Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T00:49:38.917Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T00:49:38.918Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:49:38.919Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T00:49:38.921Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T00:49:38.923Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T00:49:38.930Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(3998..4024) }
[2024-05-09T00:49:38.935Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(4228..4252) }
[2024-05-09T00:49:38.937Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3236..3239) }
[2024-05-09T00:49:38.941Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_completed, span: bytes(3669..3683) }
[2024-05-09T00:49:38.944Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: mark_incomplete, span: bytes(3769..3784) }
[2024-05-09T00:49:38.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(3871..3883) }
[2024-05-09T00:49:38.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(8292..8309) }
[2024-05-09T00:49:38.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(8768..8790) }
[2024-05-09T00:49:38.964Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(9119..9136) }
[2024-05-09T00:49:38.965Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(9490..9507) }
[2024-05-09T00:49:38.966Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(10281..10300) }
[2024-05-09T00:49:38.968Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(19768..19773) }
[2024-05-09T00:49:38.969Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(19997..20005) }
[2024-05-09T00:49:38.971Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(20076..20102) }
[2024-05-09T00:49:38.992Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(20567..20591) }
[2024-05-09T00:49:38.993Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(21050..21061) }
[2024-05-09T00:49:38.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(21321..21335) }
[2024-05-09T00:49:39.003Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(21471..21480) }
[2024-05-09T00:49:39.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(21647..21658) }
[2024-05-09T00:49:39.016Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(21959..21970) }
