[2024-05-24T05:18:13.537Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-24T05:18:13.537Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-24T05:18:13.537Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-24T05:18:13.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-24T05:18:13.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-24T05:18:14.199Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-24T05:18:14.200Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T05:18:14.205Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-24T05:18:14.966Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.0 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 5dcb86f68f (2 weeks ago) â€¢ 2024-05-09 07:39:20 -0500
Engine â€¢ revision f6344b75dc
Tools â€¢ Dart 3.4.0 â€¢ DevTools 2.34.3
 stderr=
[2024-05-24T05:18:14.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T05:18:14.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:18:14.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-24T05:18:14.967Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-24T05:18:16.781Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn from_string(value: String) -> Priority {
                match value.as_str() {
                    "Low" => Priority::Low,
                    "Normal" => Priority::Normal,
                    "High" => Priority::High,
                    _ => {
                        ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                    }
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn to_string(&self) -> String {
                match self {
                    Priority::Low => String::from("Low"),
                    Priority::Normal => String::from("Normal"),
                    Priority::High => String::from("High"),
                }
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone();
            let end_date = created_at + chrono::Duration::days(1);
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                    (false, true) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') AND is_completed = 1) ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        958064036;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_from_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_from_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_value = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::from_string(api_value))
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_to_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_to_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    false)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 =>
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref()),
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::to_string(&api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            27 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            6 =>
                wire__crate__api__model__Priority_from_string_impl(ptr,
                    rust_vec_len, data_len),
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Priority_to_string_impl(ptr,
                    rust_vec_len, data_len),
            15 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            19 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            17 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            16 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            14 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            18 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            30 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            34 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            35 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            26 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            31 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            32 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            28 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            29 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            33 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0425]: cannot find function `greet` in module `crate::api::simple`
   --> src/frb_generated.rs:860:57
    |
860 |                 Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
    |                                                         ^^^^^ not found in `crate::api::simple`
For more information about this error, try `rustc --explain E0425`.


[2024-05-24T05:18:17.082Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-24T05:18:17.090Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:18:17.094Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-24T05:18:17.094Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:18:17.097Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-24T05:18:17.098Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:18:17.155Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-24T05:18:18.109Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T05:18:18.110Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-24T05:18:18.110Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-24T05:18:18.110Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-24T05:18:18.111Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T05:18:18.111Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:18:18.113Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-24T05:18:18.144Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T05:18:18.145Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-24T05:18:18.145Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-24T05:18:18.146Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T05:18:18.147Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(56214..56222) }
[2024-05-24T05:18:18.147Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(59161..59165) }
[2024-05-24T05:18:18.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T05:18:18.149Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-24T05:18:18.149Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-24T05:18:18.150Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T05:18:18.151Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(63573..63583) }
[2024-05-24T05:18:18.151Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(64704..64720) }
[2024-05-24T05:18:18.151Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(65799..65810) }
[2024-05-24T05:18:18.153Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T05:18:18.154Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-24T05:18:18.155Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-24T05:18:18.155Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T05:18:18.156Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T05:18:18.159Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T05:18:18.160Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-24T05:18:18.160Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-24T05:18:18.161Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-24T05:18:18.161Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-24T05:18:18.161Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:18:18.165Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-24T05:18:18.264Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T05:18:18.264Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(84585..84595) }
[2024-05-24T05:18:18.265Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(85259..85265) }
[2024-05-24T05:18:18.265Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(89085..89093) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(89096..89101) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-24T05:18:18.266Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(89116..89126) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(89127..89128) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(89132..89135) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(89137..89141) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(89143..89149) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(89150..89165) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(89166..89167) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:18:18.267Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(89186..89201) }
[2024-05-24T05:18:18.267Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(89494..89505) }
[2024-05-24T05:18:18.267Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(90078..90093) }
[2024-05-24T05:18:18.268Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90502..90543) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(90557..90570) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90571..90572) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(90586..90605) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(90607..90620) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(90622..90636) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90637..90638) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(90640..90646) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90647..90648) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:18:18.268Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90656..90768) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(90782..90792) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90793..90794) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(90798..90811) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(90812..90813) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:18:18.269Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(90870..90915) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(90929..90946) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(90947..90948) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(90962..90981) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(90983..90996) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(90998..91016) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91017..91018) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(91028..91034) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(91037..91056) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(91058..91071) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(91073..91092) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91093..91094) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:18:18.270Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91103..91169) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91174..91254) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91259..91305) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(91319..91333) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(91334..91335) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(91339..91356) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91357..91358) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:18:18.321Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(92624..92634) }
[2024-05-24T05:18:18.326Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(95491..95518) }
[2024-05-24T05:18:18.331Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-24T05:18:18.335Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-24T05:18:18.339Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T05:18:18.342Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T05:18:18.360Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T05:18:18.364Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T05:18:18.423Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(34628..34654) }
[2024-05-24T05:18:18.424Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(34881..34905) }
[2024-05-24T05:18:18.425Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(29644..29656) }
[2024-05-24T05:18:18.431Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.439Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.439Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(29733..29748) }
[2024-05-24T05:18:18.440Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.440Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.440Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(29828..29841) }
[2024-05-24T05:18:18.441Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.441Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.442Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(29919..29930) }
[2024-05-24T05:18:18.455Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.456Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.470Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: to_string, span: bytes(30370..30379) }
[2024-05-24T05:18:18.471Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.472Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.473Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(32776..32779) }
[2024-05-24T05:18:18.475Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.476Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.477Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.478Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(33209..33215) }
[2024-05-24T05:18:18.479Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.480Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(33299..33308) }
[2024-05-24T05:18:18.481Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(33403..33412) }
[2024-05-24T05:18:18.488Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.561Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(33501..33513) }
[2024-05-24T05:18:18.565Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.565Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(33645..33657) }
[2024-05-24T05:18:18.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(33749..33763) }
[2024-05-24T05:18:18.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(33910..33924) }
[2024-05-24T05:18:18.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.572Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(34055..34068) }
[2024-05-24T05:18:18.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(34210..34222) }
[2024-05-24T05:18:18.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(34344..34356) }
[2024-05-24T05:18:18.577Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.579Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(34490..34502) }
[2024-05-24T05:18:18.581Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.589Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.590Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(38968..38985) }
[2024-05-24T05:18:18.591Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(39466..39488) }
[2024-05-24T05:18:18.592Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(40001..40018) }
[2024-05-24T05:18:18.593Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(40395..40412) }
[2024-05-24T05:18:18.594Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(41208..41227) }
[2024-05-24T05:18:18.596Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(41596..41616) }
[2024-05-24T05:18:18.597Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(53083..53091) }
[2024-05-24T05:18:18.598Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(53231..53250) }
[2024-05-24T05:18:18.599Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.600Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(53761..53778) }
[2024-05-24T05:18:18.601Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.602Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.603Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(54283..54294) }
[2024-05-24T05:18:18.604Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.605Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(54575..54589) }
[2024-05-24T05:18:18.610Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.611Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(54917..54926) }
[2024-05-24T05:18:18.612Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:18:18.613Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(55114..55125) }
[2024-05-24T05:18:18.615Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:18:18.682Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(55447..55458) }
[2024-05-24T05:18:18.682Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(55626..55638) }
[2024-05-24T05:18:18.974Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/simple.dart", "lib/src/rust/api/model.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-24T05:18:18.974Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-24T05:18:24.672Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 3.64 seconds.
 stderr=
[2024-05-24T05:18:24.673Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-24T05:18:24.674Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-24T05:18:25.076Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-24T05:18:25.078Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T05:18:25.082Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T05:18:25.084Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T05:21:27.485Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-24T05:21:27.485Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-24T05:21:27.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-24T05:21:27.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-24T05:21:27.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-24T05:21:27.975Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-24T05:21:27.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T05:21:27.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-24T05:21:28.866Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.0 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 5dcb86f68f (2 weeks ago) â€¢ 2024-05-09 07:39:20 -0500
Engine â€¢ revision f6344b75dc
Tools â€¢ Dart 3.4.0 â€¢ DevTools 2.34.3
 stderr=
[2024-05-24T05:21:28.867Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T05:21:28.867Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:21:28.867Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-24T05:21:28.867Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-24T05:21:30.120Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn from_string(value: String) -> Priority {
                match value.as_str() {
                    "Low" => Priority::Low,
                    "Normal" => Priority::Normal,
                    "High" => Priority::High,
                    _ => {
                        ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                    }
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn to_string(&self) -> String {
                match self {
                    Priority::Low => String::from("Low"),
                    Priority::Normal => String::from("Normal"),
                    Priority::High => String::from("High"),
                }
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone();
            let end_date = created_at + chrono::Duration::days(1);
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                    (false, true) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') AND is_completed = 1) ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -2073971653;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_from_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_from_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_value = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::from_string(api_value))
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_to_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_to_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    false)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 =>
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref()),
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::to_string(&api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            26 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            27 =>
                wire__crate__api__simple__tasks_by_completion_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            6 =>
                wire__crate__api__model__Priority_from_string_impl(ptr,
                    rust_vec_len, data_len),
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Priority_to_string_impl(ptr,
                    rust_vec_len, data_len),
            15 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            19 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            17 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            16 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            14 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            18 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            29 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            33 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            34 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            30 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            31 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            28 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            32 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.81s


[2024-05-24T05:21:30.233Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-24T05:21:30.233Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:21:30.236Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-24T05:21:30.236Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:21:30.239Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-24T05:21:30.239Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:21:30.273Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-24T05:21:30.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T05:21:30.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-24T05:21:30.883Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-24T05:21:30.883Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-24T05:21:30.883Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T05:21:30.883Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:21:30.885Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-24T05:21:30.909Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T05:21:30.909Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-24T05:21:30.910Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-24T05:21:30.910Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T05:21:30.911Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(56672..56680) }
[2024-05-24T05:21:30.911Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(59619..59623) }
[2024-05-24T05:21:30.912Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T05:21:30.912Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-24T05:21:30.913Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-24T05:21:30.914Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T05:21:30.914Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(64031..64041) }
[2024-05-24T05:21:30.915Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(65162..65178) }
[2024-05-24T05:21:30.915Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(66257..66268) }
[2024-05-24T05:21:30.917Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T05:21:30.918Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-24T05:21:30.919Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-24T05:21:30.919Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T05:21:30.920Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T05:21:30.923Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T05:21:30.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-24T05:21:30.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-24T05:21:30.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-24T05:21:30.925Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-24T05:21:30.925Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:21:30.928Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-24T05:21:31.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T05:21:31.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(85272..85282) }
[2024-05-24T05:21:31.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(85946..85952) }
[2024-05-24T05:21:31.001Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(89772..89780) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(89783..89788) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-24T05:21:31.002Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(89803..89813) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(89814..89815) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(89819..89822) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(89824..89828) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(89830..89836) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(89837..89852) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(89853..89854) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:21:31.002Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(89873..89888) }
[2024-05-24T05:21:31.002Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(90181..90192) }
[2024-05-24T05:21:31.003Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(90765..90780) }
[2024-05-24T05:21:31.003Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91189..91230) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(91244..91257) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(91258..91259) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(91273..91292) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(91294..91307) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(91309..91323) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91324..91325) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(91327..91333) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91334..91335) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:21:31.003Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91343..91455) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(91469..91479) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(91480..91481) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(91485..91498) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91499..91500) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:21:31.003Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91557..91602) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(91616..91633) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(91634..91635) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(91649..91668) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(91670..91683) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(91685..91703) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91704..91705) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(91715..91721) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(91724..91743) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(91745..91758) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(91760..91779) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91780..91781) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:21:31.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91790..91856) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91861..91941) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91946..91992) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(92006..92020) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(92021..92022) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(92026..92043) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(92044..92045) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:21:31.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(93311..93321) }
[2024-05-24T05:21:31.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(96180..96207) }
[2024-05-24T05:21:31.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-24T05:21:31.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-24T05:21:31.005Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T05:21:31.005Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T05:21:31.011Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T05:21:31.016Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T05:21:31.030Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(34857..34883) }
[2024-05-24T05:21:31.030Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(35110..35134) }
[2024-05-24T05:21:31.031Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(29873..29885) }
[2024-05-24T05:21:31.031Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.033Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.034Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(29962..29977) }
[2024-05-24T05:21:31.034Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.034Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.035Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(30057..30070) }
[2024-05-24T05:21:31.035Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.035Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.036Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(30148..30159) }
[2024-05-24T05:21:31.036Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.036Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.037Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: to_string, span: bytes(30599..30608) }
[2024-05-24T05:21:31.037Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.037Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.038Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(33005..33008) }
[2024-05-24T05:21:31.038Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.039Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.039Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.039Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(33438..33444) }
[2024-05-24T05:21:31.039Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.040Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(33528..33537) }
[2024-05-24T05:21:31.040Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.059Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(33632..33641) }
[2024-05-24T05:21:31.060Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.060Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(33730..33742) }
[2024-05-24T05:21:31.061Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.062Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(33874..33886) }
[2024-05-24T05:21:31.064Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.064Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(33978..33992) }
[2024-05-24T05:21:31.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(34139..34153) }
[2024-05-24T05:21:31.066Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.067Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(34284..34297) }
[2024-05-24T05:21:31.067Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.068Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(34439..34451) }
[2024-05-24T05:21:31.069Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.069Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(34573..34585) }
[2024-05-24T05:21:31.070Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.070Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.071Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(34719..34731) }
[2024-05-24T05:21:31.071Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.072Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.072Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(39197..39214) }
[2024-05-24T05:21:31.072Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(39695..39717) }
[2024-05-24T05:21:31.073Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(40230..40247) }
[2024-05-24T05:21:31.073Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(40624..40641) }
[2024-05-24T05:21:31.074Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(41437..41456) }
[2024-05-24T05:21:31.074Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(41825..41845) }
[2024-05-24T05:21:31.074Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(53312..53317) }
[2024-05-24T05:21:31.075Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(53541..53549) }
[2024-05-24T05:21:31.075Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(53689..53708) }
[2024-05-24T05:21:31.075Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.076Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(54219..54236) }
[2024-05-24T05:21:31.076Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.077Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.077Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(54741..54752) }
[2024-05-24T05:21:31.077Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.078Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(55033..55047) }
[2024-05-24T05:21:31.078Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.079Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(55375..55384) }
[2024-05-24T05:21:31.079Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:21:31.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(55572..55583) }
[2024-05-24T05:21:31.080Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:21:31.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(55905..55916) }
[2024-05-24T05:21:31.081Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(56084..56096) }
[2024-05-24T05:21:31.166Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-24T05:21:31.167Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-24T05:21:36.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 4.07 seconds.
 stderr=
[2024-05-24T05:21:36.149Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-24T05:21:36.150Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-24T05:21:36.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-24T05:21:36.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T05:21:36.633Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T05:21:36.634Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T05:52:54.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-24T05:52:54.707Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-24T05:52:54.707Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-24T05:52:54.707Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-24T05:52:54.707Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-24T05:52:55.415Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-24T05:52:55.426Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T05:52:55.483Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-24T05:52:56.250Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.0 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 5dcb86f68f (2 weeks ago) â€¢ 2024-05-09 07:39:20 -0500
Engine â€¢ revision f6344b75dc
Tools â€¢ Dart 3.4.0 â€¢ DevTools 2.34.3
 stderr=
[2024-05-24T05:52:56.251Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T05:52:56.252Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:52:56.252Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-24T05:52:56.252Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-24T05:52:57.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn from_string(value: String) -> Priority {
                match value.as_str() {
                    "Low" => Priority::Low,
                    "Normal" => Priority::Normal,
                    "High" => Priority::High,
                    _ => {
                        ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                    }
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn to_string(&self) -> String {
                match self {
                    Priority::Low => String::from("Low"),
                    Priority::Normal => String::from("Normal"),
                    Priority::High => String::from("High"),
                }
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone();
            let end_date = created_at + chrono::Duration::days(1);
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                    (false, true) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') AND is_completed = 1) ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        958064036;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_from_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_from_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_value = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::from_string(api_value))
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_to_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_to_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    false)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 =>
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref()),
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::to_string(&api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            27 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            28 =>
                wire__crate__api__simple__tasks_by_completion_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            6 =>
                wire__crate__api__model__Priority_from_string_impl(ptr,
                    rust_vec_len, data_len),
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Priority_to_string_impl(ptr,
                    rust_vec_len, data_len),
            15 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            19 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            17 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            16 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            14 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            18 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            30 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            34 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            35 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            26 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            31 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            32 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            29 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            33 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.70s


[2024-05-24T05:52:57.740Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-24T05:52:57.741Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:52:57.745Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-24T05:52:57.745Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:52:57.749Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-24T05:52:57.749Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:52:57.780Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-24T05:52:58.424Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T05:52:58.426Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-24T05:52:58.427Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-24T05:52:58.428Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-24T05:52:58.429Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T05:52:58.430Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:52:58.432Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-24T05:52:58.481Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T05:52:58.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-24T05:52:58.483Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-24T05:52:58.484Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T05:52:58.485Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(56714..56722) }
[2024-05-24T05:52:58.486Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(59661..59665) }
[2024-05-24T05:52:58.487Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T05:52:58.489Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-24T05:52:58.489Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-24T05:52:58.492Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T05:52:58.493Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(64073..64083) }
[2024-05-24T05:52:58.494Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(65204..65220) }
[2024-05-24T05:52:58.494Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(66299..66310) }
[2024-05-24T05:52:58.497Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T05:52:58.499Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-24T05:52:58.500Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-24T05:52:58.506Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T05:52:58.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T05:52:58.513Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T05:52:58.516Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-24T05:52:58.517Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-24T05:52:58.518Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-24T05:52:58.519Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-24T05:52:58.519Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T05:52:58.525Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-24T05:52:58.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T05:52:58.623Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(85335..85345) }
[2024-05-24T05:52:58.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(86009..86015) }
[2024-05-24T05:52:58.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(89835..89843) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(89846..89851) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-24T05:52:58.624Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(89866..89876) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(89877..89878) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(89882..89885) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(89887..89891) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(89893..89899) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(89900..89915) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(89916..89917) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:52:58.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(89936..89951) }
[2024-05-24T05:52:58.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(90244..90255) }
[2024-05-24T05:52:58.625Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(90828..90843) }
[2024-05-24T05:52:58.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91252..91293) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(91307..91320) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(91321..91322) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(91336..91355) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(91357..91370) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(91372..91386) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91387..91388) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(91390..91396) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91397..91398) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:52:58.626Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91406..91518) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(91532..91542) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(91543..91544) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(91548..91561) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91562..91563) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:52:58.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91620..91665) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(91679..91696) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(91697..91698) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(91712..91731) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(91733..91746) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(91748..91766) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91767..91768) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(91778..91784) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(91787..91806) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(91808..91821) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(91823..91842) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(91843..91844) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:52:58.627Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91853..91919) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(91924..92004) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(92009..92055) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(92069..92083) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(92084..92085) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(92089..92106) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(92107..92108) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T05:52:58.644Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(93374..93384) }
[2024-05-24T05:52:58.645Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(96241..96268) }
[2024-05-24T05:52:58.646Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-24T05:52:58.647Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-24T05:52:58.647Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T05:52:58.648Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T05:52:58.662Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T05:52:58.667Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T05:52:58.679Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(34878..34904) }
[2024-05-24T05:52:58.680Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(35131..35155) }
[2024-05-24T05:52:58.680Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(29894..29906) }
[2024-05-24T05:52:58.681Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.683Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.684Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(29983..29998) }
[2024-05-24T05:52:58.684Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.684Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(30078..30091) }
[2024-05-24T05:52:58.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.686Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(30169..30180) }
[2024-05-24T05:52:58.688Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.688Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.689Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: to_string, span: bytes(30620..30629) }
[2024-05-24T05:52:58.691Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.692Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.693Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(33026..33029) }
[2024-05-24T05:52:58.695Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.696Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.696Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.697Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(33459..33465) }
[2024-05-24T05:52:58.698Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.698Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(33549..33558) }
[2024-05-24T05:52:58.699Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.699Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(33653..33662) }
[2024-05-24T05:52:58.700Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.700Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(33751..33763) }
[2024-05-24T05:52:58.701Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.701Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(33895..33907) }
[2024-05-24T05:52:58.701Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.702Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(33999..34013) }
[2024-05-24T05:52:58.702Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.703Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(34160..34174) }
[2024-05-24T05:52:58.703Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(34305..34318) }
[2024-05-24T05:52:58.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(34460..34472) }
[2024-05-24T05:52:58.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(34594..34606) }
[2024-05-24T05:52:58.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.707Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.707Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(34740..34752) }
[2024-05-24T05:52:58.708Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.708Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.708Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(39218..39235) }
[2024-05-24T05:52:58.709Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(39716..39738) }
[2024-05-24T05:52:58.709Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(40251..40268) }
[2024-05-24T05:52:58.710Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(40645..40662) }
[2024-05-24T05:52:58.710Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(41458..41477) }
[2024-05-24T05:52:58.711Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(41846..41866) }
[2024-05-24T05:52:58.711Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(53333..53338) }
[2024-05-24T05:52:58.711Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(53562..53570) }
[2024-05-24T05:52:58.712Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(53731..53750) }
[2024-05-24T05:52:58.712Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(54261..54278) }
[2024-05-24T05:52:58.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.725Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.725Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(54783..54794) }
[2024-05-24T05:52:58.726Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.726Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(55075..55089) }
[2024-05-24T05:52:58.727Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.727Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(55417..55426) }
[2024-05-24T05:52:58.728Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T05:52:58.728Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(55614..55625) }
[2024-05-24T05:52:58.728Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T05:52:58.729Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(55947..55958) }
[2024-05-24T05:52:58.729Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(56126..56138) }
[2024-05-24T05:52:58.812Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/simple.dart", "lib/src/rust/api/model.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-24T05:52:58.813Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-24T05:53:04.908Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 4.67 seconds.
 stderr=
[2024-05-24T05:53:04.910Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-24T05:53:04.910Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-24T05:53:05.347Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-24T05:53:05.349Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T05:53:05.354Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T05:53:05.356Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T07:19:44.441Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-24T07:19:44.444Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-24T07:19:44.444Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-24T07:19:44.444Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-24T07:19:44.445Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-24T07:19:50.343Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-24T07:19:50.344Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T07:19:50.349Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-24T07:19:51.182Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.1 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision a14f74ff3a (2 days ago) â€¢ 2024-05-22 11:08:21 -0500
Engine â€¢ revision 55eae6864b
Tools â€¢ Dart 3.4.1 â€¢ DevTools 2.34.3
 stderr=
[2024-05-24T07:19:51.183Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T07:19:51.183Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:19:51.183Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-24T07:19:51.184Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-24T07:21:22.195Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn from_string(value: String) -> Priority {
                match value.as_str() {
                    "Low" => Priority::Low,
                    "Normal" => Priority::Normal,
                    "High" => Priority::High,
                    _ => {
                        ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                    }
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn to_string(&self) -> String {
                match self {
                    Priority::Low => String::from("Low"),
                    Priority::Normal => String::from("Normal"),
                    Priority::High => String::from("High"),
                }
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        use std::io::{Error, ErrorKind};
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        match get_sqlite_path() {
                            Ok(path) =>
                                CachedConnection::new(&path).expect("Failed to create connection"),
                            Err(err) => {
                                ::core::panicking::panic_fmt(format_args!("Failed to create connection: {0}",
                                        err));
                            }
                        }
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone();
            let end_date = created_at + chrono::Duration::days(1);
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                    (false, true) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') AND is_completed = 1) ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
        fn get_sqlite_path() -> Result<String, Error> {
            let data_dir =
                dirs::data_dir().ok_or(Error::new(ErrorKind::NotFound,
                            "Failed to locate data directory"))?;
            let path =
                match false {
                    true =>
                        data_dir.join("rust_lib_flutter_rust_ndk_app").join("database.sqlite"),
                    false => {
                        #[cfg(target_os = "linux")]
                        let path =
                            data_dir.join("rust_lib_flutter_rust_ndk_app").join("database.sqlite");
                        path
                    }
                };
            if !path.exists() {
                    std::fs::create_dir_all(path.parent().unwrap())?;
                }
            Ok(path.to_string_lossy().to_string())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        958064036;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_from_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_from_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_value = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::from_string(api_value))
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_to_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_to_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    false)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 =>
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref()),
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::to_string(&api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            27 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            6 =>
                wire__crate__api__model__Priority_from_string_impl(ptr,
                    rust_vec_len, data_len),
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Priority_to_string_impl(ptr,
                    rust_vec_len, data_len),
            15 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            19 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            17 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            16 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            14 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            18 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            30 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            34 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            35 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            26 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            31 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            32 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            28 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            29 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            33 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=   Compiling libc v0.2.150
   Compiling proc-macro2 v1.0.70
   Compiling unicode-ident v1.0.12
   Compiling autocfg v1.1.0
   Compiling futures-core v0.3.29
   Compiling futures-channel v0.3.29
   Compiling version_check v0.9.4
   Compiling futures-task v0.3.29
   Compiling futures-util v0.3.29
   Compiling pkg-config v0.3.30
   Compiling anyhow v1.0.75
   Compiling vcpkg v0.2.15
   Compiling ahash v0.8.11
   Compiling slab v0.4.9
   Compiling quote v1.0.33
   Compiling syn v2.0.39
   Compiling num-traits v0.2.19
   Compiling build-target v0.4.0
   Compiling cc v1.0.83
   Compiling serde v1.0.193
    Checking num_cpus v1.16.0
    Checking hashbrown v0.14.5
    Checking option-ext v0.2.0
   Compiling hex v0.4.3
   Compiling flutter_rust_bridge v2.0.0-dev.35
    Checking dirs-sys v0.4.1
    Checking tokio v1.34.0
    Checking threadpool v1.8.1
    Checking getrandom v0.2.14
    Checking dirs v5.0.1
    Checking hashlink v0.9.0
   Compiling backtrace v0.3.69
   Compiling libsqlite3-sys v0.28.0
   Compiling dart-sys-fork v4.1.1
    Checking chrono v0.4.38
    Checking allo-isolate v0.1.24
   Compiling futures-macro v0.3.29
   Compiling serde_derive v1.0.193
   Compiling delegate-attr v0.3.0
   Compiling flutter_rust_bridge_macros v2.0.0-dev.35
    Checking futures-executor v0.3.29
    Checking futures v0.3.29
    Checking uuid v1.8.0
    Checking rusqlite v0.31.0
    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1m 30s


[2024-05-24T07:21:22.326Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-24T07:21:22.326Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:21:22.330Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-24T07:21:22.331Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:21:22.335Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-24T07:21:22.336Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:21:22.371Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-24T07:21:22.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T07:21:22.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-24T07:21:22.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-24T07:21:22.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-24T07:21:22.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T07:21:22.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:21:22.998Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-24T07:21:23.029Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T07:21:23.030Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-24T07:21:23.030Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-24T07:21:23.031Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T07:21:23.031Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(59090..59098) }
[2024-05-24T07:21:23.032Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(62037..62041) }
[2024-05-24T07:21:23.033Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T07:21:23.033Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-24T07:21:23.034Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-24T07:21:23.035Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T07:21:23.036Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(66490..66500) }
[2024-05-24T07:21:23.036Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(67902..67918) }
[2024-05-24T07:21:23.036Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(68997..69008) }
[2024-05-24T07:21:23.039Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T07:21:23.039Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-24T07:21:23.040Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-24T07:21:23.041Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T07:21:23.041Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T07:21:23.044Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T07:21:23.045Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-24T07:21:23.045Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-24T07:21:23.046Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-24T07:21:23.046Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-24T07:21:23.046Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:21:23.049Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-24T07:21:23.125Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T07:21:23.127Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(88899..88909) }
[2024-05-24T07:21:23.133Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(89573..89579) }
[2024-05-24T07:21:23.133Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(93399..93407) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(93410..93415) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-24T07:21:23.134Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(93430..93440) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(93441..93442) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(93446..93449) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(93451..93455) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(93457..93463) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(93464..93479) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(93480..93481) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:21:23.134Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(93500..93515) }
[2024-05-24T07:21:23.134Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(93808..93819) }
[2024-05-24T07:21:23.134Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(94392..94407) }
[2024-05-24T07:21:23.135Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(94816..94857) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(94871..94884) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(94885..94886) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(94900..94919) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(94921..94934) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(94936..94950) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(94951..94952) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(94954..94960) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(94961..94962) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:21:23.135Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(94970..95082) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(95096..95106) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(95107..95108) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(95112..95125) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95126..95127) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:21:23.136Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95184..95229) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(95243..95260) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(95261..95262) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(95276..95295) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(95297..95310) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(95312..95330) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95331..95332) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(95342..95348) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(95351..95370) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(95372..95385) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(95387..95406) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95407..95408) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:21:23.136Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95417..95483) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95488..95568) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95573..95619) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(95633..95647) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(95648..95649) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(95653..95670) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95671..95672) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:21:23.157Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(96938..96948) }
[2024-05-24T07:21:23.157Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(99805..99832) }
[2024-05-24T07:21:23.158Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-24T07:21:23.158Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-24T07:21:23.158Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T07:21:23.159Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T07:21:23.180Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T07:21:23.185Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T07:21:23.197Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(36066..36092) }
[2024-05-24T07:21:23.199Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(36319..36343) }
[2024-05-24T07:21:23.200Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(31082..31094) }
[2024-05-24T07:21:23.201Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.205Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.207Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(31171..31186) }
[2024-05-24T07:21:23.208Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.210Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.211Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(31266..31279) }
[2024-05-24T07:21:23.212Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.213Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.215Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(31357..31368) }
[2024-05-24T07:21:23.216Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.217Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.218Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: to_string, span: bytes(31808..31817) }
[2024-05-24T07:21:23.219Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.220Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.221Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(34214..34217) }
[2024-05-24T07:21:23.222Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.223Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.224Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.226Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(34647..34653) }
[2024-05-24T07:21:23.227Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.228Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(34737..34746) }
[2024-05-24T07:21:23.229Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.230Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(34841..34850) }
[2024-05-24T07:21:23.231Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.248Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(34939..34951) }
[2024-05-24T07:21:23.250Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.251Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(35083..35095) }
[2024-05-24T07:21:23.252Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.254Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(35187..35201) }
[2024-05-24T07:21:23.255Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.257Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(35348..35362) }
[2024-05-24T07:21:23.258Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.259Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(35493..35506) }
[2024-05-24T07:21:23.260Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.262Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(35648..35660) }
[2024-05-24T07:21:23.263Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.264Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(35782..35794) }
[2024-05-24T07:21:23.277Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.278Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.280Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(35928..35940) }
[2024-05-24T07:21:23.281Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.282Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.283Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(40728..40745) }
[2024-05-24T07:21:23.284Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(41226..41248) }
[2024-05-24T07:21:23.285Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(41761..41778) }
[2024-05-24T07:21:23.287Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(42155..42172) }
[2024-05-24T07:21:23.288Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(42968..42987) }
[2024-05-24T07:21:23.289Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(43356..43376) }
[2024-05-24T07:21:23.289Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(55709..55714) }
[2024-05-24T07:21:23.290Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(55938..55946) }
[2024-05-24T07:21:23.292Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(56107..56126) }
[2024-05-24T07:21:23.293Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.295Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(56637..56654) }
[2024-05-24T07:21:23.296Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.303Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.304Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(57159..57170) }
[2024-05-24T07:21:23.304Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.305Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(57451..57465) }
[2024-05-24T07:21:23.306Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.306Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(57793..57802) }
[2024-05-24T07:21:23.307Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:21:23.307Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(57990..58001) }
[2024-05-24T07:21:23.308Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:21:23.308Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(58323..58334) }
[2024-05-24T07:21:23.309Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(58502..58514) }
[2024-05-24T07:21:23.501Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/simple.dart", "lib/src/rust/api/model.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-24T07:21:23.502Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-24T07:21:28.776Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 3.88 seconds.
 stderr=
[2024-05-24T07:21:28.778Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-24T07:21:28.779Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-24T07:21:29.212Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-24T07:21:29.213Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T07:21:29.220Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T07:21:29.221Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T07:22:09.246Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-24T07:22:09.247Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-24T07:22:09.247Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-24T07:22:09.247Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-24T07:22:09.248Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-24T07:22:09.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-24T07:22:09.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T07:22:09.961Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-24T07:22:10.774Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.1 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision a14f74ff3a (2 days ago) â€¢ 2024-05-22 11:08:21 -0500
Engine â€¢ revision 55eae6864b
Tools â€¢ Dart 3.4.1 â€¢ DevTools 2.34.3
 stderr=
[2024-05-24T07:22:10.775Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T07:22:10.775Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:22:10.775Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-24T07:22:10.775Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-24T07:22:11.834Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn from_string(value: String) -> Priority {
                match value.as_str() {
                    "Low" => Priority::Low,
                    "Normal" => Priority::Normal,
                    "High" => Priority::High,
                    _ => {
                        ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                    }
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn to_string(&self) -> String {
                match self {
                    Priority::Low => String::from("Low"),
                    Priority::Normal => String::from("Normal"),
                    Priority::High => String::from("High"),
                }
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        use std::io::{Error, ErrorKind};
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        match get_sqlite_path() {
                            Ok(path) =>
                                CachedConnection::new(&path).expect("Failed to create connection"),
                            Err(err) => {
                                ::core::panicking::panic_fmt(format_args!("Failed to create connection: {0}",
                                        err));
                            }
                        }
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone();
            let end_date = created_at + chrono::Duration::days(1);
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                    (false, true) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') AND is_completed = 1) ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
        fn get_sqlite_path() -> Result<String, Error> {
            let data_dir =
                dirs::data_dir().ok_or(Error::new(ErrorKind::NotFound,
                            "Failed to locate data directory"))?;
            let path =
                match false {
                    true =>
                        data_dir.join("rust_lib_flutter_rust_ndk_app").join("database.sqlite"),
                    false => {
                        #[cfg(target_os = "linux")]
                        let path =
                            data_dir.join("rust_lib_flutter_rust_ndk_app").join("database.sqlite");
                        path
                    }
                };
            if !path.exists() {
                    std::fs::create_dir_all(path.parent().unwrap())?;
                }
            Ok(path.to_string_lossy().to_string())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        958064036;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_from_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_from_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_value = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::from_string(api_value))
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_to_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_to_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    false)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 =>
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref()),
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::to_string(&api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            27 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            6 =>
                wire__crate__api__model__Priority_from_string_impl(ptr,
                    rust_vec_len, data_len),
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Priority_to_string_impl(ptr,
                    rust_vec_len, data_len),
            15 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            19 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            17 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            16 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            14 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            18 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            30 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            34 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            35 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            26 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            31 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            32 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            28 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            29 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            33 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.61s


[2024-05-24T07:22:11.909Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-24T07:22:11.910Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:22:11.914Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-24T07:22:11.914Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:22:11.917Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-24T07:22:11.918Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:22:11.950Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-24T07:22:12.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T07:22:12.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-24T07:22:12.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-24T07:22:12.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-24T07:22:12.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T07:22:12.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:22:12.511Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-24T07:22:12.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T07:22:12.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-24T07:22:12.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-24T07:22:12.536Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T07:22:12.537Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(59090..59098) }
[2024-05-24T07:22:12.537Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(62037..62041) }
[2024-05-24T07:22:12.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T07:22:12.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-24T07:22:12.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-24T07:22:12.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T07:22:12.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(66490..66500) }
[2024-05-24T07:22:12.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(67902..67918) }
[2024-05-24T07:22:12.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(68997..69008) }
[2024-05-24T07:22:12.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T07:22:12.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-24T07:22:12.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-24T07:22:12.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T07:22:12.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T07:22:12.549Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T07:22:12.551Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-24T07:22:12.552Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-24T07:22:12.552Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-24T07:22:12.553Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-24T07:22:12.553Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:22:12.557Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-24T07:22:12.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T07:22:12.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(88899..88909) }
[2024-05-24T07:22:12.653Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(89573..89579) }
[2024-05-24T07:22:12.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(93399..93407) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(93410..93415) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-24T07:22:12.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(93430..93440) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(93441..93442) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(93446..93449) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(93451..93455) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(93457..93463) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(93464..93479) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(93480..93481) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:22:12.654Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(93500..93515) }
[2024-05-24T07:22:12.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(93808..93819) }
[2024-05-24T07:22:12.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(94392..94407) }
[2024-05-24T07:22:12.655Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(94816..94857) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(94871..94884) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(94885..94886) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(94900..94919) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(94921..94934) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(94936..94950) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(94951..94952) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(94954..94960) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(94961..94962) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:22:12.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(94970..95082) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(95096..95106) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(95107..95108) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(95112..95125) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95126..95127) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:22:12.656Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95184..95229) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(95243..95260) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(95261..95262) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(95276..95295) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(95297..95310) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(95312..95330) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95331..95332) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(95342..95348) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(95351..95370) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(95372..95385) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(95387..95406) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95407..95408) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:22:12.657Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95417..95483) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95488..95568) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95573..95619) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(95633..95647) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(95648..95649) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(95653..95670) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95671..95672) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:22:12.657Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(96938..96948) }
[2024-05-24T07:22:12.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(99805..99832) }
[2024-05-24T07:22:12.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-24T07:22:12.658Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-24T07:22:12.659Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T07:22:12.659Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T07:22:12.668Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T07:22:12.673Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T07:22:12.684Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(36066..36092) }
[2024-05-24T07:22:12.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(36319..36343) }
[2024-05-24T07:22:12.685Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(31082..31094) }
[2024-05-24T07:22:12.686Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.688Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.688Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(31171..31186) }
[2024-05-24T07:22:12.689Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.689Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.689Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(31266..31279) }
[2024-05-24T07:22:12.690Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.690Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.690Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(31357..31368) }
[2024-05-24T07:22:12.691Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.691Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.691Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: to_string, span: bytes(31808..31817) }
[2024-05-24T07:22:12.692Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.692Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.692Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(34214..34217) }
[2024-05-24T07:22:12.693Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.693Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.694Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.694Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(34647..34653) }
[2024-05-24T07:22:12.694Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.695Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(34737..34746) }
[2024-05-24T07:22:12.695Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.700Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(34841..34850) }
[2024-05-24T07:22:12.700Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.700Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(34939..34951) }
[2024-05-24T07:22:12.701Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.701Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(35083..35095) }
[2024-05-24T07:22:12.702Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.702Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(35187..35201) }
[2024-05-24T07:22:12.702Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.703Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(35348..35362) }
[2024-05-24T07:22:12.703Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.704Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(35493..35506) }
[2024-05-24T07:22:12.704Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.704Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(35648..35660) }
[2024-05-24T07:22:12.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.705Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(35782..35794) }
[2024-05-24T07:22:12.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.706Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(35928..35940) }
[2024-05-24T07:22:12.707Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.707Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.708Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(40728..40745) }
[2024-05-24T07:22:12.708Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(41226..41248) }
[2024-05-24T07:22:12.709Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(41761..41778) }
[2024-05-24T07:22:12.709Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(42155..42172) }
[2024-05-24T07:22:12.709Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(42968..42987) }
[2024-05-24T07:22:12.710Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(43356..43376) }
[2024-05-24T07:22:12.710Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(55709..55714) }
[2024-05-24T07:22:12.710Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(55938..55946) }
[2024-05-24T07:22:12.711Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(56107..56126) }
[2024-05-24T07:22:12.711Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.711Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(56637..56654) }
[2024-05-24T07:22:12.712Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.712Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.712Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(57159..57170) }
[2024-05-24T07:22:12.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(57451..57465) }
[2024-05-24T07:22:12.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.713Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(57793..57802) }
[2024-05-24T07:22:12.714Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:22:12.714Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(57990..58001) }
[2024-05-24T07:22:12.715Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:22:12.715Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(58323..58334) }
[2024-05-24T07:22:12.715Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(58502..58514) }
[2024-05-24T07:22:12.763Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/simple.dart", "lib/src/rust/api/model.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-24T07:22:12.763Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-24T07:22:17.755Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 4.14 seconds.
 stderr=
[2024-05-24T07:22:17.757Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-24T07:22:17.757Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-24T07:22:18.230Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-24T07:22:18.231Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T07:22:18.234Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T07:22:18.235Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T07:45:13.731Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-24T07:45:13.732Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-24T07:45:13.732Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-24T07:45:13.732Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_preamble: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-24T07:45:13.732Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-24T07:45:14.254Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib", dart_preamble: "" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"], rust_suppressed_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-24T07:45:14.255Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T07:45:14.258Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-24T07:45:14.996Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.22.1 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision a14f74ff3a (2 days ago) â€¢ 2024-05-22 11:08:21 -0500
Engine â€¢ revision 55eae6864b
Tools â€¢ Dart 3.4.1 â€¢ DevTools 2.34.3
 stderr=
[2024-05-24T07:45:14.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T07:45:14.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:45:14.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-24T07:45:14.997Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-24T07:45:16.209Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use std::fmt;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Normal, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Normal => "Normal",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Normal => Priority::Normal,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn low_priority() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn normal_priority() -> Priority { Priority::Normal }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn high_priority() -> Priority { Priority::High }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn from_string(value: String) -> Priority {
                match value.as_str() {
                    "Low" => Priority::Low,
                    "Normal" => Priority::Normal,
                    "High" => Priority::High,
                    _ => {
                        ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                    }
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn to_string(&self) -> String {
                match self {
                    Priority::Low => String::from("Low"),
                    Priority::Normal => String::from("Normal"),
                    Priority::High => String::from("High"),
                }
            }
        }
        impl fmt::Display for Priority {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Priority::High => f.write_fmt(format_args!("High")),
                    Priority::Normal => f.write_fmt(format_args!("Normal")),
                    Priority::Low => f.write_fmt(format_args!("Low")),
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            pub(crate) id: Uuid,
            pub(crate) title: String,
            pub(crate) subtitle: String,
            pub(crate) created_at: DateTime<Local>,
            pub(crate) is_completed: bool,
            pub(crate) priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::io::{Error, ErrorKind};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        match get_sqlite_path() {
                            Ok(path) =>
                                CachedConnection::new(&path).expect("Failed to create connection"),
                            Err(err) => {
                                ::core::panicking::panic_fmt(format_args!("Failed to create connection: {0}",
                                        err));
                            }
                        }
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_all_tasks_from_db(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn, created_at, is_completed_only,
                is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, task)?;
            Ok(())
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        #[doc = r###"frb_marker: #[frb(ignore)]"###]
        pub fn delete_tasks_from_db() -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_tasks(conn)
        }
        fn create_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection, created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            let start_date = created_at.clone();
            let end_date = created_at + chrono::Duration::days(1);
            let ignore_created_dt = is_ignore_created_at;
            let is_completed_only = is_completed_only;
            let start_date_str = start_date.format("%Y-%m-%d").to_string();
            let end_date_str = end_date.format("%Y-%m-%d").to_string();
            let mut stmt =
                match (ignore_created_dt, is_completed_only) {
                    (true, false) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            ORDER BY created_at")?,
                    (true, true) =>
                        conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority \
            FROM tasks \
            WHERE is_completed = 1 \
            ORDER BY created_at")?,
                    (false, false) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                    (false, true) => {
                        let sql =
                            {
                                let res =
                                    ::alloc::fmt::format(format_args!("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE (created_at BETWEEN strftime(\'%%Y-%%m-%%d\', \'{0}\') AND strftime(\'%%Y-%%m-%%d\', \'{1}\') AND is_completed = 1) ORDER BY created_at",
                                            start_date_str, end_date_str));
                                res
                            };
                        let sql = sql.replace("%%", "%");
                        conn.prepare(&sql)?
                    }
                };
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Normal" => Priority::Normal,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Normal" => Priority::Normal,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &task.priority.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
        fn delete_tasks(conn: &Connection) -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks", [])?;
            Ok(())
        }
        fn get_sqlite_path() -> Result<String, Error> {
            let data_dir =
                dirs::data_dir().ok_or(Error::new(ErrorKind::NotFound,
                            "Failed to locate data directory"))?;
            let path =
                match false {
                    true =>
                        data_dir.join("rust_lib_flutter_rust_ndk_app").join("database.sqlite"),
                    false => {
                        #[cfg(target_os = "linux")]
                        let path =
                            data_dir.join("rust_lib_flutter_rust_ndk_app").join("database.sqlite");
                        path
                    }
                };
            if !path.exists() {
                    std::fs::create_dir_all(path.parent().unwrap())?;
                }
            Ok(path.to_string_lossy().to_string())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use chrono::DateTime;
        use chrono::Local;
        use std::env;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() {
            env::set_var("RUST_BACKTRACE", "1");
            flutter_rust_bridge::setup_default_user_utils();
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks(Local::now(), false, true) {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_all_tasks(created_at: DateTime<Local>,
            is_completed_only: bool, is_ignore_created_at: bool)
            -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db(created_at,
                is_completed_only, is_ignore_created_at)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn delete_tasks() -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_tasks_from_db()
        }
    }
}
mod frb_generated {
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding,
    clippy::let_unit_value)]
    use crate::api::model::*;
    use crate::api::simple::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.35";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        958064036;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire__crate__api__model__Priority_from_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_from_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_value = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::from_string(api_value))
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_high_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_high_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::high_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_low_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_low_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::low_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_normal_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_normal_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::normal_priority())
                                    })())
                })
    }
    fn wire__crate__api__model__Priority_to_string_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_to_string",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    false)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 =>
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref()),
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::to_string(&api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_new_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::new(&api_title,
                                                &api_subtitle, api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire__crate__api__model__Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire__crate__api__simple__create_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::create_task(api_task_title,
                                            api_task_subtitle, api_task_priority)
                                    })())
                })
    }
    fn wire__crate__api__simple__delete_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__delete_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::delete_tasks())())
                })
    }
    fn wire__crate__api__simple__greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire__crate__api__simple__init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire__crate__api__simple__read_all_tasks_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    let api_is_completed_only =
                        <bool>::sse_decode(&mut deserializer);
                    let api_is_ignore_created_at =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::read_all_tasks(api_created_at,
                                            api_is_completed_only, api_is_ignore_created_at)
                                    })())
                })
    }
    fn wire__crate__api__simple__read_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    crate::api::simple::read_task(&api_task_id))())
                })
    }
    fn wire__crate__api__simple__tasks_by_completion_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_completion",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_completion(api_is_completed))
                                    })())
                })
    }
    fn wire__crate__api__simple__tasks_by_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "tasks_by_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_,
                                                ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
                                    })())
                })
    }
    fn wire__crate__api__simple__update_task_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        crate::api::simple::update_task(&api_task_id, api_title,
                                            api_subtitle, api_priority, api_is_completed)
                                    })())
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::DateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime").naive_utc(),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            27 =>
                wire__crate__api__simple__init_app_impl(port, ptr,
                    rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            6 =>
                wire__crate__api__model__Priority_from_string_impl(ptr,
                    rust_vec_len, data_len),
            5 =>
                wire__crate__api__model__Priority_high_priority_impl(ptr,
                    rust_vec_len, data_len),
            3 =>
                wire__crate__api__model__Priority_low_priority_impl(ptr,
                    rust_vec_len, data_len),
            4 =>
                wire__crate__api__model__Priority_normal_priority_impl(ptr,
                    rust_vec_len, data_len),
            7 =>
                wire__crate__api__model__Priority_to_string_impl(ptr,
                    rust_vec_len, data_len),
            15 =>
                wire__crate__api__model__Task_get_created_at_impl(ptr,
                    rust_vec_len, data_len),
            9 =>
                wire__crate__api__model__Task_get_id_impl(ptr, rust_vec_len,
                    data_len),
            19 =>
                wire__crate__api__model__Task_get_priority_impl(ptr,
                    rust_vec_len, data_len),
            13 =>
                wire__crate__api__model__Task_get_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            11 =>
                wire__crate__api__model__Task_get_title_impl(ptr,
                    rust_vec_len, data_len),
            17 =>
                wire__crate__api__model__Task_is_completed_impl(ptr,
                    rust_vec_len, data_len),
            8 =>
                wire__crate__api__model__Task_new_impl(ptr, rust_vec_len,
                    data_len),
            16 =>
                wire__crate__api__model__Task_set_completed_impl(ptr,
                    rust_vec_len, data_len),
            14 =>
                wire__crate__api__model__Task_set_created_at_impl(ptr,
                    rust_vec_len, data_len),
            18 =>
                wire__crate__api__model__Task_set_priority_impl(ptr,
                    rust_vec_len, data_len),
            12 =>
                wire__crate__api__model__Task_set_subtitle_impl(ptr,
                    rust_vec_len, data_len),
            10 =>
                wire__crate__api__model__Task_set_title_impl(ptr,
                    rust_vec_len, data_len),
            30 =>
                wire__crate__api__simple__create_task_impl(ptr, rust_vec_len,
                    data_len),
            34 =>
                wire__crate__api__simple__delete_task_impl(ptr, rust_vec_len,
                    data_len),
            35 =>
                wire__crate__api__simple__delete_tasks_impl(ptr, rust_vec_len,
                    data_len),
            26 =>
                wire__crate__api__simple__greet_impl(ptr, rust_vec_len,
                    data_len),
            31 =>
                wire__crate__api__simple__read_all_tasks_impl(ptr,
                    rust_vec_len, data_len),
            32 =>
                wire__crate__api__simple__read_task_impl(ptr, rust_vec_len,
                    data_len),
            28 =>
                wire__crate__api__simple__tasks_by_completion_impl(ptr,
                    rust_vec_len, data_len),
            29 =>
                wire__crate__api__simple__tasks_by_priority_impl(ptr,
                    rust_vec_len, data_len),
            33 =>
                wire__crate__api__simple__update_task_impl(ptr, rust_vec_len,
                    data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::simple::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.71s


[2024-05-24T07:45:16.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-24T07:45:16.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:45:16.549Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-24T07:45:16.549Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:45:16.587Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-24T07:45:16.589Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:45:16.736Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-24T07:45:17.793Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T07:45:17.793Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-24T07:45:17.794Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-24T07:45:17.794Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-24T07:45:17.794Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-24T07:45:17.794Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:45:17.796Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-24T07:45:17.818Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T07:45:17.819Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-24T07:45:17.819Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-24T07:45:17.820Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T07:45:17.820Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(59090..59098) }
[2024-05-24T07:45:17.820Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(62037..62041) }
[2024-05-24T07:45:17.821Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-24T07:45:17.821Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-24T07:45:17.821Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-24T07:45:17.822Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T07:45:17.823Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(66490..66500) }
[2024-05-24T07:45:17.823Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(67902..67918) }
[2024-05-24T07:45:17.823Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(68997..69008) }
[2024-05-24T07:45:17.825Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-24T07:45:17.826Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-24T07:45:17.826Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-24T07:45:17.827Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T07:45:17.827Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-24T07:45:17.831Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-24T07:45:17.832Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-24T07:45:17.833Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-24T07:45:17.833Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-24T07:45:17.833Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-24T07:45:17.833Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-24T07:45:17.836Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-24T07:45:17.892Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T07:45:17.892Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(88899..88909) }
[2024-05-24T07:45:17.893Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(89573..89579) }
[2024-05-24T07:45:17.893Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(93399..93407) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(93410..93415) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-24T07:45:17.893Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(93430..93440) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(93441..93442) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(93446..93449) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(93451..93455) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(93457..93463) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(93464..93479) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(93480..93481) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:45:17.893Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(93500..93515) }
[2024-05-24T07:45:17.894Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(93808..93819) }
[2024-05-24T07:45:17.894Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(94392..94407) }
[2024-05-24T07:45:17.894Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(94816..94857) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(94871..94884) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(94885..94886) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(94900..94919) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(94921..94934) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(94936..94950) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(94951..94952) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(94954..94960) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(94961..94962) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:45:17.895Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(94970..95082) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(95096..95106) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(95107..95108) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(95112..95125) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95126..95127) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:45:17.895Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95184..95229) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(95243..95260) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(95261..95262) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(95276..95295) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(95297..95310) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(95312..95330) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95331..95332) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(95342..95348) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(95351..95370) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(95372..95385) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(95387..95406) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95407..95408) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:45:17.895Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95417..95483) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95488..95568) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(95573..95619) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(95633..95647) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(95648..95649) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(95653..95670) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(95671..95672) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-24T07:45:17.896Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(96938..96948) }
[2024-05-24T07:45:17.896Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(99805..99832) }
[2024-05-24T07:45:17.896Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-24T07:45:17.896Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-24T07:45:17.897Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T07:45:17.897Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-24T07:45:17.904Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-24T07:45:17.907Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-24T07:45:17.918Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(36066..36092) }
[2024-05-24T07:45:17.918Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(36319..36343) }
[2024-05-24T07:45:17.919Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: low_priority, span: bytes(31082..31094) }
[2024-05-24T07:45:17.919Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.921Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.921Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: normal_priority, span: bytes(31171..31186) }
[2024-05-24T07:45:17.922Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.922Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.922Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: high_priority, span: bytes(31266..31279) }
[2024-05-24T07:45:17.923Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.923Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.923Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: from_string, span: bytes(31357..31368) }
[2024-05-24T07:45:17.923Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: to_string, span: bytes(31808..31817) }
[2024-05-24T07:45:17.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.925Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.925Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(34214..34217) }
[2024-05-24T07:45:17.925Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.926Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.926Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(34647..34653) }
[2024-05-24T07:45:17.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(34737..34746) }
[2024-05-24T07:45:17.928Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.944Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(34841..34850) }
[2024-05-24T07:45:17.944Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.945Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(34939..34951) }
[2024-05-24T07:45:17.946Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.946Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(35083..35095) }
[2024-05-24T07:45:17.946Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.947Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(35187..35201) }
[2024-05-24T07:45:17.948Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.948Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(35348..35362) }
[2024-05-24T07:45:17.949Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.949Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(35493..35506) }
[2024-05-24T07:45:17.950Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.950Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(35648..35660) }
[2024-05-24T07:45:17.950Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.951Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(35782..35794) }
[2024-05-24T07:45:17.951Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.952Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.952Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(35928..35940) }
[2024-05-24T07:45:17.952Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.953Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.953Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(40728..40745) }
[2024-05-24T07:45:17.954Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(41226..41248) }
[2024-05-24T07:45:17.954Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(41761..41778) }
[2024-05-24T07:45:17.954Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(42155..42172) }
[2024-05-24T07:45:17.954Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(42968..42987) }
[2024-05-24T07:45:17.955Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks_from_db, span: bytes(43356..43376) }
[2024-05-24T07:45:17.955Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(55709..55714) }
[2024-05-24T07:45:17.955Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(55938..55946) }
[2024-05-24T07:45:17.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(56107..56126) }
[2024-05-24T07:45:17.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(56637..56654) }
[2024-05-24T07:45:17.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(57159..57170) }
[2024-05-24T07:45:17.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(57451..57465) }
[2024-05-24T07:45:17.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.959Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(57793..57802) }
[2024-05-24T07:45:17.959Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-24T07:45:17.960Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(57990..58001) }
[2024-05-24T07:45:17.960Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-24T07:45:17.961Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(58323..58334) }
[2024-05-24T07:45:17.961Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_tasks, span: bytes(58502..58514) }
[2024-05-24T07:45:18.028Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_dart.rs:24] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-24T07:45:18.029Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-24T07:45:22.662Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 5 files (5 changed) in 3.61 seconds.
 stderr=
[2024-05-24T07:45:22.666Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-24T07:45:22.667Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-24T07:45:23.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-24T07:45:23.066Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-24T07:45:23.070Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-24T07:45:23.071Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.35/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
