[2024-05-09T04:07:44.457Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T04:07:44.457Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T04:07:44.458Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T04:07:44.458Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T04:07:44.458Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T04:07:45.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T04:07:45.015Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:07:45.017Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T04:07:45.956Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T04:07:45.957Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T04:07:45.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:07:45.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T04:07:45.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T04:07:47.029Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
mod frb_generated {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -1961307973;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Priority_High_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_High",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::High(&mut api_that))
                                    })())
                })
    }
    fn wire_Priority_Low_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_Low",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::Low(&mut api_that))
                                    })())
                })
    }
    fn wire_Priority_Medium_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_Medium",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::Medium(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire_Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire_Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::NaiveDateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime"),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            6 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            18 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            22 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            19 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            20 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            21 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            27 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            31 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            25 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            26 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            24 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            28 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            29 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            30 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            5 => wire_Priority_High_impl(ptr, rust_vec_len, data_len),
            3 => wire_Priority_Low_impl(ptr, rust_vec_len, data_len),
            4 => wire_Priority_Medium_impl(ptr, rust_vec_len, data_len),
            13 => wire_Task_get_created_at_impl(ptr, rust_vec_len, data_len),
            7 => wire_Task_get_id_impl(ptr, rust_vec_len, data_len),
            17 => wire_Task_get_priority_impl(ptr, rust_vec_len, data_len),
            11 => wire_Task_get_subtitle_impl(ptr, rust_vec_len, data_len),
            9 => wire_Task_get_title_impl(ptr, rust_vec_len, data_len),
            15 => wire_Task_is_completed_impl(ptr, rust_vec_len, data_len),
            14 => wire_Task_set_completed_impl(ptr, rust_vec_len, data_len),
            12 => wire_Task_set_created_at_impl(ptr, rust_vec_len, data_len),
            16 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            10 => wire_Task_set_subtitle_impl(ptr, rust_vec_len, data_len),
            8 => wire_Task_set_title_impl(ptr, rust_vec_len, data_len),
            23 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
pub mod api {
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Low(&mut self) -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Medium(&mut self) -> Priority { Priority::Medium }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn High(&mut self) -> Priority { Priority::High }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            id: Uuid,
            title: String,
            subtitle: String,
            created_at: DateTime<Local>,
            is_completed: bool,
            priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone();
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
    --> src/frb_generated.rs:1044:1
     |
729  | / fn wire_filter_tasks_by_completion_impl(
730  | |     port_: flutter_rust_bridge::for_generated::MessagePort,
731  | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
732  | |     rust_vec_len_: i32,
...    |
763  | |     )
764  | | }
     | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
1044 | / fn wire_filter_tasks_by_completion_impl(
1045 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
1046 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
1047 | |     rust_vec_len_: i32,
...    |
1076 | |     )
1077 | | }
     | |_^ `wire_filter_tasks_by_completion_impl` redefined here
     |
     = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
    --> src/frb_generated.rs:1078:1
     |
765  | / fn wire_filter_tasks_by_priority_impl(
766  | |     port_: flutter_rust_bridge::for_generated::MessagePort,
767  | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
768  | |     rust_vec_len_: i32,
...    |
799  | |     )
800  | | }
     | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
1078 | / fn wire_filter_tasks_by_priority_impl(
1079 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
1080 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
1081 | |     rust_vec_len_: i32,
...    |
1108 | |     )
1109 | | }
     | |_^ `wire_filter_tasks_by_priority_impl` redefined here
     |
     = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
For more information about this error, try `rustc --explain E0428`.


[2024-05-09T04:07:47.145Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T04:07:47.146Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:07:47.148Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T04:07:47.149Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:07:47.175Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T04:07:47.730Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:07:47.730Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-09T04:07:47.730Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-09T04:07:47.730Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-09T04:07:47.731Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-09T04:07:47.731Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:07:47.733Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-09T04:07:47.799Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T04:07:47.799Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(24408..24418) }
[2024-05-09T04:07:47.799Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(25082..25088) }
[2024-05-09T04:07:47.800Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(28908..28916) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(28919..28924) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-09T04:07:47.800Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(28939..28949) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(28950..28951) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(28955..28958) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(28960..28964) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(28966..28972) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(28973..28988) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(28989..28990) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:07:47.800Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(29009..29024) }
[2024-05-09T04:07:47.801Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(29317..29328) }
[2024-05-09T04:07:47.801Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(29901..29916) }
[2024-05-09T04:07:47.801Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30325..30366) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(30380..30393) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(30394..30395) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(30409..30428) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(30430..30443) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(30445..30459) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30460..30461) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(30463..30469) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30470..30471) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:07:47.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30479..30591) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(30605..30615) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(30616..30617) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(30621..30634) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30635..30636) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:07:47.802Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30693..30738) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(30752..30769) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(30770..30771) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(30785..30804) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(30806..30819) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(30821..30839) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30840..30841) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(30851..30857) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(30860..30879) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(30881..30894) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(30896..30915) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30916..30917) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:07:47.803Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30926..30992) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30997..31077) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(31082..31128) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(31142..31156) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(31157..31158) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(31162..31179) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(31180..31181) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:07:47.803Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(32837..32847) }
[2024-05-09T04:07:47.803Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(35706..35733) }
[2024-05-09T04:07:47.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-09T04:07:47.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-09T04:07:47.804Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T04:07:47.805Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T04:07:47.812Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T04:07:47.816Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T04:07:47.816Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T04:07:47.816Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T04:07:47.816Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T04:07:47.817Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:07:47.818Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T04:07:47.834Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:07:47.834Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T04:07:47.834Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T04:07:47.835Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:07:47.835Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(131339..131347) }
[2024-05-09T04:07:47.836Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(133119..133123) }
[2024-05-09T04:07:47.836Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:07:47.837Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:07:47.837Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:07:47.839Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:07:47.839Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(137395..137405) }
[2024-05-09T04:07:47.839Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(138526..138542) }
[2024-05-09T04:07:47.839Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(139621..139632) }
[2024-05-09T04:07:47.841Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:07:47.841Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T04:07:47.842Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T04:07:47.842Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:07:47.843Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:07:47.862Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:07:47.863Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:07:47.871Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(5343..5369) }
[2024-05-09T04:07:47.871Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.871Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.871Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.872Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(5573..5597) }
[2024-05-09T04:07:47.872Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.872Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.873Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.873Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.873Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Low, span: bytes(1639..1642) }
[2024-05-09T04:07:47.873Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.875Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.875Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Medium, span: bytes(1728..1734) }
[2024-05-09T04:07:47.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.877Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.877Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: High, span: bytes(1823..1827) }
[2024-05-09T04:07:47.877Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.877Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3513..3516) }
[2024-05-09T04:07:47.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(3946..3952) }
[2024-05-09T04:07:47.879Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.880Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(4036..4045) }
[2024-05-09T04:07:47.880Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.880Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(4140..4149) }
[2024-05-09T04:07:47.880Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.881Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(4238..4250) }
[2024-05-09T04:07:47.881Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.881Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(4382..4394) }
[2024-05-09T04:07:47.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.882Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(4486..4500) }
[2024-05-09T04:07:47.883Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.883Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(4647..4661) }
[2024-05-09T04:07:47.883Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.884Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(4792..4805) }
[2024-05-09T04:07:47.884Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.884Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(4947..4959) }
[2024-05-09T04:07:47.885Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.885Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(5082..5094) }
[2024-05-09T04:07:47.885Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.886Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.886Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(5228..5240) }
[2024-05-09T04:07:47.886Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.886Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.887Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.887Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(9637..9654) }
[2024-05-09T04:07:47.887Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.888Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(10113..10135) }
[2024-05-09T04:07:47.888Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.889Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(10464..10481) }
[2024-05-09T04:07:47.889Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.889Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(10835..10852) }
[2024-05-09T04:07:47.890Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.890Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(11626..11645) }
[2024-05-09T04:07:47.891Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(21113..21118) }
[2024-05-09T04:07:47.891Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(21342..21350) }
[2024-05-09T04:07:47.892Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(21421..21447) }
[2024-05-09T04:07:47.893Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.894Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.894Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(21912..21936) }
[2024-05-09T04:07:47.895Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.895Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.895Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.896Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(22395..22406) }
[2024-05-09T04:07:47.920Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.921Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(22666..22680) }
[2024-05-09T04:07:47.922Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.922Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(22816..22825) }
[2024-05-09T04:07:47.922Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:07:47.923Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(22992..23003) }
[2024-05-09T04:07:47.923Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:07:47.924Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(23304..23315) }
[2024-05-09T04:07:47.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_dart.rs:13] execute format_dart paths=["lib/src/rust/api/model_persistence.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/api/model.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-09T04:07:47.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-09T04:07:51.939Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model_persistence.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 6 files (6 changed) in 3.09 seconds.
 stderr=
[2024-05-09T04:07:51.940Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-09T04:07:51.941Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-09T04:07:52.346Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-09T04:07:52.347Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:07:52.350Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T04:07:52.351Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T04:12:27.326Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T04:12:27.327Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T04:12:27.327Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T04:12:27.327Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T04:12:27.327Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T04:12:27.797Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T04:12:27.798Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:12:27.800Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T04:12:28.636Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T04:12:28.637Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T04:12:28.638Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:12:28.638Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T04:12:28.638Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T04:12:29.588Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Low(&mut self) -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Medium(&mut self) -> Priority { Priority::Medium }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn High(&mut self) -> Priority { Priority::High }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            id: Uuid,
            title: String,
            subtitle: String,
            created_at: DateTime<Local>,
            is_completed: bool,
            priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone();
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.44s


[2024-05-09T04:12:29.603Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T04:12:29.607Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:12:29.610Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T04:12:29.610Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:12:29.628Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T04:12:30.113Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:12:30.114Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T04:12:30.114Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T04:12:30.114Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T04:12:30.114Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T04:12:30.114Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:12:30.115Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T04:12:30.131Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:12:30.131Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T04:12:30.131Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T04:12:30.132Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:12:30.132Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(23622..23630) }
[2024-05-09T04:12:30.132Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(25402..25406) }
[2024-05-09T04:12:30.133Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:12:30.133Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:12:30.134Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:12:30.135Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:12:30.135Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(29678..29688) }
[2024-05-09T04:12:30.135Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(30809..30825) }
[2024-05-09T04:12:30.136Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(31904..31915) }
[2024-05-09T04:12:30.138Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:12:30.138Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T04:12:30.139Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T04:12:30.139Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:12:30.140Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:12:30.142Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:12:30.143Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:12:30.149Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(5343..5369) }
[2024-05-09T04:12:30.150Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.150Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.151Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.151Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(5573..5597) }
[2024-05-09T04:12:30.151Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.151Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.152Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.152Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.152Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Low, span: bytes(1639..1642) }
[2024-05-09T04:12:30.153Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.154Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.155Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.155Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Medium, span: bytes(1728..1734) }
[2024-05-09T04:12:30.155Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.156Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.156Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.156Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: High, span: bytes(1823..1827) }
[2024-05-09T04:12:30.157Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.157Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.157Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.157Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3513..3516) }
[2024-05-09T04:12:30.158Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.158Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.158Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.159Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.159Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(3946..3952) }
[2024-05-09T04:12:30.159Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.160Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(4036..4045) }
[2024-05-09T04:12:30.160Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.160Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(4140..4149) }
[2024-05-09T04:12:30.161Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.161Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(4238..4250) }
[2024-05-09T04:12:30.161Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.162Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(4382..4394) }
[2024-05-09T04:12:30.162Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.162Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(4486..4500) }
[2024-05-09T04:12:30.163Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.163Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(4647..4661) }
[2024-05-09T04:12:30.163Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.164Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(4792..4805) }
[2024-05-09T04:12:30.164Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.164Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(4947..4959) }
[2024-05-09T04:12:30.165Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.166Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(5082..5094) }
[2024-05-09T04:12:30.166Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.167Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.167Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(5228..5240) }
[2024-05-09T04:12:30.168Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.168Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.168Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.169Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(9637..9654) }
[2024-05-09T04:12:30.169Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.169Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(10113..10135) }
[2024-05-09T04:12:30.170Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.170Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(10464..10481) }
[2024-05-09T04:12:30.171Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.171Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(10835..10852) }
[2024-05-09T04:12:30.171Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.197Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(11626..11645) }
[2024-05-09T04:12:30.198Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(21113..21118) }
[2024-05-09T04:12:30.198Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(21342..21350) }
[2024-05-09T04:12:30.198Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(21421..21447) }
[2024-05-09T04:12:30.199Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.199Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.199Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(21912..21936) }
[2024-05-09T04:12:30.200Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.200Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.201Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.201Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(22395..22406) }
[2024-05-09T04:12:30.201Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(22666..22680) }
[2024-05-09T04:12:30.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.202Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(22816..22825) }
[2024-05-09T04:12:30.203Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:12:30.203Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(22992..23003) }
[2024-05-09T04:12:30.203Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:12:30.204Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(23304..23315) }
[2024-05-09T04:12:30.255Z [32mINFO[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/polisher/add_mod_to_lib.rs:49] Inject `mod frb_generated;` into "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs"
[2024-05-09T04:12:30.257Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_dart.rs:13] execute format_dart paths=["lib/src/rust/api/model_persistence.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/api/model.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-09T04:12:30.257Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-09T04:12:35.858Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model_persistence.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 6 files (6 changed) in 4.73 seconds.
 stderr=
[2024-05-09T04:12:35.859Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-09T04:12:35.859Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-09T04:12:36.362Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-09T04:12:36.365Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:12:36.371Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T04:12:36.374Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T04:17:41.286Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T04:17:41.286Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T04:17:41.286Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T04:17:41.287Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T04:17:41.287Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T04:17:41.869Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T04:17:41.870Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:17:41.872Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T04:17:42.772Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T04:17:42.773Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T04:17:42.773Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:17:42.774Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T04:17:42.774Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T04:17:43.631Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
mod frb_generated {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -1961307973;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Priority_High_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_High",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::High(&mut api_that))
                                    })())
                })
    }
    fn wire_Priority_Low_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_Low",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::Low(&mut api_that))
                                    })())
                })
    }
    fn wire_Priority_Medium_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_Medium",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Priority::Medium(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire_Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire_Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::NaiveDateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime"),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            6 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            18 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            22 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            19 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            20 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            21 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            27 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            31 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            25 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            26 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            24 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            28 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            29 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            30 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            5 => wire_Priority_High_impl(ptr, rust_vec_len, data_len),
            3 => wire_Priority_Low_impl(ptr, rust_vec_len, data_len),
            4 => wire_Priority_Medium_impl(ptr, rust_vec_len, data_len),
            13 => wire_Task_get_created_at_impl(ptr, rust_vec_len, data_len),
            7 => wire_Task_get_id_impl(ptr, rust_vec_len, data_len),
            17 => wire_Task_get_priority_impl(ptr, rust_vec_len, data_len),
            11 => wire_Task_get_subtitle_impl(ptr, rust_vec_len, data_len),
            9 => wire_Task_get_title_impl(ptr, rust_vec_len, data_len),
            15 => wire_Task_is_completed_impl(ptr, rust_vec_len, data_len),
            14 => wire_Task_set_completed_impl(ptr, rust_vec_len, data_len),
            12 => wire_Task_set_created_at_impl(ptr, rust_vec_len, data_len),
            16 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            10 => wire_Task_set_subtitle_impl(ptr, rust_vec_len, data_len),
            8 => wire_Task_set_title_impl(ptr, rust_vec_len, data_len),
            23 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
pub mod api {
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Low() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Medium() -> Priority { Priority::Medium }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn High() -> Priority { Priority::High }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            id: Uuid,
            title: String,
            subtitle: String,
            created_at: DateTime<Local>,
            is_completed: bool,
            priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone();
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn filter_tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn filter_tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
    --> src/frb_generated.rs:1044:1
     |
729  | / fn wire_filter_tasks_by_completion_impl(
730  | |     port_: flutter_rust_bridge::for_generated::MessagePort,
731  | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
732  | |     rust_vec_len_: i32,
...    |
763  | |     )
764  | | }
     | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
1044 | / fn wire_filter_tasks_by_completion_impl(
1045 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
1046 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
1047 | |     rust_vec_len_: i32,
...    |
1076 | |     )
1077 | | }
     | |_^ `wire_filter_tasks_by_completion_impl` redefined here
     |
     = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
    --> src/frb_generated.rs:1078:1
     |
765  | / fn wire_filter_tasks_by_priority_impl(
766  | |     port_: flutter_rust_bridge::for_generated::MessagePort,
767  | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
768  | |     rust_vec_len_: i32,
...    |
799  | |     )
800  | | }
     | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
1078 | / fn wire_filter_tasks_by_priority_impl(
1079 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
1080 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
1081 | |     rust_vec_len_: i32,
...    |
1108 | |     )
1109 | | }
     | |_^ `wire_filter_tasks_by_priority_impl` redefined here
     |
     = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
For more information about this error, try `rustc --explain E0428`.


[2024-05-09T04:17:43.726Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T04:17:43.726Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:17:43.729Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T04:17:43.730Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:17:43.753Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T04:17:44.363Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:17:44.364Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-09T04:17:44.364Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-09T04:17:44.364Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-09T04:17:44.365Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-09T04:17:44.365Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:17:44.367Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-09T04:17:44.464Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T04:17:44.464Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(24381..24391) }
[2024-05-09T04:17:44.464Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(25055..25061) }
[2024-05-09T04:17:44.465Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(28881..28889) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(28892..28897) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-09T04:17:44.465Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(28912..28922) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(28923..28924) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(28928..28931) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(28933..28937) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(28939..28945) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(28946..28961) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(28962..28963) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:17:44.465Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(28982..28997) }
[2024-05-09T04:17:44.465Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(29290..29301) }
[2024-05-09T04:17:44.466Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(29874..29889) }
[2024-05-09T04:17:44.466Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30298..30339) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(30353..30366) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(30367..30368) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(30382..30401) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(30403..30416) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(30418..30432) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30433..30434) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(30436..30442) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30443..30444) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:17:44.466Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30452..30564) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(30578..30588) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(30589..30590) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(30594..30607) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30608..30609) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:17:44.466Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30666..30711) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(30725..30742) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(30743..30744) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(30758..30777) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(30779..30792) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(30794..30812) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30813..30814) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(30824..30830) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(30833..30852) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(30854..30867) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(30869..30888) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30889..30890) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:17:44.467Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30899..30965) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30970..31050) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(31055..31101) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(31115..31129) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(31130..31131) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(31135..31152) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(31153..31154) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:17:44.467Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(32810..32820) }
[2024-05-09T04:17:44.467Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(35679..35706) }
[2024-05-09T04:17:44.468Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-09T04:17:44.468Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-09T04:17:44.468Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T04:17:44.469Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T04:17:44.477Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T04:17:44.481Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T04:17:44.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T04:17:44.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T04:17:44.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T04:17:44.482Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:17:44.484Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T04:17:44.507Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:17:44.507Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T04:17:44.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T04:17:44.508Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:17:44.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(131312..131320) }
[2024-05-09T04:17:44.509Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(133065..133069) }
[2024-05-09T04:17:44.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:17:44.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:17:44.510Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:17:44.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:17:44.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(137341..137351) }
[2024-05-09T04:17:44.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(138472..138488) }
[2024-05-09T04:17:44.512Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(139567..139578) }
[2024-05-09T04:17:44.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:17:44.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T04:17:44.514Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T04:17:44.515Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:17:44.519Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:17:44.521Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:17:44.523Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:17:44.532Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(5316..5342) }
[2024-05-09T04:17:44.533Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.533Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.533Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.534Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(5546..5570) }
[2024-05-09T04:17:44.534Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.534Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.535Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Low, span: bytes(1639..1642) }
[2024-05-09T04:17:44.536Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.538Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Medium, span: bytes(1719..1725) }
[2024-05-09T04:17:44.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.539Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: High, span: bytes(1805..1809) }
[2024-05-09T04:17:44.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.540Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3486..3489) }
[2024-05-09T04:17:44.541Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.542Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(3919..3925) }
[2024-05-09T04:17:44.543Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(4009..4018) }
[2024-05-09T04:17:44.544Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(4113..4122) }
[2024-05-09T04:17:44.545Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(4211..4223) }
[2024-05-09T04:17:44.546Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.547Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(4355..4367) }
[2024-05-09T04:17:44.548Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.548Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(4459..4473) }
[2024-05-09T04:17:44.548Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.549Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(4620..4634) }
[2024-05-09T04:17:44.549Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.550Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(4765..4778) }
[2024-05-09T04:17:44.550Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.550Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(4920..4932) }
[2024-05-09T04:17:44.551Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.551Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(5055..5067) }
[2024-05-09T04:17:44.551Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.566Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(5201..5213) }
[2024-05-09T04:17:44.567Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.568Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.569Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.569Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(9610..9627) }
[2024-05-09T04:17:44.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.570Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(10086..10108) }
[2024-05-09T04:17:44.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(10437..10454) }
[2024-05-09T04:17:44.571Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.572Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(10808..10825) }
[2024-05-09T04:17:44.572Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(11599..11618) }
[2024-05-09T04:17:44.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(21086..21091) }
[2024-05-09T04:17:44.573Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(21315..21323) }
[2024-05-09T04:17:44.574Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(21394..21420) }
[2024-05-09T04:17:44.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.575Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.576Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(21885..21909) }
[2024-05-09T04:17:44.577Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.578Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.578Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.579Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(22368..22379) }
[2024-05-09T04:17:44.579Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.580Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(22639..22653) }
[2024-05-09T04:17:44.581Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.581Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(22789..22798) }
[2024-05-09T04:17:44.582Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:17:44.582Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(22965..22976) }
[2024-05-09T04:17:44.582Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:17:44.583Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(23277..23288) }
[2024-05-09T04:17:44.648Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_dart.rs:13] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/model_persistence.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-09T04:17:44.649Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-09T04:17:49.272Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/model_persistence.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 6 files (6 changed) in 3.80 seconds.
 stderr=
[2024-05-09T04:17:49.273Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-09T04:17:49.274Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-09T04:17:49.631Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-09T04:17:49.632Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:17:49.635Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T04:17:49.636Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T04:21:31.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T04:21:31.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T04:21:31.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T04:21:31.065Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T04:21:31.066Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T04:21:31.745Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T04:21:31.746Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:21:31.749Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T04:21:32.729Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T04:21:32.731Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T04:21:32.732Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:21:32.733Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T04:21:32.734Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T04:21:34.286Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
mod frb_generated {
    /* AUTO INJECTED BY flutter_rust_bridge. This line may not be accurate, and you can change it according to your needs. */
    #![allow(non_camel_case_types, unused, non_snake_case,
    clippy::needless_return, clippy::redundant_closure_call,
    clippy::redundant_closure, clippy::useless_conversion, clippy::unit_arg,
    clippy::unused_unit, clippy::double_parens, clippy::let_and_return,
    clippy::too_many_arguments, clippy::match_single_binding)]
    use crate::api::model::*;
    use crate::api::model_persistence::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::transform_result_dco;
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    #[doc(hidden)]
    pub(crate) struct FrbWrapper<T>(T);
    impl<T: Clone> Clone for FrbWrapper<T> {
        fn clone(&self) -> Self { FrbWrapper(self.0.clone()) }
    }
    impl<T: PartialEq> PartialEq for FrbWrapper<T> {
        fn eq(&self, other: &Self) -> bool { self.0.eq(&other.0) }
    }
    impl<T: Eq> Eq for FrbWrapper<T> {}
    impl<T: std::hash::Hash> std::hash::Hash for FrbWrapper<T> {
        fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
            self.0.hash(state)
        }
    }
    impl<T> From<T> for FrbWrapper<T> {
        fn from(t: T) -> Self { FrbWrapper(t) }
    }
    use std::collections::HashMap;
    use std::marker::PhantomData;
    use std::sync::Arc;
    pub struct MoiArc<T: ?Sized + MoiArcValue> {
        object_id: Option<ObjectId>,
        value: Option<Arc<T>>,
        _phantom: PhantomData<T>,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug + ?Sized + MoiArcValue> ::core::fmt::Debug for
        MoiArc<T> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(f, "MoiArc",
                "object_id", &self.object_id, "value", &self.value,
                "_phantom", &&self._phantom)
        }
    }
    impl<T: ?Sized + MoiArcValue> Drop for MoiArc<T> {
        fn drop(&mut self) {
            if let Some(object_id) = self.object_id {
                    Self::decrement_strong_count(object_id);
                }
        }
    }
    impl<T: ?Sized + MoiArcValue> AsRef<T> for MoiArc<T> {
        fn as_ref(&self) -> &T { self.value.as_ref().unwrap().as_ref() }
    }
    impl<T: ?Sized + MoiArcValue>
        ::flutter_rust_bridge::for_generated::BaseArc<T> for MoiArc<T> {
        fn new(value: T) -> Self where T: Sized {
            let mut pool = T::get_pool().write().unwrap();
            let object_id = pool.id_generator.next_id();
            let value = Arc::new(value);
            let old_value =
                pool.map.insert(object_id,
                    MoiArcPoolValue { ref_count: 1, value: value.clone() });
            if !old_value.is_none() {
                    ::core::panicking::panic("assertion failed: old_value.is_none()")
                };
            Self {
                object_id: Some(object_id),
                value: Some(value),
                _phantom: PhantomData,
            }
        }
        fn try_unwrap(mut self) -> Result<T, Self> where T: Sized {
            let pool = &mut T::get_pool().write().unwrap();
            if pool.map.get(&self.object_id.unwrap()).unwrap().ref_count == 1
                    {
                    Self::decrement_strong_count_raw(self.object_id.unwrap(),
                        pool);
                    self.object_id.take().unwrap();
                    Ok(Arc::into_inner(self.value.take().unwrap()).unwrap())
                } else { Err(self) }
        }
        fn into_inner(self) -> Option<T> where T: Sized {
            self.try_unwrap().ok()
        }
        fn into_raw(mut self) -> usize { self.object_id.take().unwrap() }
    }
    impl<T: ?Sized + MoiArcValue> Clone for MoiArc<T> {
        fn clone(&self) -> Self {
            Self::increment_strong_count(self.object_id.unwrap());
            Self {
                object_id: self.object_id,
                value: self.value.clone(),
                _phantom: PhantomData,
            }
        }
    }
    impl<T: ?Sized + MoiArcValue> MoiArc<T> {
        pub(crate) fn from_raw(raw: usize) -> Self where T: Sized {
            let map = &T::get_pool().read().unwrap().map;
            Self {
                object_id: Some(raw),
                value: Some(map.get(&raw).unwrap().value.clone()),
                _phantom: PhantomData,
            }
        }
        pub fn increment_strong_count(raw: usize) {
            let map = &mut T::get_pool().write().unwrap().map;
            map.get_mut(&raw).unwrap().ref_count += 1;
        }
        pub fn decrement_strong_count(raw: usize) {
            Self::decrement_strong_count_raw(raw,
                &mut T::get_pool().write().unwrap())
        }
        fn decrement_strong_count_raw(raw: usize,
            pool: &mut MoiArcPoolInner<T>) {
            let value = pool.map.get_mut(&raw).unwrap();
            value.ref_count -= 1;
            if value.ref_count == 0 { pool.map.remove(&raw).unwrap(); }
        }
    }
    pub trait MoiArcValue: 'static {
        fn get_pool()
        -> &'static MoiArcPool<Self>;
    }
    type ObjectId = usize;
    pub type MoiArcPool<T> = std::sync::RwLock<MoiArcPoolInner<T>>;
    pub struct MoiArcPoolInner<T: ?Sized> {
        map: HashMap<ObjectId, MoiArcPoolValue<T>>,
        id_generator: IdGenerator,
    }
    impl<T: ?Sized> Default for MoiArcPoolInner<T> {
        fn default() -> Self {
            Self { map: HashMap::new(), id_generator: Default::default() }
        }
    }
    struct IdGenerator {
        next_id: ObjectId,
    }
    impl Default for IdGenerator {
        fn default() -> Self { Self { next_id: Self::MIN_ID } }
    }
    impl IdGenerator {
        const MIN_ID: ObjectId = 1;
        const MAX_ID: ObjectId = 2147483600;
        fn next_id(&mut self) -> ObjectId {
            let ans = self.next_id;
            self.next_id =
                if self.next_id >= Self::MAX_ID {
                        Self::MIN_ID
                    } else { self.next_id + 1 };
            ans
        }
    }
    impl<T: ?Sized> MoiArcPoolInner<T> {}
    struct MoiArcPoolValue<T: ?Sized> {
        ref_count: i32,
        value: Arc<T>,
    }
    use ::flutter_rust_bridge::for_generated::decode_rust_opaque_nom;
    fn decode_rust_opaque_moi<T: MoiArcValue + Send + Sync>(ptr: usize)
        -> RustOpaqueMoi<T> {
        RustOpaqueMoi::from_arc(MoiArc::<T>::from_raw(ptr))
    }
    use ::flutter_rust_bridge::for_generated::StdArc;
    use ::flutter_rust_bridge::RustOpaqueNom;
    /// Please refer to `RustOpaque` for doc.
    pub type RustOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustOpaqueBase<T, MoiArc<T>>;
    /// A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary).
    pub type RustOpaque<T> = RustOpaqueMoi<T>;
    use ::flutter_rust_bridge::RustAutoOpaqueNom;
    /// Please refer to `RustAutoOpaque` for doc.
    pub type RustAutoOpaqueMoi<T> =
        ::flutter_rust_bridge::for_generated::RustAutoOpaqueBase<T,
        MoiArc<::flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>>;
    /// Usually this is unneeded, and just write down arbitrary types.
    /// However, when you need arbitrary types at places that are not supported yet,
    /// use `RustOpaqueOpaque<YourArbitraryType>`.
    pub type RustAutoOpaque<T> = RustAutoOpaqueMoi<T>;
    pub trait CstDecode<T> {
        fn cst_decode(self)
        -> T;
    }
    impl<T, S> CstDecode<Option<T>> for *mut S where *mut S: CstDecode<T> {
        fn cst_decode(self) -> Option<T> {
            (!self.is_null()).then(|| self.cst_decode())
        }
    }
    pub trait SseDecode {
        fn sse_decode(deserializer:
            &mut ::flutter_rust_bridge::for_generated::SseDeserializer)
        -> Self;
        fn sse_decode_single(message:
                ::flutter_rust_bridge::for_generated::Dart2RustMessageSse)
            -> Self where Self: Sized {
            let mut deserializer =
                ::flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let ans = Self::sse_decode(&mut deserializer);
            deserializer.end();
            ans
        }
    }
    pub trait SseEncode {
        fn sse_encode(self,
        serializer: &mut ::flutter_rust_bridge::for_generated::SseSerializer);
    }
    fn transform_result_sse<T, E>(raw: Result<T, E>)
        ->
            Result<::flutter_rust_bridge::for_generated::Rust2DartMessageSse,
            ::flutter_rust_bridge::for_generated::Rust2DartMessageSse> where
        T: SseEncode, E: SseEncode {
        use ::flutter_rust_bridge::for_generated::{Rust2DartAction, SseCodec};
        match raw {
            Ok(raw) =>
                Ok(SseCodec::encode(Rust2DartAction::Success,
                        |serializer| { raw.sse_encode(serializer) })),
            Err(raw) =>
                Err(SseCodec::encode(Rust2DartAction::Error,
                        |serializer| { raw.sse_encode(serializer) })),
        }
    }
    pub struct StreamSink<T,
        Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec =
        ::flutter_rust_bridge::for_generated::SseCodec> {
        base: ::flutter_rust_bridge::for_generated::StreamSinkBase<T,
        Rust2DartCodec>,
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, Rust2DartCodec: ::core::clone::Clone +
        ::flutter_rust_bridge::for_generated::BaseCodec> ::core::clone::Clone
        for StreamSink<T, Rust2DartCodec> {
        #[inline]
        fn clone(&self) -> StreamSink<T, Rust2DartCodec> {
            StreamSink { base: ::core::clone::Clone::clone(&self.base) }
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        StreamSink<T, Rust2DartCodec> {
        pub fn deserialize(raw: String) -> Self {
            Self {
                base: ::flutter_rust_bridge::for_generated::StreamSinkBase::deserialize(raw),
            }
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::DcoCodec> {
        pub fn add<T2>(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> where
            T: ::flutter_rust_bridge::IntoIntoDart<T2>,
            T2: ::flutter_rust_bridge::IntoDart {
            self.base.add(::flutter_rust_bridge::for_generated::DcoCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    value.into_into_dart()))
        }
    }
    impl<T> StreamSink<T, ::flutter_rust_bridge::for_generated::SseCodec>
        where T: SseEncode {
        pub fn add(&self, value: T)
            -> Result<(), ::flutter_rust_bridge::Rust2DartSendError> {
            self.base.add(::flutter_rust_bridge::for_generated::SseCodec::encode(::flutter_rust_bridge::for_generated::Rust2DartAction::Success,
                    |serializer| value.sse_encode(serializer)))
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoIntoDart<StreamSink<T, Rust2DartCodec>> for
        StreamSink<T, Rust2DartCodec> {
        fn into_into_dart(self) -> StreamSink<T, Rust2DartCodec> {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    impl<T, Rust2DartCodec: ::flutter_rust_bridge::for_generated::BaseCodec>
        ::flutter_rust_bridge::IntoDart for StreamSink<T, Rust2DartCodec> {
        fn into_dart(self) -> ::flutter_rust_bridge::for_generated::DartAbi {
            ::core::panicking::panic("internal error: entered unreachable code")
        }
    }
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str =
        "2.0.0-dev.33";
    pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 =
        -1961307973;
    #[allow(missing_copy_implementations)]
    #[allow(non_camel_case_types)]
    #[allow(dead_code)]
    pub struct FLUTTER_RUST_BRIDGE_HANDLER {
        __private_field: (),
    }
    #[doc(hidden)]
    pub static FLUTTER_RUST_BRIDGE_HANDLER: FLUTTER_RUST_BRIDGE_HANDLER =
        FLUTTER_RUST_BRIDGE_HANDLER { __private_field: () };
    impl ::lazy_static::__Deref for FLUTTER_RUST_BRIDGE_HANDLER {
        type Target =
            ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>;
        fn deref(&self)
            ->
                &::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
            #[inline(always)]
            fn __static_ref_initialize()
                ->
                    ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                {
                    match (&FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                            &flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)
                        {
                        (left_val, right_val) => {
                            if !(*left_val == *right_val) {
                                    let kind = ::core::panicking::AssertKind::Eq;
                                    ::core::panicking::assert_failed(kind, &*left_val,
                                        &*right_val,
                                        ::core::option::Option::Some(format_args!("Please ensure flutter_rust_bridge\'s codegen ({0}) and runtime ({1}) versions are the same",
                                                FLUTTER_RUST_BRIDGE_CODEGEN_VERSION,
                                                flutter_rust_bridge::for_generated::FLUTTER_RUST_BRIDGE_RUNTIME_VERSION)));
                                }
                        }
                    };
                    ::flutter_rust_bridge::DefaultHandler::new_simple(Default::default())
                }
            }
            #[inline(always)]
            fn __stability()
                ->
                    &'static ::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool> {
                static LAZY:
                    ::lazy_static::lazy::Lazy<::flutter_rust_bridge::DefaultHandler<::flutter_rust_bridge::for_generated::SimpleThreadPool>>
                    =
                    ::lazy_static::lazy::Lazy::INIT;
                LAZY.get(__static_ref_initialize)
            }
            __stability()
        }
    }
    impl ::lazy_static::LazyStatic for FLUTTER_RUST_BRIDGE_HANDLER {
        fn initialize(lazy: &Self) { let _ = &**lazy; }
    }
    fn wire_Priority_High_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_High",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::model::Priority::High())
                                    })())
                })
    }
    fn wire_Priority_Low_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_Low",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::model::Priority::Low())
                                    })())
                })
    }
    fn wire_Priority_Medium_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Priority_Medium",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::model::Priority::Medium())
                                    })())
                })
    }
    fn wire_Task_get_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_created_at(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_id_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_id",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_id(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_priority(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_subtitle(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_get_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_get_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::get_title(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_is_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_is_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::is_completed(&mut api_that))
                                    })())
                })
    }
    fn wire_Task_new_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_new",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::Task::new(&api_title,
                                                        &api_subtitle, api_priority))
                                            })())
                        }
                })
    }
    fn wire_Task_set_completed_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_completed",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_completed(&mut api_that,
                                                api_is_completed))
                                    })())
                })
    }
    fn wire_Task_set_created_at_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_created_at",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_created_at =
                        <chrono::DateTime<chrono::Local>>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_created_at(&mut api_that,
                                                api_created_at))
                                    })())
                })
    }
    fn wire_Task_set_priority_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_priority",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_priority(&mut api_that,
                                                api_priority))
                                    })())
                })
    }
    fn wire_Task_set_subtitle_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_subtitle",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_subtitle(&mut api_that,
                                                api_subtitle))
                                    })())
                })
    }
    fn wire_Task_set_title_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "Task_set_title",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_that =
                        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        let mut api_that_decoded = None;
                                        let decode_indices_ =
                                            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_compute_order(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([api_that.rust_auto_opaque_lock_order_info(0,
                                                                    true)])));
                                        for i in decode_indices_ {
                                            match i {
                                                0 => {
                                                    api_that_decoded =
                                                        Some(api_that.rust_auto_opaque_decode_sync_ref_mut())
                                                }
                                                _ =>
                                                    ::core::panicking::panic("internal error: entered unreachable code"),
                                            }
                                        }
                                        let mut api_that = api_that_decoded.unwrap();
                                        Result::<_,
                                                ()>::Ok(crate::api::model::Task::set_title(&mut api_that,
                                                api_title))
                                    })())
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_completion(api_tasks,
                                                        api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_tasks = <Vec<Task>>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::model::filter_tasks_by_priority(api_tasks,
                                                        api_priority))
                                            })())
                        }
                })
    }
    fn wire_create_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::create_task_in_db(&api_title,
                                                    &api_subtitle, api_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::delete_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_read_all_tasks_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_all_tasks_from_db()
                                            })())
                        }
                })
    }
    fn wire_read_task_from_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task_from_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::read_task_from_db(&api_task_id)
                                            })())
                        }
                })
    }
    fn wire_update_task_in_db_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task_in_db",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::model_persistence::update_task_in_db(&api_task_id,
                                                    &api_title, &api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    fn wire_create_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "create_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_title =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_subtitle =
                        <String>::sse_decode(&mut deserializer);
                    let api_task_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::create_task(api_task_title,
                                                    api_task_subtitle, api_task_priority)
                                            })())
                        }
                })
    }
    fn wire_delete_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "delete_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::delete_task(&api_task_id))())
                        }
                })
    }
    fn wire_filter_tasks_by_completion_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_completion",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_completion(api_is_completed))
                                            })())
                        }
                })
    }
    fn wire_filter_tasks_by_priority_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "filter_tasks_by_priority",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                Result::<_,
                                                        ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
                                            })())
                        }
                })
    }
    fn wire_greet_impl(ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "greet",
                port: None,
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_name = <String>::sse_decode(&mut deserializer);
                    deserializer.end();
                    transform_result_sse((move ||
                                    {
                                        Result::<_, ()>::Ok(crate::api::simple::greet(api_name))
                                    })())
                })
    }
    fn wire_init_app_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "init_app",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            Result::<_, ()>::Ok(crate::api::simple::init_app()))())
                        }
                })
    }
    fn wire_read_all_tasks_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_all_tasks",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    deserializer.end();
                    move |context|
                        transform_result_sse((move ||
                                        crate::api::simple::read_all_tasks())())
                })
    }
    fn wire_read_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "read_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            crate::api::simple::read_task(&api_task_id))())
                        }
                })
    }
    fn wire_update_task_impl(port_:
            flutter_rust_bridge::for_generated::MessagePort,
        ptr_:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len_: i32, data_len_: i32) {
        FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,
            _,
            _>(flutter_rust_bridge::for_generated::TaskInfo {
                debug_name: "update_task",
                port: Some(port_),
                mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
            },
            move ||
                {
                    let message =
                        unsafe {
                            flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                                rust_vec_len_, data_len_)
                        };
                    let mut deserializer =
                        flutter_rust_bridge::for_generated::SseDeserializer::new(message);
                    let api_task_id =
                        <uuid::Uuid>::sse_decode(&mut deserializer);
                    let api_title = <String>::sse_decode(&mut deserializer);
                    let api_subtitle = <String>::sse_decode(&mut deserializer);
                    let api_priority =
                        <Priority>::sse_decode(&mut deserializer);
                    let api_is_completed =
                        <bool>::sse_decode(&mut deserializer);
                    deserializer.end();
                    move |context|
                        {
                            transform_result_sse((move ||
                                            {
                                                crate::api::simple::update_task(&api_task_id, api_title,
                                                    api_subtitle, api_priority, api_is_completed)
                                            })())
                        }
                })
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task> {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl MoiArcValue for
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>
        {
        fn get_pool() -> &'static MoiArcPool<Self> {
            #[allow(missing_copy_implementations)]
            #[allow(non_camel_case_types)]
            #[allow(dead_code)]
            struct POOL {
                __private_field: (),
            }
            #[doc(hidden)]
            static POOL: POOL = POOL { __private_field: () };
            impl ::lazy_static::__Deref for POOL {
                type Target =
                    MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>;
                fn deref(&self)
                    ->
                        &MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                    #[inline(always)]
                    fn __static_ref_initialize()
                        ->
                            MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        MoiArcPool::new(Default::default())
                    }
                    #[inline(always)]
                    fn __stability()
                        ->
                            &'static MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>> {
                        static LAZY:
                            ::lazy_static::lazy::Lazy<MoiArcPool<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>
                            =
                            ::lazy_static::lazy::Lazy::INIT;
                        LAZY.get(__static_ref_initialize)
                    }
                    __stability()
                }
            }
            impl ::lazy_static::LazyStatic for POOL {
                fn initialize(lazy: &Self) { let _ = &**lazy; }
            }
            ;
            &POOL
        }
    }
    impl SseDecode for Priority {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for Task {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for rusqlite::Error {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner =
                <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_decode(deserializer);
            return inner.rust_auto_opaque_decode_owned();
        }
    }
    impl SseDecode for chrono::DateTime<chrono::Local> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <i64>::sse_decode(deserializer);
            return chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(chrono::NaiveDateTime::from_timestamp_micros(inner).expect("invalid or out-of-range datetime"),
                        chrono::Utc));
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <usize>::sse_decode(deserializer);
            return decode_rust_opaque_moi(inner);
        }
    }
    impl SseDecode for String {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return String::from_utf8(inner).unwrap();
        }
    }
    impl SseDecode for uuid::Uuid {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut inner = <Vec<u8>>::sse_decode(deserializer);
            return uuid::Uuid::from_slice(&inner).expect("fail to decode uuid");
        }
    }
    impl SseDecode for bool {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap() != 0
        }
    }
    impl SseDecode for i64 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i64::<NativeEndian>().unwrap()
        }
    }
    impl SseDecode for Vec<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ {
                ans_.push(<Task>::sse_decode(deserializer));
            }
            return ans_;
        }
    }
    impl SseDecode for Vec<u8> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            let mut len_ = <i32>::sse_decode(deserializer);
            let mut ans_ = ::alloc::vec::Vec::new();
            for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
            return ans_;
        }
    }
    impl SseDecode for Option<Task> {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            if (<bool>::sse_decode(deserializer)) {
                    return Some(<Task>::sse_decode(deserializer));
                } else { return None; }
        }
    }
    impl SseDecode for u8 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u8().unwrap()
        }
    }
    impl SseDecode for () {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {}
    }
    impl SseDecode for usize {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
        }
    }
    impl SseDecode for i32 {
        fn sse_decode(deserializer:
                &mut flutter_rust_bridge::for_generated::SseDeserializer)
            -> Self {
            deserializer.cursor.read_i32::<NativeEndian>().unwrap()
        }
    }
    fn pde_ffi_dispatcher_primary_impl(func_id: i32,
        port: flutter_rust_bridge::for_generated::MessagePort,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32) {
        match func_id {
            6 => wire_Task_new_impl(port, ptr, rust_vec_len, data_len),
            1 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            2 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            18 =>
                wire_create_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            22 =>
                wire_delete_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            19 =>
                wire_read_all_tasks_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            20 =>
                wire_read_task_from_db_impl(port, ptr, rust_vec_len,
                    data_len),
            21 =>
                wire_update_task_in_db_impl(port, ptr, rust_vec_len,
                    data_len),
            27 => wire_create_task_impl(port, ptr, rust_vec_len, data_len),
            31 => wire_delete_task_impl(port, ptr, rust_vec_len, data_len),
            25 =>
                wire_filter_tasks_by_completion_impl(port, ptr, rust_vec_len,
                    data_len),
            26 =>
                wire_filter_tasks_by_priority_impl(port, ptr, rust_vec_len,
                    data_len),
            24 => wire_init_app_impl(port, ptr, rust_vec_len, data_len),
            28 => wire_read_all_tasks_impl(port, ptr, rust_vec_len, data_len),
            29 => wire_read_task_impl(port, ptr, rust_vec_len, data_len),
            30 => wire_update_task_impl(port, ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    fn pde_ffi_dispatcher_sync_impl(func_id: i32,
        ptr:
            flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
        rust_vec_len: i32, data_len: i32)
        -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
        match func_id {
            5 => wire_Priority_High_impl(ptr, rust_vec_len, data_len),
            3 => wire_Priority_Low_impl(ptr, rust_vec_len, data_len),
            4 => wire_Priority_Medium_impl(ptr, rust_vec_len, data_len),
            13 => wire_Task_get_created_at_impl(ptr, rust_vec_len, data_len),
            7 => wire_Task_get_id_impl(ptr, rust_vec_len, data_len),
            17 => wire_Task_get_priority_impl(ptr, rust_vec_len, data_len),
            11 => wire_Task_get_subtitle_impl(ptr, rust_vec_len, data_len),
            9 => wire_Task_get_title_impl(ptr, rust_vec_len, data_len),
            15 => wire_Task_is_completed_impl(ptr, rust_vec_len, data_len),
            14 => wire_Task_set_completed_impl(ptr, rust_vec_len, data_len),
            12 => wire_Task_set_created_at_impl(ptr, rust_vec_len, data_len),
            16 => wire_Task_set_priority_impl(ptr, rust_vec_len, data_len),
            10 => wire_Task_set_subtitle_impl(ptr, rust_vec_len, data_len),
            8 => wire_Task_set_title_impl(ptr, rust_vec_len, data_len),
            23 => wire_greet_impl(ptr, rust_vec_len, data_len),
            _ =>
                ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Priority> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Priority> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Priority>> for Priority
        {
        fn into_into_dart(self) -> FrbWrapper<Priority> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<Task> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<Task> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Task>> for Task {
        fn into_into_dart(self) -> FrbWrapper<Task> { self.into() }
    }
    impl flutter_rust_bridge::IntoDart for FrbWrapper<rusqlite::Error> {
        fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self.0).into_dart()
        }
    }
    impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for
        FrbWrapper<rusqlite::Error> {}
    impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<rusqlite::Error>> for
        rusqlite::Error {
        fn into_into_dart(self) -> FrbWrapper<rusqlite::Error> { self.into() }
    }
    impl SseEncode for Priority {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for Task {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for rusqlite::Error {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_,
                        MoiArc<_>>(self), serializer);
        }
    }
    impl SseEncode for chrono::DateTime<chrono::Local> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i64>::sse_encode(self.timestamp_micros(), serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for
        RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>
        {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            let (ptr, size) = self.sse_encode_raw();
            <usize>::sse_encode(ptr, serializer);
            <i32>::sse_encode(size, serializer);
        }
    }
    impl SseEncode for String {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
        }
    }
    impl SseEncode for uuid::Uuid {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <Vec<u8>>::sse_encode(self.as_bytes().to_vec(), serializer);
        }
    }
    impl SseEncode for bool {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self as _).unwrap();
        }
    }
    impl SseEncode for i64 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
        }
    }
    impl SseEncode for Vec<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <Task>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Vec<u8> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <i32>::sse_encode(self.len() as _, serializer);
            for item in self { <u8>::sse_encode(item, serializer); }
        }
    }
    impl SseEncode for Option<Task> {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            <bool>::sse_encode(self.is_some(), serializer);
            if let Some(value) = self {
                    <Task>::sse_encode(value, serializer);
                }
        }
    }
    impl SseEncode for u8 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u8(self).unwrap();
        }
    }
    impl SseEncode for () {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {}
    }
    impl SseEncode for usize {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
        }
    }
    impl SseEncode for i32 {
        fn sse_encode(self,
            serializer:
                &mut flutter_rust_bridge::for_generated::SseSerializer) {
            serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
        }
    }
    #[cfg(not(target_family = "wasm"))]
    #[path = "frb_generated.io.rs"]
    mod io {
        use super::*;
        use crate::api::model::*;
        use crate::api::model_persistence::*;
        use flutter_rust_bridge::for_generated::byteorder::{
            NativeEndian, ReadBytesExt, WriteBytesExt,
        };
        use flutter_rust_bridge::for_generated::transform_result_dco;
        use flutter_rust_bridge::{Handler, IntoIntoDart};
        pub trait NewWithNullPtr {
            fn new_with_null_ptr()
            -> Self;
        }
        impl<T> NewWithNullPtr for *mut T {
            fn new_with_null_ptr() -> Self { std::ptr::null_mut() }
        }
        #[no_mangle]
        pub extern "C" fn frb_get_rust_content_hash() -> i32 {
            FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_primary(func_id: i32,
            port_: i64, ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32) {
            pde_ffi_dispatcher_primary_impl(func_id, port_, ptr_,
                rust_vec_len_, data_len_)
        }
        #[no_mangle]
        pub extern "C" fn frb_pde_ffi_dispatcher_sync(func_id: i32,
            ptr_: *mut u8, rust_vec_len_: i32, data_len_: i32)
            -> ::flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
            pde_ffi_dispatcher_sync_impl(func_id, ptr_, rust_vec_len_,
                data_len_)
        }
        #[no_mangle]
        pub extern "C" fn dart_fn_deliver_output(call_id: i32, ptr_: *mut u8,
            rust_vec_len_: i32, data_len_: i32) {
            let message =
                unsafe {
                    ::flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_,
                        rust_vec_len_, data_len_)
                };
            FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id,
                message)
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Priority>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Task>>::decrement_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::increment_strong_count(ptr
                    as _);
        }
        #[no_mangle]
        pub extern "C" fn frbgen_flutter_rust_ndk_app_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(ptr:
                *const std::ffi::c_void) {
            MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<rusqlite::Error>>::decrement_strong_count(ptr
                    as _);
        }
    }
    #[cfg(not(target_family = "wasm"))]
    pub use io::*;
}
pub mod api {
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Low() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Medium() -> Priority { Priority::Medium }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn High() -> Priority { Priority::High }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            id: Uuid,
            title: String,
            subtitle: String,
            created_at: DateTime<Local>,
            is_completed: bool,
            priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone();
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
error[E0428]: the name `wire_filter_tasks_by_completion_impl` is defined multiple times
    --> src/frb_generated.rs:993:1
     |
678  | / fn wire_filter_tasks_by_completion_impl(
679  | |     port_: flutter_rust_bridge::for_generated::MessagePort,
680  | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
681  | |     rust_vec_len_: i32,
...    |
712  | |     )
713  | | }
     | |_- previous definition of the value `wire_filter_tasks_by_completion_impl` here
...
993  | / fn wire_filter_tasks_by_completion_impl(
994  | |     port_: flutter_rust_bridge::for_generated::MessagePort,
995  | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
996  | |     rust_vec_len_: i32,
...    |
1025 | |     )
1026 | | }
     | |_^ `wire_filter_tasks_by_completion_impl` redefined here
     |
     = note: `wire_filter_tasks_by_completion_impl` must be defined only once in the value namespace of this module
error[E0428]: the name `wire_filter_tasks_by_priority_impl` is defined multiple times
    --> src/frb_generated.rs:1027:1
     |
714  | / fn wire_filter_tasks_by_priority_impl(
715  | |     port_: flutter_rust_bridge::for_generated::MessagePort,
716  | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
717  | |     rust_vec_len_: i32,
...    |
748  | |     )
749  | | }
     | |_- previous definition of the value `wire_filter_tasks_by_priority_impl` here
...
1027 | / fn wire_filter_tasks_by_priority_impl(
1028 | |     port_: flutter_rust_bridge::for_generated::MessagePort,
1029 | |     ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
1030 | |     rust_vec_len_: i32,
...    |
1057 | |     )
1058 | | }
     | |_^ `wire_filter_tasks_by_priority_impl` redefined here
     |
     = note: `wire_filter_tasks_by_priority_impl` must be defined only once in the value namespace of this module
error[E0425]: cannot find function `filter_tasks_by_completion` in module `crate::api::simple`
    --> src/frb_generated.rs:1019:61
     |
1019 |                     Result::<_, ()>::Ok(crate::api::simple::filter_tasks_by_completion(
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: src/api/simple.rs:28:1
     |
28   | pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
     | ----------------------------------------------------------- similarly named function `tasks_by_completion` defined here
     |
help: a function with a similar name exists
     |
1019 |                     Result::<_, ()>::Ok(crate::api::simple::tasks_by_completion(
     |                                                             ~~~~~~~~~~~~~~~~~~~
help: consider importing this function
     |
22   + use crate::api::model::filter_tasks_by_completion;
     |
help: if you import `filter_tasks_by_completion`, refer to it directly
     |
1019 -                     Result::<_, ()>::Ok(crate::api::simple::filter_tasks_by_completion(
1019 +                     Result::<_, ()>::Ok(filter_tasks_by_completion(
     |
error[E0425]: cannot find function `filter_tasks_by_priority` in module `crate::api::simple`
    --> src/frb_generated.rs:1053:61
     |
1053 |                     Result::<_, ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
     |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^
     |
    ::: src/api/simple.rs:38:1
     |
38   | pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
     | --------------------------------------------------------- similarly named function `tasks_by_priority` defined here
     |
help: a function with a similar name exists
     |
1053 |                     Result::<_, ()>::Ok(crate::api::simple::tasks_by_priority(api_priority))
     |                                                             ~~~~~~~~~~~~~~~~~
help: consider importing this function
     |
22   + use crate::api::model::filter_tasks_by_priority;
     |
help: if you import `filter_tasks_by_priority`, refer to it directly
     |
1053 -                     Result::<_, ()>::Ok(crate::api::simple::filter_tasks_by_priority(api_priority))
1053 +                     Result::<_, ()>::Ok(filter_tasks_by_priority(api_priority))
     |
Some errors have detailed explanations: E0425, E0428.
For more information about an error, try `rustc --explain E0425`.


[2024-05-09T04:21:34.366Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T04:21:34.367Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:21:34.370Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T04:21:34.370Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:21:34.386Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T04:21:34.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:21:34.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated"]
[2024-05-09T04:21:34.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "frb_generated"]
[2024-05-09T04:21:34.876Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "frb_generated" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/frb_generated/mod.rs"]
[2024-05-09T04:21:34.877Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs" module=Some("frb_generated")
[2024-05-09T04:21:34.877Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:21:34.878Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs"
[2024-05-09T04:21:34.943Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T04:21:34.943Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FrbWrapper, span: bytes(24367..24377) }
[2024-05-09T04:21:34.944Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArc, span: bytes(25041..25047) }
[2024-05-09T04:21:34.944Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Inherited, type_token: Type, ident: Ident { sym: ObjectId, span: bytes(28867..28875) }, generics: Generics { lt_token: None, params: [], gt_token: None, where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(28878..28883) }, arguments: PathArguments::None }] } }, semi_token: Semi }
[2024-05-09T04:21:34.944Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: MoiArcPool, span: bytes(28898..28908) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(28909..28910) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(28914..28917) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: sync, span: bytes(28919..28923) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RwLock, span: bytes(28925..28931) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArcPoolInner, span: bytes(28932..28947) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(28948..28949) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:21:34.945Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolInner, span: bytes(28968..28983) }
[2024-05-09T04:21:34.945Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: IdGenerator, span: bytes(29276..29287) }
[2024-05-09T04:21:34.945Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: MoiArcPoolValue, span: bytes(29860..29875) }
[2024-05-09T04:21:34.945Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30284..30325) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaqueMoi, span: bytes(30339..30352) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(30353..30354) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(30368..30387) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(30389..30402) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustOpaqueBase, span: bytes(30404..30418) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30419..30420) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(30422..30428) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30429..30430) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:21:34.946Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30438..30550) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " A wrapper to support [arbitrary Rust types](https://cjycode.com/flutter_rust_bridge/guides/types/arbitrary)." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustOpaque, span: bytes(30564..30574) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(30575..30576) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustOpaqueMoi, span: bytes(30580..30593) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30594..30595) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:21:34.946Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30652..30697) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Please refer to `RustAutoOpaque` for doc." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(30711..30728) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(30729..30730) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(30744..30763) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(30765..30778) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueBase, span: bytes(30780..30798) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30799..30800) }, arguments: PathArguments::None }] } }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MoiArc, span: bytes(30810..30816) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: Some(PathSep), segments: [PathSegment { ident: Ident { sym: flutter_rust_bridge, span: bytes(30819..30838) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: for_generated, span: bytes(30840..30853) }, arguments: PathArguments::None }, PathSep, PathSegment { ident: Ident { sym: RustAutoOpaqueInner, span: bytes(30855..30874) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(30875..30876) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:21:34.946Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:124] parse_syn_item_struct_or_enum item_type=ItemType { attrs: [Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30885..30951) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " Usually this is unneeded, and just write down arbitrary types." } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(30956..31036) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " However, when you need arbitrary types at places that are not supported yet," } } } }, Attribute { pound_token: Pound, style: AttrStyle::Outer, bracket_token: Bracket, meta: Meta::NameValue { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: doc, span: bytes(31041..31087) }, arguments: PathArguments::None }] }, eq_token: Eq, value: Expr::Lit { attrs: [], lit: Lit::Str { token: " use `RustOpaqueOpaque<YourArbitraryType>`." } } } }], vis: Visibility::Public(Pub), type_token: Type, ident: Ident { sym: RustAutoOpaque, span: bytes(31101..31115) }, generics: Generics { lt_token: Some(Lt), params: [GenericParam::Type(TypeParam { attrs: [], ident: Ident { sym: T, span: bytes(31116..31117) }, colon_token: None, bounds: [], eq_token: None, default: None })], gt_token: Some(Gt), where_clause: None }, eq_token: Eq, ty: Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RustAutoOpaqueMoi, span: bytes(31121..31138) }, arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(31139..31140) }, arguments: PathArguments::None }] } })], gt_token: Gt } }] } }, semi_token: Semi }
[2024-05-09T04:21:34.947Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: StreamSink, span: bytes(32796..32806) }
[2024-05-09T04:21:34.947Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: FLUTTER_RUST_BRIDGE_HANDLER, span: bytes(35665..35692) }
[2024-05-09T04:21:34.947Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "frb_generated", "io"]
[2024-05-09T04:21:34.947Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "frb_generated", "io"]
[2024-05-09T04:21:34.947Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T04:21:34.948Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated", "io"] }
[2024-05-09T04:21:34.955Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Inherited, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", module_path: ["crate", "frb_generated"] }
[2024-05-09T04:21:34.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T04:21:34.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T04:21:34.958Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T04:21:34.959Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T04:21:34.959Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:21:34.960Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T04:21:34.974Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:21:34.974Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T04:21:34.975Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T04:21:34.975Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:21:34.975Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(127029..127037) }
[2024-05-09T04:21:34.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(128782..128786) }
[2024-05-09T04:21:34.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:21:34.976Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:21:34.977Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:21:34.978Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:21:34.978Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(133058..133068) }
[2024-05-09T04:21:34.978Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(134189..134205) }
[2024-05-09T04:21:34.978Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(135284..135295) }
[2024-05-09T04:21:34.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:21:34.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T04:21:34.979Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T04:21:34.980Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:21:35.002Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:21:35.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:21:35.005Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:21:35.012Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(5316..5342) }
[2024-05-09T04:21:35.012Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(5546..5570) }
[2024-05-09T04:21:35.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.015Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Low, span: bytes(1639..1642) }
[2024-05-09T04:21:35.015Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.017Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.017Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.017Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Medium, span: bytes(1719..1725) }
[2024-05-09T04:21:35.017Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.018Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.018Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.018Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: High, span: bytes(1805..1809) }
[2024-05-09T04:21:35.019Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.019Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.019Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3486..3489) }
[2024-05-09T04:21:35.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(3919..3925) }
[2024-05-09T04:21:35.022Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.022Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(4009..4018) }
[2024-05-09T04:21:35.023Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.023Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(4113..4122) }
[2024-05-09T04:21:35.023Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.024Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(4211..4223) }
[2024-05-09T04:21:35.024Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.025Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(4355..4367) }
[2024-05-09T04:21:35.025Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.025Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(4459..4473) }
[2024-05-09T04:21:35.026Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.026Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(4620..4634) }
[2024-05-09T04:21:35.026Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.027Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(4765..4778) }
[2024-05-09T04:21:35.027Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.028Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(4920..4932) }
[2024-05-09T04:21:35.028Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.028Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(5055..5067) }
[2024-05-09T04:21:35.029Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.029Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.029Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(5201..5213) }
[2024-05-09T04:21:35.051Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.052Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.053Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.053Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(9610..9627) }
[2024-05-09T04:21:35.053Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.054Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(10086..10108) }
[2024-05-09T04:21:35.054Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(10437..10454) }
[2024-05-09T04:21:35.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.055Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(10808..10825) }
[2024-05-09T04:21:35.056Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.056Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(11599..11618) }
[2024-05-09T04:21:35.057Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(21086..21091) }
[2024-05-09T04:21:35.057Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(21315..21323) }
[2024-05-09T04:21:35.057Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(21394..21413) }
[2024-05-09T04:21:35.058Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.058Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.058Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(21878..21895) }
[2024-05-09T04:21:35.059Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.059Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.059Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.060Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(22354..22365) }
[2024-05-09T04:21:35.060Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.061Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(22625..22639) }
[2024-05-09T04:21:35.061Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.061Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(22775..22784) }
[2024-05-09T04:21:35.062Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:21:35.062Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(22951..22962) }
[2024-05-09T04:21:35.062Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:21:35.063Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(23263..23274) }
[2024-05-09T04:21:35.118Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_dart.rs:13] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/model_persistence.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-09T04:21:35.119Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-09T04:21:40.412Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/model_persistence.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 6 files (6 changed) in 4.38 seconds.
 stderr=
[2024-05-09T04:21:40.413Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-09T04:21:40.414Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-09T04:21:40.856Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-09T04:21:40.859Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:21:40.863Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T04:21:40.866Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T04:26:14.015Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/main.rs:24] cli=Cli { verbose: false, command: Generate(GenerateCommandArgs { watch: false, primary: GenerateCommandArgsPrimary { config_file: None, rust_input: None, dart_output: None, c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, no_dart_enums_style: false, no_add_mod_to_lib: false, llvm_path: None, llvm_compiler_opts: None, dart_root: None, no_build_runner: false, extra_headers: None, no_web: false, no_deps_check: false, default_external_library_loader_web_prefix: None, no_dart3: false, full_dep: false, local: false, dump: None, dump_all: false } }) }
[2024-05-09T04:26:14.015Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/binary/commands_parser.rs:8] compute_codegen_config: mode=from_files_auto
[2024-05-09T04:26:14.015Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/config_parser.rs:45] Found config file flutter_rust_bridge.yaml
[2024-05-09T04:26:14.016Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:24] config=Config { base_dir: Some(""), rust_input: "rust/src/api/**/*.rs", dart_output: "lib/src/rust", c_output: None, duplicated_c_output: None, rust_root: None, rust_output: None, dart_entrypoint_class_name: None, dart_format_line_length: None, dart_enums_style: None, add_mod_to_lib: None, llvm_path: None, llvm_compiler_opts: None, dart_root: None, build_runner: None, extra_headers: None, web: None, deps_check: None, dart3: None, full_dep: None, local: None, default_external_library_loader_web_prefix: None, dump: None, dump_all: None } meta_config=MetaConfig { watch: false }
[2024-05-09T04:26:14.016Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/config/internal_config_parser.rs:42] InternalConfig.parse base_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app"
[2024-05-09T04:26:14.526Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/mod.rs:27] internal_config=InternalConfig { controller: ControllerInternalConfig { watch: false, watching_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src"], exclude_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs"], max_count: None }, preparer: PreparerInternalConfig { dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", deps_check: true, needs_ffigen: false }, parser: ParserInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", force_codec_mode_pack: Some(CodecModePack { dart2rust: Pde, rust2dart: Pde }), default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, generator: GeneratorInternalConfig { api_dart: GeneratorApiDartInternalConfig { dart_enums_style: true, dart3: true, dart_decl_base_output_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust", dart_entrypoint_class_name: "RustLib" }, wire: GeneratorWireInternalConfig { dart: GeneratorWireDartInternalConfig { has_ffigen: false, web_enabled: true, llvm_path: ["/opt/homebrew/opt/llvm", "/usr/local/opt/llvm", "/usr/lib/llvm-9", "/usr/lib/llvm-10", "/usr/lib/llvm-11", "/usr/lib/llvm-12", "/usr/lib/llvm-13", "/usr/lib/llvm-14", "/usr/lib/", "/usr/lib64/", "C:/Program Files/llvm", "C:/msys64/mingw64"], llvm_compiler_opts: "", dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", extra_headers: "", dart_impl_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.dart", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.io.dart", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/lib/src/rust/frb_generated.web.dart" }, dart_output_class_name_pack: DartOutputClassNamePack { entrypoint_class_name: "RustLib", api_class_name: "RustLibApi", api_impl_class_name: "RustLibApiImpl", api_impl_platform_class_name: "RustLibApiImplPlatform", wire_class_name: "RustLibWire", wasm_module_name: "RustLibWasmModule" }, default_external_library_loader: GeneratorWireDartDefaultExternalLibraryLoaderInternalConfig { stem: "rust_lib_flutter_rust_ndk_app", io_directory: "rust/target/release/", web_prefix: "pkg/" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" }, rust: GeneratorWireRustInternalConfig { rust_input_path_pack: RustInputPathPack { rust_input_paths: ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs"] }, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", web_enabled: true, rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_", has_ffigen: false, default_stream_sink_codec: Sse, default_rust_opaque_codec: Moi }, c: GeneratorWireCInternalConfig { enable: false, rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, c_symbol_prefix: "frbgen_flutter_rust_ndk_app_" } } }, polisher: PolisherInternalConfig { duplicated_c_output_path: [], dart_format_line_length: 80, add_mod_to_lib: true, build_runner: true, web_enabled: true, dart_root: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app", rust_crate_dir: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust", rust_output_path: TargetOrCommonMap { common: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.rs", io: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.io.rs", web: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/frb_generated.web.rs" }, c_output_path: None, enable_auto_upgrade: true }, dumper: DumperInternalConfig { dump_contents: [], dump_directory: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/target/frb_dump" } }
[2024-05-09T04:26:14.527Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:26:14.531Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"flutter\" \"--version\"" current_dir=None cmd="sh" "-c" "\"flutter\" \"--version\""
[2024-05-09T04:26:15.376Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command="sh" "-c" "\"flutter\" \"--version\"" stdout=Flutter 3.19.6 â€¢ channel stable â€¢ https://github.com/flutter/flutter.git
Framework â€¢ revision 54e66469a9 (3 weeks ago) â€¢ 2024-04-17 13:08:03 -0700
Engine â€¢ revision c4cd48e186
Tools â€¢ Dart 3.3.4 â€¢ DevTools 2.31.1
 stderr=
[2024-05-09T04:26:15.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model.rs" module=Some("api::model")
[2024-05-09T04:26:15.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:26:15.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:118] Running cargo expand in '"/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"'
[2024-05-09T04:26:15.378Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=cargo args="expand --lib --theme=none --ugly" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly"
[2024-05-09T04:26:16.274Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && RUSTFLAGS="--cfg frb_expand" "cargo" "expand" "--lib" "--theme=none" "--ugly" stdout=#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod api {
    pub mod model {
        use chrono::{DateTime, Local};
        use flutter_rust_bridge::frb;
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub enum Priority { Low, Medium, High, }
        #[automatically_derived]
        impl ::core::fmt::Debug for Priority {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(f,
                    match self {
                        Priority::Low => "Low",
                        Priority::Medium => "Medium",
                        Priority::High => "High",
                    })
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Priority { }
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Priority {
            #[inline]
            fn eq(&self, other: &Priority) -> bool {
                let __self_discr =
                    ::core::intrinsics::discriminant_value(self);
                let __arg1_discr =
                    ::core::intrinsics::discriminant_value(other);
                __self_discr == __arg1_discr
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Priority {
            #[inline]
            fn clone(&self) -> Priority {
                match self {
                    Priority::Low => Priority::Low,
                    Priority::Medium => Priority::Medium,
                    Priority::High => Priority::High,
                }
            }
        }
        impl Priority {
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Low() -> Priority { Priority::Low }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn Medium() -> Priority { Priority::Medium }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn High() -> Priority { Priority::High }
        }
        #[doc = r###"frb_marker: #[frb(opaque)]"###]
        pub struct Task {
            id: Uuid,
            title: String,
            subtitle: String,
            created_at: DateTime<Local>,
            is_completed: bool,
            priority: Priority,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Task {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                let names: &'static _ =
                    &["id", "title", "subtitle", "created_at", "is_completed",
                                "priority"];
                let values: &[&dyn ::core::fmt::Debug] =
                    &[&self.id, &self.title, &self.subtitle, &self.created_at,
                                &self.is_completed, &&self.priority];
                ::core::fmt::Formatter::debug_struct_fields_finish(f, "Task",
                    names, values)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Task {
            #[inline]
            fn clone(&self) -> Task {
                Task {
                    id: ::core::clone::Clone::clone(&self.id),
                    title: ::core::clone::Clone::clone(&self.title),
                    subtitle: ::core::clone::Clone::clone(&self.subtitle),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    is_completed: ::core::clone::Clone::clone(&self.is_completed),
                    priority: ::core::clone::Clone::clone(&self.priority),
                }
            }
        }
        impl Task {
            pub fn new(title: &str, subtitle: &str, priority: Priority)
                -> Self {
                Self {
                    id: Uuid::new_v4(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: false,
                    priority,
                }
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_id(&mut self) -> Uuid { self.id.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_title(&mut self, title: String) { self.title = title; }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_title(&mut self) -> String { self.title.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_subtitle(&mut self, subtitle: String) {
                self.subtitle = subtitle;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_subtitle(&mut self) -> String { self.subtitle.clone() }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_created_at(&mut self, created_at: DateTime<Local>) {
                self.created_at = created_at;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_created_at(&mut self) -> DateTime<Local> {
                self.created_at.clone()
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_completed(&mut self, is_completed: bool) {
                self.is_completed = is_completed;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn is_completed(&mut self) -> bool {
                self.is_completed.clone();
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn set_priority(&mut self, priority: Priority) {
                self.priority = priority;
            }
            #[doc = r###"frb_marker: #[frb(sync)]"###]
            pub fn get_priority(&mut self) -> Priority {
                self.priority.clone()
            }
        }
        pub fn filter_tasks_by_completion(tasks: Vec<Task>,
            is_completed: bool) -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.is_completed == is_completed).collect()
        }
        pub fn filter_tasks_by_priority(tasks: Vec<Task>, priority: Priority)
            -> Vec<Task> {
            tasks.into_iter().filter(|task|
                        task.priority == priority).collect()
        }
    }
    pub mod model_persistence {
        use crate::api::model::Priority;
        use crate::api::model::Task;
        use chrono::{DateTime, Local};
        use lazy_static::lazy_static;
        use rusqlite::{params, Connection};
        use std::sync::Mutex;
        use uuid::Uuid;
        #[allow(missing_copy_implementations)]
        #[allow(non_camel_case_types)]
        #[allow(dead_code)]
        struct CONNECTION {
            __private_field: (),
        }
        #[doc(hidden)]
        static CONNECTION: CONNECTION = CONNECTION { __private_field: () };
        impl ::lazy_static::__Deref for CONNECTION {
            type Target = CachedConnection;
            fn deref(&self) -> &CachedConnection {
                #[inline(always)]
                fn __static_ref_initialize() -> CachedConnection {
                    {
                        let conn =
                            CachedConnection::new("test.db").expect("Failed to create connection");
                        conn
                    }
                }
                #[inline(always)]
                fn __stability() -> &'static CachedConnection {
                    static LAZY: ::lazy_static::lazy::Lazy<CachedConnection> =
                        ::lazy_static::lazy::Lazy::INIT;
                    LAZY.get(__static_ref_initialize)
                }
                __stability()
            }
        }
        impl ::lazy_static::LazyStatic for CONNECTION {
            fn initialize(lazy: &Self) { let _ = &**lazy; }
        }
        struct CachedConnection {
            conn: Mutex<Option<Connection>>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CachedConnection {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(f,
                    "CachedConnection", "conn", &&self.conn)
            }
        }
        impl CachedConnection {
            fn new(db_path: &str) -> Result<Self, rusqlite::Error> {
                let db_path = db_path.to_owned();
                let conn = Connection::open(&db_path)?;
                conn.execute("CREATE TABLE IF NOT EXISTS tasks (
                    id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    subtitle TEXT,
                    created_at TEXT NOT NULL,
                    is_completed INTEGER NOT NULL,
                    priority TEXT NOT NULL)",
                        [])?;
                Ok(Self { conn: Mutex::new(Some(conn)) })
            }
        }
        enum CustomError { ParsingError(String), InvalidConnection(String), }
        #[automatically_derived]
        impl ::core::fmt::Debug for CustomError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter)
                -> ::core::fmt::Result {
                match self {
                    CustomError::ParsingError(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "ParsingError", &__self_0),
                    CustomError::InvalidConnection(__self_0) =>
                        ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                            "InvalidConnection", &__self_0),
                }
            }
        }
        impl From<CustomError> for rusqlite::Error {
            fn from(err: CustomError) -> Self {
                match err {
                    CustomError::ParsingError(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                    CustomError::InvalidConnection(msg) => {
                        Self::InvalidColumnType(0, msg, rusqlite::types::Type::Text)
                    }
                }
            }
        }
        pub fn create_task_in_db(title: &str, subtitle: &str,
            priority: Priority) -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task = Task::new(title, subtitle, priority);
            create_task(conn, &task)?;
            Ok(())
        }
        pub fn read_all_tasks_from_db()
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_tasks(conn)
        }
        pub fn read_task_from_db(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            read_task(conn, task_id)
        }
        pub fn update_task_in_db(task_id: &Uuid, title: &str, subtitle: &str,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            let task =
                Task {
                    id: task_id.clone(),
                    title: title.to_string(),
                    subtitle: subtitle.to_string(),
                    created_at: Local::now(),
                    is_completed: is_completed,
                    priority,
                };
            update_task(conn, &task)?;
            Ok(())
        }
        pub fn delete_task_from_db(task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            let mut conn_lock = CONNECTION.conn.lock().unwrap();
            let conn =
                conn_lock.as_mut().ok_or(rusqlite::Error::from(CustomError::InvalidConnection("Invalid connection".to_string())))?;
            delete_task(conn, task_id)
        }
        fn create_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("INSERT INTO tasks (
        id,
        title,
        subtitle,
        created_at,
        is_completed,
        priority) VALUES (
          ?, ?, ?, ?, ?, ?)",
                    &[&task.id.to_string() as &dyn ::rusqlite::ToSql,
                                    &task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql] as &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn read_tasks(conn: &Connection)
            -> Result<Vec<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks")?;
            let task_iter =
                stmt.query_map([],
                        |row|
                            {
                                let row_id = row.get::<_, String>(0)?;
                                let parsed_id: Uuid =
                                    match Uuid::parse_str(&row_id) {
                                        Ok(id) => id,
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let title: String = row.get(1)?;
                                let subtitle: String = row.get(2)?;
                                let created_at_str = row.get::<_, String>(3)?;
                                let created_at =
                                    match DateTime::parse_from_rfc3339(&created_at_str) {
                                        Ok(dt) => dt.with_timezone(&Local),
                                        Err(err) => {
                                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                                let res =
                                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                                            err));
                                                                res
                                                            })));
                                        }
                                    };
                                let is_completed: bool = row.get(4)?;
                                let priority_str: String = row.get(5)?;
                                let priority =
                                    match priority_str.as_str() {
                                        "Low" => Priority::Low,
                                        "Medium" => Priority::Medium,
                                        "High" => Priority::High,
                                        _ => {
                                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                                        }
                                    };
                                Ok(Task {
                                        id: parsed_id,
                                        title,
                                        subtitle,
                                        created_at: created_at,
                                        is_completed: is_completed,
                                        priority,
                                    })
                            })?;
            let mut tasks: Vec<Task> = Vec::new();
            for task_result in task_iter { tasks.push(task_result?); }
            Ok(tasks)
        }
        fn read_task(conn: &Connection, task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            let mut stmt =
                conn.prepare("SELECT id, title, subtitle, created_at, is_completed, priority FROM tasks WHERE id = ?")?;
            let mut task_iter = stmt.query([task_id.to_string()])?;
            let mut task: Option<Task> = None;
            while let Some(row) = task_iter.next()? {
                let row = row;
                let row_id = row.get::<_, String>(0)?;
                let parsed_id: Uuid =
                    match Uuid::parse_str(&row_id) {
                        Ok(id) => id,
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing UUID: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let title: String = row.get(1)?;
                let subtitle: String = row.get(2)?;
                let created_at_str = row.get::<_, String>(3)?;
                let created_at =
                    match DateTime::parse_from_rfc3339(&created_at_str) {
                        Ok(dt) => dt.with_timezone(&Local),
                        Err(err) => {
                            return Err(rusqlite::Error::from(CustomError::ParsingError({
                                                let res =
                                                    ::alloc::fmt::format(format_args!("Error parsing data: {0}",
                                                            err));
                                                res
                                            })));
                        }
                    };
                let is_completed: bool = row.get(4)?;
                let priority_str: String = row.get(5)?;
                let priority =
                    match priority_str.as_str() {
                        "Low" => Priority::Low,
                        "Medium" => Priority::Medium,
                        "High" => Priority::High,
                        _ => {
                            ::core::panicking::panic_fmt(format_args!("Invalid priority value in database"));
                        }
                    };
                task =
                    Some(Task {
                            id: parsed_id,
                            title,
                            subtitle,
                            created_at: created_at,
                            is_completed: is_completed,
                            priority,
                        });
            }
            Ok(task)
        }
        fn update_task(conn: &Connection, task: &Task)
            -> Result<(), rusqlite::Error> {
            conn.execute("UPDATE tasks SET
          title = ?,
          subtitle = ?,
          created_at = ?,
          is_completed = ?,
          priority = ?
        WHERE id = ?",
                    &[&task.title as &dyn ::rusqlite::ToSql,
                                    &task.subtitle as &dyn ::rusqlite::ToSql,
                                    &task.created_at.to_rfc3339() as &dyn ::rusqlite::ToSql,
                                    &(task.is_completed as i32) as &dyn ::rusqlite::ToSql,
                                    &{
                                                let res =
                                                    ::alloc::fmt::format(format_args!("{0:?}", task.priority));
                                                res
                                            } as &dyn ::rusqlite::ToSql,
                                    &task.id.to_string() as &dyn ::rusqlite::ToSql] as
                        &[&dyn ::rusqlite::ToSql])?;
            Ok(())
        }
        fn delete_task(conn: &Connection, task_id: &Uuid)
            -> Result<(), rusqlite::Error> {
            conn.execute("DELETE FROM tasks WHERE id = ?",
                    [task_id.to_string()])?;
            Ok(())
        }
    }
    pub mod simple {
        use crate::api::model::{Priority, Task};
        use uuid::Uuid;
        #[doc = r###"frb_marker: #[frb(sync)]"###]
        pub fn greet(name: String) -> String {
            {
                let res =
                    ::alloc::fmt::format(format_args!("Hello, {0}!", name));
                res
            }
        }
        #[doc = r###"frb_marker: #[frb(init)]"###]
        pub fn init_app() { flutter_rust_bridge::setup_default_user_utils(); }
        pub fn tasks_by_completion(is_completed: bool) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_completion(tasks, is_completed)
        }
        pub fn tasks_by_priority(priority: Priority) -> Vec<Task> {
            let tasks =
                match read_all_tasks() {
                    Ok(tasks) => tasks,
                    Err(error) => {
                        ::core::panicking::panic_fmt(format_args!("Problem reading all tasks: {0:?}",
                                error));
                    }
                };
            crate::api::model::filter_tasks_by_priority(tasks, priority)
        }
        pub fn create_task(task_title: String, task_subtitle: String,
            task_priority: Priority) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::create_task_in_db(&task_title,
                &task_subtitle, task_priority)
        }
        pub fn read_all_tasks() -> Result<Vec<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_all_tasks_from_db()
        }
        pub fn read_task(task_id: &Uuid)
            -> Result<Option<Task>, rusqlite::Error> {
            crate::api::model_persistence::read_task_from_db(task_id)
        }
        pub fn update_task(task_id: &Uuid, title: String, subtitle: String,
            priority: Priority, is_completed: bool)
            -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::update_task_in_db(task_id, &title,
                &subtitle, priority, is_completed)
        }
        pub fn delete_task(task_id: &Uuid) -> Result<(), rusqlite::Error> {
            crate::api::model_persistence::delete_task_from_db(task_id)
        }
    }
}
 stderr=    Checking rust_lib_flutter_rust_ndk_app v0.1.0 (/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s


[2024-05-09T04:26:16.280Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/model_persistence.rs" module=Some("api::model_persistence")
[2024-05-09T04:26:16.280Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:26:16.299Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/simple.rs" module=Some("api::simple")
[2024-05-09T04:26:16.299Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:26:16.317Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/crates.rs:26] parse manifest_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/Cargo.toml"
[2024-05-09T04:26:16.962Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:26:16.962Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api"]
[2024-05-09T04:26:16.963Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:202] parse_syn_item_mod_contentless module_path=["crate", "api"]
[2024-05-09T04:26:16.963Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:205] file_path_candidates "api" "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs" ["/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api.rs", "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib/api/mod.rs"]
[2024-05-09T04:26:16.963Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/reader.rs:22] read_rust_file rust_file_path="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs" module=Some("api")
[2024-05-09T04:26:16.963Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/cargo_expand.rs:31] CachedCargoExpand execute manifest_dir= rust_crate_dir="/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust"
[2024-05-09T04:26:16.965Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:216] Trying to parse "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs"
[2024-05-09T04:26:16.981Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:26:16.982Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model"]
[2024-05-09T04:26:16.982Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model"]
[2024-05-09T04:26:16.983Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:26:16.983Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Priority, span: bytes(23581..23589) }
[2024-05-09T04:26:16.983Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: Task, span: bytes(25334..25338) }
[2024-05-09T04:26:16.984Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model"] }
[2024-05-09T04:26:16.985Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:26:16.985Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "model_persistence"]
[2024-05-09T04:26:16.986Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:26:16.986Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CONNECTION, span: bytes(29610..29620) }
[2024-05-09T04:26:16.987Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CachedConnection, span: bytes(30741..30757) }
[2024-05-09T04:26:16.987Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:101] parse_syn_item_struct_or_enum item_ident=Ident { sym: CustomError, span: bytes(31836..31847) }
[2024-05-09T04:26:16.989Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "model_persistence"] }
[2024-05-09T04:26:16.990Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:150] parse_syn_item_mod module_path=["crate", "api", "simple"]
[2024-05-09T04:26:16.990Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:180] parse_syn_item_mod_contentful module_path=["crate", "api", "simple"]
[2024-05-09T04:26:16.991Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:31] parse START info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:26:16.991Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api", "simple"] }
[2024-05-09T04:26:16.994Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/api/mod.rs", module_path: ["crate", "api"] }
[2024-05-09T04:26:16.995Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/source_graph/module_parser.rs:77] parse END info=ModuleInfo { visibility: Public, file_path: "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs", module_path: ["crate"] }
[2024-05-09T04:26:17.003Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_completion, span: bytes(5316..5342) }
[2024-05-09T04:26:17.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.004Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.005Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: filter_tasks_by_priority, span: bytes(5546..5570) }
[2024-05-09T04:26:17.005Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.005Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.006Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.006Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.007Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Low, span: bytes(1639..1642) }
[2024-05-09T04:26:17.007Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.009Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.009Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.010Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: Medium, span: bytes(1719..1725) }
[2024-05-09T04:26:17.010Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.010Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.010Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.011Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: High, span: bytes(1805..1809) }
[2024-05-09T04:26:17.011Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.011Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.011Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.012Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: new, span: bytes(3486..3489) }
[2024-05-09T04:26:17.012Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.012Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_id, span: bytes(3919..3925) }
[2024-05-09T04:26:17.013Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_title, span: bytes(4009..4018) }
[2024-05-09T04:26:17.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_title, span: bytes(4113..4122) }
[2024-05-09T04:26:17.014Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.015Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_subtitle, span: bytes(4211..4223) }
[2024-05-09T04:26:17.015Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.015Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_subtitle, span: bytes(4355..4367) }
[2024-05-09T04:26:17.016Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.016Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_created_at, span: bytes(4459..4473) }
[2024-05-09T04:26:17.016Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.017Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_created_at, span: bytes(4620..4634) }
[2024-05-09T04:26:17.017Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.017Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_completed, span: bytes(4765..4778) }
[2024-05-09T04:26:17.018Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.018Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: is_completed, span: bytes(4920..4932) }
[2024-05-09T04:26:17.018Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.018Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: set_priority, span: bytes(5055..5067) }
[2024-05-09T04:26:17.019Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.019Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.019Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: get_priority, span: bytes(5201..5213) }
[2024-05-09T04:26:17.019Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.020Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task_in_db, span: bytes(9610..9627) }
[2024-05-09T04:26:17.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks_from_db, span: bytes(10086..10108) }
[2024-05-09T04:26:17.021Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.044Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task_from_db, span: bytes(10437..10454) }
[2024-05-09T04:26:17.044Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.045Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task_in_db, span: bytes(10808..10825) }
[2024-05-09T04:26:17.045Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.045Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task_from_db, span: bytes(11599..11618) }
[2024-05-09T04:26:17.046Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: greet, span: bytes(21086..21091) }
[2024-05-09T04:26:17.046Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: init_app, span: bytes(21315..21323) }
[2024-05-09T04:26:17.046Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_completion, span: bytes(21394..21413) }
[2024-05-09T04:26:17.046Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.047Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.047Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: tasks_by_priority, span: bytes(21878..21895) }
[2024-05-09T04:26:17.047Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.048Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.048Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.048Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: create_task, span: bytes(22354..22365) }
[2024-05-09T04:26:17.049Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.049Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_all_tasks, span: bytes(22625..22639) }
[2024-05-09T04:26:17.049Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.050Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: read_task, span: bytes(22775..22784) }
[2024-05-09T04:26:17.050Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Task as opaque since attribute says so
[2024-05-09T04:26:17.050Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: update_task, span: bytes(22951..22962) }
[2024-05-09T04:26:17.050Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/type_parser/enum_or_struct.rs:41] Treat Priority as opaque since attribute says so
[2024-05-09T04:26:17.051Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/parser/function_parser/mod.rs:70] parse_function function name: Ident { sym: delete_task, span: bytes(23263..23274) }
[2024-05-09T04:26:17.100Z [32mINFO[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/codegen/polisher/add_mod_to_lib.rs:49] Inject `mod frb_generated;` into "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust/src/lib.rs"
[2024-05-09T04:26:17.101Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_dart.rs:13] execute format_dart paths=["lib/src/rust/api/model.dart", "lib/src/rust/api/model_persistence.dart", "lib/src/rust/api/simple.dart", "lib/src/rust/frb_generated.dart", "lib/src/rust/frb_generated.io.dart", "lib/src/rust/frb_generated.web.dart"] line_length=80
[2024-05-09T04:26:17.102Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\""
[2024-05-09T04:26:21.927Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app" && "sh" "-c" "\"dart\" \"format\" \"--line-length\" \"80\" \"lib/src/rust/api/model.dart\" \"lib/src/rust/api/model_persistence.dart\" \"lib/src/rust/api/simple.dart\" \"lib/src/rust/frb_generated.dart\" \"lib/src/rust/frb_generated.io.dart\" \"lib/src/rust/frb_generated.web.dart\"" stdout=Formatted lib/src/rust/api/model.dart
Formatted lib/src/rust/api/model_persistence.dart
Formatted lib/src/rust/api/simple.dart
Formatted lib/src/rust/frb_generated.dart
Formatted lib/src/rust/frb_generated.io.dart
Formatted lib/src/rust/frb_generated.web.dart
Formatted 6 files (6 changed) in 3.54 seconds.
 stderr=
[2024-05-09T04:26:21.928Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/format_rust.rs:9] execute format_rust paths=["src/frb_generated.rs", "src/frb_generated.io.rs", "src/frb_generated.web.rs"]
[2024-05-09T04:26:21.928Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:129] execute command: bin=sh args="-c \"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" current_dir=Some("/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust") cmd=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\""
[2024-05-09T04:26:22.247Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/commands/command_runner.rs:140] command=cd "/data/dev/repo/sibbull/rust/flutter_rust_ndk_app/rust" && "sh" "-c" "\"rustfmt\" \"--edition\" \"2018\" \"src/frb_generated.rs\" \"src/frb_generated.io.rs\" \"src/frb_generated.web.rs\"" stdout= stderr=
[2024-05-09T04:26:22.248Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:22] Guessing toolchain the runner is run into
[2024-05-09T04:26:22.252Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:71] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
[2024-05-09T04:26:22.253Z [34mDEBUG[0m /home/sibman/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flutter_rust_bridge_codegen-2.0.0-dev.33/src/library/utils/dart_repository/dart_repo.rs:103] Checking presence of flutter_rust_bridge in dependencies at /data/dev/repo/sibbull/rust/flutter_rust_ndk_app
