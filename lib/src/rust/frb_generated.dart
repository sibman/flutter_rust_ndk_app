// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.34.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/model.dart';
import 'api/model_persistence.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.34';

  @override
  int get rustContentHash => -1448833906;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_flutter_rust_ndk_app',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Priority crateApiModelPriorityHigh({dynamic hint});

  Priority crateApiModelPriorityLow({dynamic hint});

  Priority crateApiModelPriorityMedium({dynamic hint});

  DateTime crateApiModelTaskGetCreatedAt({required Task that, dynamic hint});

  UuidValue crateApiModelTaskGetId({required Task that, dynamic hint});

  Priority crateApiModelTaskGetPriority({required Task that, dynamic hint});

  String crateApiModelTaskGetSubtitle({required Task that, dynamic hint});

  String crateApiModelTaskGetTitle({required Task that, dynamic hint});

  bool crateApiModelTaskIsCompleted({required Task that, dynamic hint});

  Task crateApiModelTaskNew(
      {required String title,
      required String subtitle,
      required Priority priority,
      dynamic hint});

  void crateApiModelTaskSetCompleted(
      {required Task that, required bool isCompleted, dynamic hint});

  void crateApiModelTaskSetCreatedAt(
      {required Task that, required DateTime createdAt, dynamic hint});

  void crateApiModelTaskSetPriority(
      {required Task that, required Priority priority, dynamic hint});

  void crateApiModelTaskSetSubtitle(
      {required Task that, required String subtitle, dynamic hint});

  void crateApiModelTaskSetTitle(
      {required Task that, required String title, dynamic hint});

  List<Task> crateApiModelFilterTasksByCompletion(
      {required List<Task> tasks, required bool isCompleted, dynamic hint});

  List<Task> crateApiModelFilterTasksByPriority(
      {required List<Task> tasks, required Priority priority, dynamic hint});

  Future<void> crateApiModelPersistenceCreateTaskInDb(
      {required String title,
      required String subtitle,
      required Priority priority,
      dynamic hint});

  Future<void> crateApiModelPersistenceDeleteTaskFromDb(
      {required UuidValue taskId, dynamic hint});

  Future<List<Task>> crateApiModelPersistenceReadAllTasksFromDb({dynamic hint});

  Future<Task?> crateApiModelPersistenceReadTaskFromDb(
      {required UuidValue taskId, dynamic hint});

  Future<void> crateApiModelPersistenceUpdateTaskInDb(
      {required UuidValue taskId,
      required String title,
      required String subtitle,
      required Priority priority,
      required bool isCompleted,
      dynamic hint});

  void crateApiSimpleCreateTask(
      {required String taskTitle,
      required String taskSubtitle,
      required Priority taskPriority,
      dynamic hint});

  void crateApiSimpleDeleteTask({required UuidValue taskId, dynamic hint});

  String crateApiSimpleGreet({required String name, dynamic hint});

  Future<void> crateApiSimpleInitApp({dynamic hint});

  List<Task> crateApiSimpleReadAllTasks({dynamic hint});

  Task? crateApiSimpleReadTask({required UuidValue taskId, dynamic hint});

  List<Task> crateApiSimpleTasksByCompletion(
      {required bool isCompleted, dynamic hint});

  List<Task> crateApiSimpleTasksByPriority(
      {required Priority priority, dynamic hint});

  void crateApiSimpleUpdateTask(
      {required UuidValue taskId,
      required String title,
      required String subtitle,
      required Priority priority,
      required bool isCompleted,
      dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Priority;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Priority;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PriorityPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Task;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Task;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TaskPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RusqliteError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RusqliteError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RusqliteErrorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Priority crateApiModelPriorityHigh({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelPriorityHighConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelPriorityHighConstMeta => const TaskConstMeta(
        debugName: "Priority_High",
        argNames: [],
      );

  @override
  Priority crateApiModelPriorityLow({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelPriorityLowConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelPriorityLowConstMeta => const TaskConstMeta(
        debugName: "Priority_Low",
        argNames: [],
      );

  @override
  Priority crateApiModelPriorityMedium({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelPriorityMediumConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelPriorityMediumConstMeta =>
      const TaskConstMeta(
        debugName: "Priority_Medium",
        argNames: [],
      );

  @override
  DateTime crateApiModelTaskGetCreatedAt({required Task that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskGetCreatedAtConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskGetCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "Task_get_created_at",
        argNames: ["that"],
      );

  @override
  UuidValue crateApiModelTaskGetId({required Task that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Uuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskGetIdConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskGetIdConstMeta => const TaskConstMeta(
        debugName: "Task_get_id",
        argNames: ["that"],
      );

  @override
  Priority crateApiModelTaskGetPriority({required Task that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskGetPriorityConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskGetPriorityConstMeta =>
      const TaskConstMeta(
        debugName: "Task_get_priority",
        argNames: ["that"],
      );

  @override
  String crateApiModelTaskGetSubtitle({required Task that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskGetSubtitleConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskGetSubtitleConstMeta =>
      const TaskConstMeta(
        debugName: "Task_get_subtitle",
        argNames: ["that"],
      );

  @override
  String crateApiModelTaskGetTitle({required Task that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskGetTitleConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskGetTitleConstMeta => const TaskConstMeta(
        debugName: "Task_get_title",
        argNames: ["that"],
      );

  @override
  bool crateApiModelTaskIsCompleted({required Task that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskIsCompletedConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskIsCompletedConstMeta =>
      const TaskConstMeta(
        debugName: "Task_is_completed",
        argNames: ["that"],
      );

  @override
  Task crateApiModelTaskNew(
      {required String title,
      required String subtitle,
      required Priority priority,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(title, serializer);
        sse_encode_String(subtitle, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
            priority, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskNewConstMeta,
      argValues: [title, subtitle, priority],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskNewConstMeta => const TaskConstMeta(
        debugName: "Task_new",
        argNames: ["title", "subtitle", "priority"],
      );

  @override
  void crateApiModelTaskSetCompleted(
      {required Task that, required bool isCompleted, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        sse_encode_bool(isCompleted, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskSetCompletedConstMeta,
      argValues: [that, isCompleted],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskSetCompletedConstMeta =>
      const TaskConstMeta(
        debugName: "Task_set_completed",
        argNames: ["that", "isCompleted"],
      );

  @override
  void crateApiModelTaskSetCreatedAt(
      {required Task that, required DateTime createdAt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        sse_encode_Chrono_Local(createdAt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskSetCreatedAtConstMeta,
      argValues: [that, createdAt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskSetCreatedAtConstMeta =>
      const TaskConstMeta(
        debugName: "Task_set_created_at",
        argNames: ["that", "createdAt"],
      );

  @override
  void crateApiModelTaskSetPriority(
      {required Task that, required Priority priority, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
            priority, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskSetPriorityConstMeta,
      argValues: [that, priority],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskSetPriorityConstMeta =>
      const TaskConstMeta(
        debugName: "Task_set_priority",
        argNames: ["that", "priority"],
      );

  @override
  void crateApiModelTaskSetSubtitle(
      {required Task that, required String subtitle, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        sse_encode_String(subtitle, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskSetSubtitleConstMeta,
      argValues: [that, subtitle],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskSetSubtitleConstMeta =>
      const TaskConstMeta(
        debugName: "Task_set_subtitle",
        argNames: ["that", "subtitle"],
      );

  @override
  void crateApiModelTaskSetTitle(
      {required Task that, required String title, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            that, serializer);
        sse_encode_String(title, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelTaskSetTitleConstMeta,
      argValues: [that, title],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelTaskSetTitleConstMeta => const TaskConstMeta(
        debugName: "Task_set_title",
        argNames: ["that", "title"],
      );

  @override
  List<Task> crateApiModelFilterTasksByCompletion(
      {required List<Task> tasks, required bool isCompleted, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            tasks, serializer);
        sse_encode_bool(isCompleted, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelFilterTasksByCompletionConstMeta,
      argValues: [tasks, isCompleted],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelFilterTasksByCompletionConstMeta =>
      const TaskConstMeta(
        debugName: "filter_tasks_by_completion",
        argNames: ["tasks", "isCompleted"],
      );

  @override
  List<Task> crateApiModelFilterTasksByPriority(
      {required List<Task> tasks, required Priority priority, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            tasks, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
            priority, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiModelFilterTasksByPriorityConstMeta,
      argValues: [tasks, priority],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelFilterTasksByPriorityConstMeta =>
      const TaskConstMeta(
        debugName: "filter_tasks_by_priority",
        argNames: ["tasks", "priority"],
      );

  @override
  Future<void> crateApiModelPersistenceCreateTaskInDb(
      {required String title,
      required String subtitle,
      required Priority priority,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(title, serializer);
        sse_encode_String(subtitle, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
            priority, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiModelPersistenceCreateTaskInDbConstMeta,
      argValues: [title, subtitle, priority],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelPersistenceCreateTaskInDbConstMeta =>
      const TaskConstMeta(
        debugName: "create_task_in_db",
        argNames: ["title", "subtitle", "priority"],
      );

  @override
  Future<void> crateApiModelPersistenceDeleteTaskFromDb(
      {required UuidValue taskId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(taskId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiModelPersistenceDeleteTaskFromDbConstMeta,
      argValues: [taskId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelPersistenceDeleteTaskFromDbConstMeta =>
      const TaskConstMeta(
        debugName: "delete_task_from_db",
        argNames: ["taskId"],
      );

  @override
  Future<List<Task>> crateApiModelPersistenceReadAllTasksFromDb(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiModelPersistenceReadAllTasksFromDbConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelPersistenceReadAllTasksFromDbConstMeta =>
      const TaskConstMeta(
        debugName: "read_all_tasks_from_db",
        argNames: [],
      );

  @override
  Future<Task?> crateApiModelPersistenceReadTaskFromDb(
      {required UuidValue taskId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(taskId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiModelPersistenceReadTaskFromDbConstMeta,
      argValues: [taskId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelPersistenceReadTaskFromDbConstMeta =>
      const TaskConstMeta(
        debugName: "read_task_from_db",
        argNames: ["taskId"],
      );

  @override
  Future<void> crateApiModelPersistenceUpdateTaskInDb(
      {required UuidValue taskId,
      required String title,
      required String subtitle,
      required Priority priority,
      required bool isCompleted,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(taskId, serializer);
        sse_encode_String(title, serializer);
        sse_encode_String(subtitle, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
            priority, serializer);
        sse_encode_bool(isCompleted, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiModelPersistenceUpdateTaskInDbConstMeta,
      argValues: [taskId, title, subtitle, priority, isCompleted],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiModelPersistenceUpdateTaskInDbConstMeta =>
      const TaskConstMeta(
        debugName: "update_task_in_db",
        argNames: ["taskId", "title", "subtitle", "priority", "isCompleted"],
      );

  @override
  void crateApiSimpleCreateTask(
      {required String taskTitle,
      required String taskSubtitle,
      required Priority taskPriority,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(taskTitle, serializer);
        sse_encode_String(taskSubtitle, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
            taskPriority, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiSimpleCreateTaskConstMeta,
      argValues: [taskTitle, taskSubtitle, taskPriority],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleCreateTaskConstMeta => const TaskConstMeta(
        debugName: "create_task",
        argNames: ["taskTitle", "taskSubtitle", "taskPriority"],
      );

  @override
  void crateApiSimpleDeleteTask({required UuidValue taskId, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(taskId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiSimpleDeleteTaskConstMeta,
      argValues: [taskId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleDeleteTaskConstMeta => const TaskConstMeta(
        debugName: "delete_task",
        argNames: ["taskId"],
      );

  @override
  String crateApiSimpleGreet({required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  List<Task> crateApiSimpleReadAllTasks({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiSimpleReadAllTasksConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleReadAllTasksConstMeta => const TaskConstMeta(
        debugName: "read_all_tasks",
        argNames: [],
      );

  @override
  Task? crateApiSimpleReadTask({required UuidValue taskId, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(taskId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiSimpleReadTaskConstMeta,
      argValues: [taskId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleReadTaskConstMeta => const TaskConstMeta(
        debugName: "read_task",
        argNames: ["taskId"],
      );

  @override
  List<Task> crateApiSimpleTasksByCompletion(
      {required bool isCompleted, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(isCompleted, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleTasksByCompletionConstMeta,
      argValues: [isCompleted],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleTasksByCompletionConstMeta =>
      const TaskConstMeta(
        debugName: "tasks_by_completion",
        argNames: ["isCompleted"],
      );

  @override
  List<Task> crateApiSimpleTasksByPriority(
      {required Priority priority, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
            priority, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleTasksByPriorityConstMeta,
      argValues: [priority],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleTasksByPriorityConstMeta =>
      const TaskConstMeta(
        debugName: "tasks_by_priority",
        argNames: ["priority"],
      );

  @override
  void crateApiSimpleUpdateTask(
      {required UuidValue taskId,
      required String title,
      required String subtitle,
      required Priority priority,
      required bool isCompleted,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(taskId, serializer);
        sse_encode_String(title, serializer);
        sse_encode_String(subtitle, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
            priority, serializer);
        sse_encode_bool(isCompleted, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError,
      ),
      constMeta: kCrateApiSimpleUpdateTaskConstMeta,
      argValues: [taskId, title, subtitle, priority, isCompleted],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleUpdateTaskConstMeta => const TaskConstMeta(
        debugName: "update_task",
        argNames: ["taskId", "title", "subtitle", "priority", "isCompleted"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Priority => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Priority => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Task =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Task =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RusqliteError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RusqliteError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError;

  @protected
  Priority
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Priority.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Task
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Task.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RusqliteError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RusqliteError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Task
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Task.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: false);
  }

  @protected
  Priority
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Priority.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Task
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Task.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RusqliteError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RusqliteError.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Task
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
        raw);
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  List<Task>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Task?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
            raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  Priority
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Priority.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Task
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Task.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RusqliteError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RusqliteError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Task
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Task.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner, isUtc: false);
  }

  @protected
  Priority
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Priority.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Task
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Task.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RusqliteError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RusqliteError.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Task
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
        deserializer));
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  List<Task>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Task>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
              deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Task?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
          Priority self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          Task self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(
          RusqliteError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          Task self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Chrono_Local(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.microsecondsSinceEpoch, serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPriority(
          Priority self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          Task self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerrusqliteError(
          RusqliteError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          Task self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
        self, serializer);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          List<Task> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          Task? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTask(
          self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
